using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using OSIsoft.AF;
using OSIsoft.AF.Asset;
using OSIsoft.AF.EventFrame;
using OSIsoft.AF.PI;
using OSIsoft.AF.Time;
using OSIsoft.AF.UnitsOfMeasure;
using OSIsoft.AF.Data;
using System.Web;
using System.Web.Configuration;
using System.Net;
using OSIsoft.AF.Search;
using System.Data;
using System.IO;
using UNACEM.PI.DAL;
using common;
using System.DirectoryServices.AccountManagement;
using System.Text.RegularExpressions;
using System.Web.Script.Serialization;
using Newtonsoft.Json;
using OSIsoft.AF.Analysis;

namespace wsUNACEMPI
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Operaciones" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select Operaciones.svc or Operaciones.svc.cs at the Solution Explorer and start debugging.
    public class Operaciones : IOperaciones
    {
        public List<EventoFull> ListarEventosYAtributosPorArea(string database, string query, string area)
        {
            try
            {
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                int nLimiteTurno1 = Convert.ToInt32( WebConfigurationManager.AppSettings["limite_turno_1"]);
                int nLimiteTurno2 = Convert.ToInt32(WebConfigurationManager.AppSettings["limite_turno_2"]);

                List<EventoFull> oEventos = new List<EventoFull>();
                EventoFull oEvento = new EventoFull();

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();

                AFDatabase lo_Database = oPI.Databases[database];

                AFEventFrameSearch lo_search;
                IEnumerable<AFEventFrame> lo_instances;

                lo_search = new AFEventFrameSearch(lo_Database, "", query);
                lo_search.CacheTimeout = TimeSpan.FromMinutes(0);
                lo_instances = lo_search.FindEventFrames(fullLoad: false);

                double lx_Duration;
                AFTime lo_AFNow = AFTime.Now;
                string cArea = "";

                foreach (AFEventFrame lo_instance in lo_instances)
                {
                    bool bExisteCodigoParada = false;
                    string cCodigoParada = "";

                    if (lo_instance.EndTime == AFTime.Parse("9999-12-31 23:59:59"))
                        lx_Duration = (lo_AFNow.LocalTime - lo_instance.StartTime.LocalTime).TotalMinutes;
                    else
                        lx_Duration = lo_instance.Duration.ToTimeSpan().TotalMinutes;

                    string ls_ReferenciaPrimaria = "";
                    string ls_RutaReferenciaPrimaria = "";

                    if (lo_instance.PrimaryReferencedElement != null)
                    {
                        ls_ReferenciaPrimaria = lo_instance.PrimaryReferencedElement.ToString();

                        if (lo_instance.PrimaryReferencedElement.Parent != null)
                        {
                            cArea = lo_instance.PrimaryReferencedElement.Parent.Attributes["Dependencia"].GetValue().ToString();

                            if (area != "*")
                            {
                                if (cArea != area)
                                    continue;
                            }

                            ls_RutaReferenciaPrimaria = lo_instance.PrimaryReferencedElement.Parent.Name + " - " + ls_ReferenciaPrimaria;
                            if (lo_instance.PrimaryReferencedElement.Parent.Parent != null)
                            {
                                ls_RutaReferenciaPrimaria = lo_instance.PrimaryReferencedElement.Parent.Parent.Name + " - " + ls_RutaReferenciaPrimaria;
                            }

                            oEvento = new EventoFull();
                            oEvento.cSeveridad = lo_instance.Severity.ToString();
                            oEvento.cId = lo_instance.ID.ToString();
                            oEvento.cNombre = lo_instance.Name.ToString();
                            oEvento.cInicio = lo_instance.StartTime.ToString("yyyy-MM-dd HH:mm:ss");
                            oEvento.cFin = lo_instance.EndTime.ToString("yyyy-MM-dd HH:mm:ss");
                            oEvento.nDuracion = lx_Duration;
                            oEvento.cDescripcion = lo_instance.Description.ToString();
                            oEvento.cCategoria = lo_instance.Categories.ToString();
                            oEvento.cCadena = lo_instance.CategoriesString.ToString();
                            oEvento.cElementoPrimario = ls_ReferenciaPrimaria;
                            oEvento.cRutaElementoPrimario = ls_RutaReferenciaPrimaria;
                            oEvento.cPlantilla = lo_instance.Template.ToString();

                            if (lo_instance.PrimaryReferencedElement.Attributes["Número Order"] != null)
                                oEvento.nOrden = Convert.ToInt32(lo_instance.PrimaryReferencedElement.Attributes["Número Order"].GetValue().ToString());

                            oEvento.cAnalisis = "";
                            if (lo_instance.Analysis != null)
                                oEvento.cAnalisis = lo_instance.Analysis.Name;

                            oEvento.oAtributos = new List<Atributo>();
                            Atributo oAtributo;
                            string ls_UOM;

                            foreach (AFAttribute lo_Attibute in lo_instance.Attributes)
                            {
                                if (lo_Attibute.DefaultUOM == null)
                                    ls_UOM = "";
                                else
                                    ls_UOM = lo_Attibute.DefaultUOM.ToString();

                                oAtributo = new Atributo();
                                oAtributo.cNombre = lo_Attibute.Name;

                                try
                                {
                                    oAtributo.cValor = lo_Attibute.GetValue().ToString();
                                }
                                catch (Exception e)
                                {
                                    oAtributo.cValor = "";
                                    Funciones.CapturarError(e, "Operaciones.svc - ListarEventosYAtributos", "wsUNACEMPI", true);
                                }

                                if (oAtributo.cNombre.ToUpper() == "CODIGO PARADA")
                                {
                                    bExisteCodigoParada = true;
                                    cCodigoParada = oAtributo.cValor;
                                }

                                if (oAtributo.cNombre.ToUpper() == "NUMERO DE AVISO")
                                {
                                    oEvento.cNumeroAviso = oAtributo.cValor;
                                }


                                oAtributo.cUOM = ls_UOM;

                                oEvento.oAtributos.Add(oAtributo);
                            }

                            if (bExisteCodigoParada)
                            {
                                oAtributo = new Atributo();
                                oAtributo.cNombre = "Descripcion Codigo Parada";

                                //obtenemos la descripcion del codigo de parada                    
                                DataTable dt = new DataTable();
                                AFTable lo_Table;
                                lo_Table = lo_Database.Tables["Motivos de Paradas"];
                                dt = lo_Table.Table;

                                DataRow[] drs = dt.Select("CODE='" + cCodigoParada + "'");
                                if (drs.Length > 0)
                                    oAtributo.cValor = drs[0]["KURZTEXT"].ToString();
                                else
                                    oAtributo.cValor = "";

                                oAtributo.cUOM = "";

                                oEvento.oAtributos.Add(oAtributo);
                            }


                            //disgregamos duracion de paradas por turnos
                            oEvento.nDuracionTurno1 = 0;
                            oEvento.nDuracionTurno2 = 0;
                            oEvento.nDuracionTurno3 = 0;
                            oEvento.nDuracionHorasTurno1 = 0;
                            oEvento.nDuracionHorasTurno2 = 0;
                            oEvento.nDuracionHorasTurno3 = 0;

                            double nDuracionTotal = Math.Round(lx_Duration, 2, MidpointRounding.AwayFromZero);
                            double nDuracionHorasTotal = Math.Round(lx_Duration / 60.0, 2, MidpointRounding.AwayFromZero);

                            DateTime dFechaLimite1 = lo_instance.StartTime.LocalTime.Date.AddHours(nLimiteTurno1);
                            DateTime dFechaLimite2 = lo_instance.StartTime.LocalTime.Date.AddHours(nLimiteTurno2);

                            if (lo_instance.EndTime == AFTime.Parse("9999-12-31 23:59:59"))
                            {
                                //DIA ACTUAL

                                if (lo_instance.StartTime.LocalTime > dFechaLimite2)
                                {
                                    //todo turno 3
                                    oEvento.nDuracionTurno3 = nDuracionTotal;
                                    oEvento.nDuracionHorasTurno3 = nDuracionHorasTotal;
                                }
                                else if (lo_instance.StartTime.LocalTime > dFechaLimite1 && lo_instance.StartTime.LocalTime <= dFechaLimite2)
                                {
                                    if (lo_AFNow.LocalTime <= dFechaLimite2)
                                    {
                                        //todo turno 2
                                        oEvento.nDuracionTurno2 = nDuracionTotal;
                                        oEvento.nDuracionHorasTurno2 = nDuracionHorasTotal;
                                    }
                                    else
                                    {
                                        //parte turno 2
                                        oEvento.nDuracionTurno2 = (dFechaLimite2 - lo_instance.StartTime.LocalTime).TotalMinutes;
                                        oEvento.nDuracionHorasTurno2 = Math.Round((dFechaLimite2 - lo_instance.StartTime.LocalTime).TotalHours, 2, MidpointRounding.AwayFromZero);

                                        //parte turno 3
                                        oEvento.nDuracionTurno3 = nDuracionTotal - oEvento.nDuracionTurno2;
                                        oEvento.nDuracionHorasTurno3 = nDuracionHorasTotal - oEvento.nDuracionHorasTurno2;
                                    }
                                }
                                else if (lo_instance.StartTime.LocalTime <= dFechaLimite1)
                                {
                                    if (lo_AFNow.LocalTime <= dFechaLimite1)
                                    {
                                        //todo turno 1
                                        oEvento.nDuracionTurno1 = nDuracionTotal;
                                        oEvento.nDuracionHorasTurno1 = nDuracionHorasTotal;
                                    }
                                    else if (lo_AFNow.LocalTime > dFechaLimite1 && lo_AFNow.LocalTime <= dFechaLimite2)
                                    {
                                        //parte turno 1
                                        oEvento.nDuracionTurno1 = (dFechaLimite1 - lo_instance.StartTime.LocalTime).TotalMinutes;
                                        oEvento.nDuracionHorasTurno1 = Math.Round((dFechaLimite1 - lo_instance.StartTime.LocalTime).TotalHours, 2, MidpointRounding.AwayFromZero);

                                        //parte turno 2
                                        oEvento.nDuracionTurno2 = nDuracionTotal - oEvento.nDuracionTurno1;
                                        oEvento.nDuracionHorasTurno2 = nDuracionHorasTotal - oEvento.nDuracionHorasTurno1;

                                    }
                                    else if (lo_AFNow.LocalTime > dFechaLimite2)
                                    {
                                        //parte turno 1
                                        oEvento.nDuracionTurno1 = (dFechaLimite1 - lo_instance.StartTime.LocalTime).TotalMinutes;
                                        oEvento.nDuracionHorasTurno1 = Math.Round((dFechaLimite1 - lo_instance.StartTime.LocalTime).TotalHours, 2, MidpointRounding.AwayFromZero);

                                        //parte turno 3
                                        oEvento.nDuracionTurno3 = (lo_AFNow.LocalTime - dFechaLimite2).TotalMinutes;
                                        oEvento.nDuracionHorasTurno3 = Math.Round((lo_AFNow.LocalTime - dFechaLimite2).TotalHours, 2, MidpointRounding.AwayFromZero);

                                        //parte turno 2
                                        oEvento.nDuracionTurno2 = nDuracionTotal - oEvento.nDuracionTurno1 - oEvento.nDuracionTurno3;
                                        oEvento.nDuracionHorasTurno2 = nDuracionHorasTotal - oEvento.nDuracionHorasTurno1 - oEvento.nDuracionHorasTurno3;
                                    }
                                }

                            }
                            else
                            {
                                //DIAS PASADOS

                                if (lo_instance.StartTime.LocalTime > dFechaLimite2)
                                {
                                    //todo turno 3
                                    oEvento.nDuracionTurno3 = nDuracionTotal;
                                    oEvento.nDuracionHorasTurno3 = nDuracionHorasTotal;
                                }
                                else if (lo_instance.StartTime.LocalTime > dFechaLimite1 && lo_instance.StartTime.LocalTime <= dFechaLimite2)
                                {
                                    if (lo_instance.EndTime.LocalTime <= dFechaLimite2)
                                    {
                                        //todo turno 2
                                        oEvento.nDuracionTurno2 = nDuracionTotal;
                                        oEvento.nDuracionHorasTurno2 = nDuracionHorasTotal;
                                    }
                                    else
                                    {
                                        //parte turno 2
                                        oEvento.nDuracionTurno2 = (dFechaLimite2 - lo_instance.StartTime.LocalTime).TotalMinutes;
                                        oEvento.nDuracionHorasTurno2 = Math.Round((dFechaLimite2 - lo_instance.StartTime.LocalTime).TotalHours, 2, MidpointRounding.AwayFromZero);

                                        //parte turno 3
                                        oEvento.nDuracionTurno3 = nDuracionTotal - oEvento.nDuracionTurno2;
                                        oEvento.nDuracionHorasTurno3 = nDuracionHorasTotal - oEvento.nDuracionHorasTurno2;
                                    }
                                }
                                else if (lo_instance.StartTime.LocalTime <= dFechaLimite1)
                                {
                                    if (lo_instance.EndTime.LocalTime <= dFechaLimite1)
                                    {
                                        //todo turno 1
                                        oEvento.nDuracionTurno1 = nDuracionTotal;
                                        oEvento.nDuracionHorasTurno1 = nDuracionHorasTotal;
                                    }
                                    else if (lo_instance.EndTime.LocalTime > dFechaLimite1 && lo_instance.EndTime.LocalTime <= dFechaLimite2)
                                    {
                                        //parte turno 1
                                        oEvento.nDuracionTurno1 = (dFechaLimite1 - lo_instance.StartTime.LocalTime).TotalMinutes;
                                        oEvento.nDuracionHorasTurno1 = Math.Round((dFechaLimite1 - lo_instance.StartTime.LocalTime).TotalHours, 2, MidpointRounding.AwayFromZero);

                                        //parte turno 2
                                        oEvento.nDuracionTurno2 = nDuracionTotal - oEvento.nDuracionTurno1;
                                        oEvento.nDuracionHorasTurno2 = nDuracionHorasTotal - oEvento.nDuracionHorasTurno1;
                                    }
                                    else if (lo_instance.EndTime.LocalTime > dFechaLimite2)
                                    {
                                        //parte turno 1
                                        oEvento.nDuracionTurno1 = (dFechaLimite1 - lo_instance.StartTime.LocalTime).TotalMinutes;
                                        oEvento.nDuracionHorasTurno1 = Math.Round((dFechaLimite1 - lo_instance.StartTime.LocalTime).TotalHours, 2, MidpointRounding.AwayFromZero);

                                        //parte turno 3
                                        oEvento.nDuracionTurno3 = (lo_instance.EndTime.LocalTime - dFechaLimite2).TotalMinutes;
                                        oEvento.nDuracionHorasTurno3 = Math.Round((lo_instance.EndTime.LocalTime - dFechaLimite2).TotalHours, 2, MidpointRounding.AwayFromZero);

                                        //parte turno 2
                                        oEvento.nDuracionTurno2 = nDuracionTotal - oEvento.nDuracionTurno1 - oEvento.nDuracionTurno3;
                                        oEvento.nDuracionHorasTurno2 = nDuracionHorasTotal - oEvento.nDuracionHorasTurno1 - oEvento.nDuracionHorasTurno3;
                                    }
                                }
                            }




                            oEventos.Add(oEvento);


                        }
                    }


                }


                //ordenamos la lista
                List<EventoFull> oEventosOrdenados = oEventos.OrderBy(o => o.nOrden).ThenBy(o => o.cElementoPrimario).ThenBy(o => o.cInicio).ToList();

                return oEventosOrdenados;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarEventosYAtributos", "wsUNACEMPI", false);
                return null;
            }

        }


        public List<Parada> ListarParadas(string fechaini, string fechafin)
        {
            try
            {
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                String cDatabase = WebConfigurationManager.AppSettings["database"];

                List<Parada> oParadas = new List<Parada>();
                Parada oParada = new Parada();

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();

                AFDatabase lo_Database = oPI.Databases[cDatabase];

                AFEventFrameSearch lo_search;
                IEnumerable<AFEventFrame> lo_instances;

                string cQuery = "Start:>=" + fechaini + " End:<=" + fechafin + " Template:Downtime";
                lo_search = new AFEventFrameSearch(lo_Database, "", cQuery);
                lo_search.CacheTimeout = TimeSpan.FromMinutes(0);
                lo_instances = lo_search.FindEventFrames(fullLoad: false);

                double nDurationMinutos;
                AFTime lo_AFNow = AFTime.Now;

                /*
                List<AFEventFrame> oEventitos = lo_instances.Where(x => x.PrimaryReferencedElement.ToString() == "maquina" && 
                                                                        Convert.ToBoolean(x.Attributes["TransferenciaSAP"].GetValue().Value) == true).ToList();
                */

                foreach (AFEventFrame lo_instance in lo_instances)
                {
                    oParada = new Parada();
                    oParada.Id = lo_instance.ID.ToString();
                    oParada.ElementoPrimario = lo_instance.PrimaryReferencedElement.ToString();

                    oParada.TipoParada = "";
                    string cCodigoParada = lo_instance.Attributes["Codigo Parada"].GetValue().Value.ToString().Trim();
                    if (cCodigoParada.Length > 0){
                        oParada.TipoParada = cCodigoParada.Substring(0, 1);
                    }

                    oParada.TransferenciaSAP = Convert.ToBoolean(lo_instance.Attributes["Transferencia SAP"].GetValue().Value);

                    if (lo_instance.EndTime == AFTime.Parse("9999-12-31 23:59:59"))
                        nDurationMinutos = (lo_AFNow.LocalTime - lo_instance.StartTime.LocalTime).TotalMinutes;
                    else
                        nDurationMinutos = lo_instance.Duration.ToTimeSpan().TotalMinutes;

                    double nDuracionHoras = Math.Round(nDurationMinutos / 60.0, 2, MidpointRounding.AwayFromZero);
                    oParada.Duracion = nDuracionHoras;

                    oParada.Inicio = lo_instance.StartTime.ToString("yyyy-MM-dd HH:mm:ss");
                    oParada.Fin = lo_instance.EndTime.ToString("yyyy-MM-dd HH:mm:ss");

                    oParadas.Add(oParada);
                }

                return oParadas;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarParadas", "wsUNACEMPI", false);
                return new List<Parada>();
            }
        }




        /* INICIO - METODOS PARA DRAKE */

        public Resultado GenerarRDPDrake(string fecha)
        {
            DateTime ldt_Date;

            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - GenerarRDPDrake", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                //calculo de deltas 
                common.Resultado oResultado = RPD.CalcularDeltasDrake(ldt_Date);
                if (oResultado.nCodigo != 0)
                {
                    return new Resultado(oResultado.nCodigo, oResultado.cDescripcion);
                }

                //calculo de horas
                common.Resultado oResultado2 = RPD.CalcularHorasDrake(ldt_Date);
                if (oResultado2.nCodigo != 0)
                {
                    return new Resultado(oResultado2.nCodigo, oResultado2.cDescripcion);
                }

                return new Resultado(0, "Operación exitosa");
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - GenerarRDPDrake", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public List<Formulacion> ListarDeltasDeFormulacionParaReportesFinales(string template, string fechaini, string fechafin, string maquina)
            {
            List<Formulacion> oFormulaciones = new List<Formulacion>();
            Formulacion oFormulacion = new Formulacion();
            Delta oDelta = new Delta();

            //string cDominio = WebConfigurationManager.AppSettings["dominio"];
            //string cUsuario = WebConfigurationManager.AppSettings["usuario"];
            //string cPassword = WebConfigurationManager.AppSettings["password"];

            DateTime ldt_Date_Ini;
            try
            {
                ldt_Date_Ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDeltasDeFormulacionParaReportesFinales", "wsUNACEMPI", false);
                return new List<Formulacion>();
            }

            DateTime ldt_Date_Fin;
            try
            {
                ldt_Date_Fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDeltasDeFormulacionParaReportesFinales", "wsUNACEMPI", false);
                return new List<Formulacion>();
            }

            try
            {
                String cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                String cDatabase = WebConfigurationManager.AppSettings["database"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];

                //NetworkCredential oCredencial = new NetworkCredential(cUsuario, cPassword, cDominio);
                //oPI.Connect(oCredencial);
                oPI.Connect();

                AFDatabase oDB = oPI.Databases[cDatabase];

                string cRutaMaquina = "";
                if (maquina.Trim() != "")
                {
                    
                    //buscamos elemento maquina
                    var oSearchMaquina = new AFElementSearch(oDB, "BuscarMaquina", @"Root:'' Name:='" + maquina.Trim() + "' TemplateName:='Equipment'");
                    foreach (AFElement oMaquina in oSearchMaquina.FindElements(fullLoad: true))
                    {
                        cRutaMaquina = oMaquina.GetPath();
                        cRutaMaquina = cRutaMaquina.Replace(@"\\" + cServidorPIAF + @"\" + cDatabase + @"\", "");
                        break;
                    }

                    //cRutaMaquina = @"DOR\" + maquina;
                    //cRutaMaquina =  maquina;
                }
               
                var oSearch = new AFElementSearch(oDB, "Buscar", @"Root:'" + cRutaMaquina + "' TemplateName:='Counter Formulation'");       
                IEnumerable<AFElement> oElementosProductos = oSearch.FindElements(fullLoad: true);

                //creamos los elementos formulacion aun sin los deltas
                foreach (AFElement oAFElement in oElementosProductos)
                {
                    if (template=="*" || oAFElement.Attributes[template].GetValue().ValueAsInt32() == 1)
                    {
                        string cTagContador = "";
                        if (oAFElement.Attributes["Contador"].DataReference != null)
                        {
                            cTagContador = oAFElement.Attributes["Contador"].DataReference.ToString();
                            cTagContador = cTagContador.Substring(cTagContador.LastIndexOf(@"\") + 1);
                        }

                        string cTagDelta = "";
                        if (oAFElement.Attributes["DeltaRawData"].DataReference != null)
                        {
                            cTagDelta = oAFElement.Attributes["DeltaRawData"].DataReference.ToString();
                            cTagDelta = cTagDelta.Substring(cTagDelta.LastIndexOf(@"\") + 1);
                        }

                        string cTagDeltaManual = "";
                        if (oAFElement.Attributes["DeltaManualDataEntry"].DataReference != null)
                        {
                            cTagDeltaManual = oAFElement.Attributes["DeltaManualDataEntry"].DataReference.ToString();
                            cTagDeltaManual = cTagDeltaManual.Substring(cTagDeltaManual.LastIndexOf(@"\") + 1);
                        }

                        oFormulacion = new Formulacion();
                        oFormulacion.EsFactor = "N";
                        oFormulacion.Nombre = oAFElement.Name;
                        oFormulacion.TagContador = cTagContador;
                        oFormulacion.TagDelta = cTagDelta;
                        oFormulacion.TagDeltaManual = cTagDeltaManual;
                        oFormulacion.Factor = oAFElement.Attributes["Factor"].GetValue().ValueAsDouble();
                        oFormulacion.Titulo = oAFElement.Attributes["Title AA"].GetValue().ToString();
                        oFormulacion.Orden = oAFElement.Attributes["Order"].GetValue().ValueAsInt32();

                        oFormulacion.OrdenExport = 0;
                        if (template == "*")
                        {
                            oFormulacion.OrdenExport = oAFElement.Attributes["Order Export"].GetValue().ValueAsInt32();
                        }
                        else
                        {
                            if (oAFElement.Attributes["Order Export " + template] != null)
                            {
                                oFormulacion.OrdenExport = oAFElement.Attributes["Order Export " + template].GetValue().ValueAsInt32();
                            }
                        }

                        oFormulacion.Rounding = oAFElement.Attributes["Rounding"].GetValue().ValueAsInt32();
                        oFormulacion.Deltas = new List<Delta>();
                        oFormulaciones.Add(oFormulacion);
                    }
                }


                //OBTENEMOS LOS VALORES DELTAS MANUALES

                IEnumerable<AFAttribute> attributes = oElementosProductos.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList = new AFAttributeList(attributes);

                IEnumerable<AFAttribute> attributesFiltered = attributeList.Where(a => a.Name.ToUpper() == "DeltaManualDataEntry".ToUpper());
                AFAttributeList attributeListFiltered = new AFAttributeList(attributesFiltered);

                AFListData oData = attributeListFiltered.Data;

                // Results should be sent back for 100 tags in each page.
                PIPagingConfiguration config = new PIPagingConfiguration(PIPageType.TagCount, 100);
                config.OperationTimeoutOverride = new TimeSpan(2, 0, 0);

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempoIni = new AFTime(ldt_Date_Ini.ToUniversalTime());
                AFTime oTiempoFin = new AFTime(ldt_Date_Fin.ToUniversalTime());
                AFTimeRange oTiempoRango = new AFTimeRange(oTiempoIni, oTiempoFin);


                //traemos los datos
                IEnumerable<AFValues> listResults = oData.RecordedValues(oTiempoRango, AFBoundaryType.Inside, null, false, config);

                foreach (AFValues oAFValores in listResults)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {
                            
                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException")
                            {
                                continue;
                            }
                           
                            oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == oAFValor.Attribute.Element.Name);
                            
                            if (oFormulacion != null)
                            {
                                oDelta = new Delta();
                                oDelta.Fecha = oAFValor.Timestamp.LocalTime.ToString("yyyy-MM-dd");
                                
                                oDelta.Factor = oFormulacion.Factor;

                                int nRounding = oAFValor.Attribute.Element.Attributes["Rounding"].GetValue().ValueAsInt32();
                                string cCeros = "";
                                if (nRounding > 0)
                                {
                                    cCeros = "." + new StringBuilder(nRounding).Insert(0, "0", nRounding).ToString();
                                }
                                oDelta.Valor = Math.Round(oAFValor.ValueAsDouble(), 2, MidpointRounding.AwayFromZero).ToString("###,###,###" + cCeros);
                                oDelta.ValorOriginal = "";
                                oDelta.Modificado = "";

                                //obtenemos anotaciones si las tuviese
                                oDelta.UsuarioModificacion = "";
                                oDelta.Comentarios = "";
                         
                                oFormulacion.Deltas.Add(oDelta);                                     
                            }
                        }
                        catch (Exception ex2)
                        {
                            continue;
                        }

                    }
                }

                //validamos si cada formulacion tiene deltas para todas las fechas del rango, si no le agregamos
                DateTime ldt_Date_Temp = ldt_Date_Ini;
                while (ldt_Date_Temp <= ldt_Date_Fin)
                {
                    foreach (Formulacion oFormulacionTemp in oFormulaciones)
                    {
                        string cFechaTemp = ldt_Date_Temp.ToString("yyyy-MM-dd");
                        Delta oDeltaTemp = oFormulacionTemp.Deltas.FirstOrDefault(x => x.Fecha == cFechaTemp);
                        if (oDeltaTemp == null)
                        {
                            oDeltaTemp = new Delta();
                            oDeltaTemp.Fecha = cFechaTemp;
                            oDeltaTemp.Valor = "";
                            oDeltaTemp.ValorOriginal = "";
                            oDeltaTemp.Modificado = "";
                            oDeltaTemp.Factor = oFormulacionTemp.Factor;
                            oFormulacionTemp.Deltas.Add(oDeltaTemp);
                        }
                    }

                    ldt_Date_Temp = ldt_Date_Temp.AddDays(1);
                }

                //ordenamos los deltas de cada formulacion por la fecha
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    oFormulacionTemp.Deltas = oFormulacionTemp.Deltas.OrderBy(x => x.Fecha).ToList();
                }



                //OBTENEMOS LOS FACTORES 
                var oSearchFactores = new AFElementSearch(oDB, "Buscar", @"Root:'' TemplateName:='Factor Input'");
                IEnumerable<AFElement> oElementosFactores = oSearchFactores.FindElements(fullLoad: true);

                //creamos los elementos factores
                foreach (AFElement oAFElement in oElementosFactores)
                {
                    if (template == "*" || oAFElement.Attributes[template].GetValue().ValueAsInt32() == 1)
                    {
                        string cTagFactor = "";
                        if (oAFElement.Attributes["Factor"].DataReference != null)
                        {
                            cTagFactor = oAFElement.Attributes["Factor"].DataReference.ToString();
                            cTagFactor = cTagFactor.Substring(cTagFactor.LastIndexOf(@"\") + 1);
                        }

                        oFormulacion = new Formulacion();
                        oFormulacion.EsFactor = "S";
                        oFormulacion.Nombre = oAFElement.Name;
                        oFormulacion.TagContador = cTagFactor;
                        oFormulacion.TagDelta = "";
                        oFormulacion.TagDeltaManual = "";
                        oFormulacion.Factor = 1;
                        oFormulacion.Titulo = oAFElement.Attributes["Title AA"].GetValue().ToString();
                        oFormulacion.Orden = oAFElement.Attributes["Order"].GetValue().ValueAsInt32();

                        oFormulacion.OrdenExport = 0;
                        if (template == "*")
                        {
                            oFormulacion.OrdenExport = oAFElement.Attributes["Order Export"].GetValue().ValueAsInt32();
                        }
                        else
                        {
                            if (oAFElement.Attributes["Order Export " + template] != null)
                            {
                                oFormulacion.OrdenExport = oAFElement.Attributes["Order Export " + template].GetValue().ValueAsInt32();
                            }
                        }

                        oFormulacion.Rounding = oAFElement.Attributes["Rounding"].GetValue().ValueAsInt32();
                        oFormulacion.Deltas = new List<Delta>();
                        oFormulaciones.Add(oFormulacion);
                    }
                }


                //OBTENEMOS LOS VALORES DE LOS FACTORES
                IEnumerable<AFAttribute> attributesFactores = oElementosFactores.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeListFactores = new AFAttributeList(attributesFactores);

                IEnumerable<AFAttribute> attributesFilteredFactores = attributeListFactores.Where(a => a.Name.ToUpper() == "Factor".ToUpper());
                AFAttributeList attributeListFilteredFactores = new AFAttributeList(attributesFilteredFactores);

                AFListData oDataFactores = attributeListFilteredFactores.Data;

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();
        
                //traemos los datos
                IEnumerable<AFValues> listResultsFactores = oDataFactores.RecordedValues(oTiempoRango, AFBoundaryType.Outside, null, false, config);

                foreach (AFValues oAFValores in listResultsFactores)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {
                            if (oAFValor.Attribute.Element.Name == "322.Factor1")
                            {
                                int s = 0;
                            }
                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException")
                            {
                                continue;
                            }

                            oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == oAFValor.Attribute.Element.Name);

                            if (oFormulacion != null)
                            {
                                oDelta = new Delta();
                                oDelta.Fecha = oAFValor.Timestamp.LocalTime.ToString("yyyy-MM-dd");
                                oDelta.Modificado = "N";
                                oDelta.Factor = 1;

                                int nRounding = oAFValor.Attribute.Element.Attributes["Rounding"].GetValue().ValueAsInt32();
                                string cCeros = "";
                                if (nRounding > 0)
                                {
                                    cCeros = "." + new StringBuilder(nRounding).Insert(0, "0", nRounding).ToString();
                                }
                                oDelta.Valor = Math.Round(oAFValor.ValueAsDouble(), 2, MidpointRounding.AwayFromZero).ToString("###,###,###" + cCeros);
                                oDelta.ValorOriginal = oDelta.Valor;

                                oFormulacion.Deltas.Add(oDelta);
                            }
                        }
                        catch (Exception ex2)
                        {
                            continue;
                        }

                    }
                }

                //validamos si cada formulacion de factores tiene deltas para todas las fechas del rango, si no le agregamos
                ldt_Date_Temp = ldt_Date_Ini;
                while (ldt_Date_Temp <= ldt_Date_Fin)
                {
                    foreach (Formulacion oFormulacionTemp in oFormulaciones)
                    {
                        if (oFormulacionTemp.EsFactor=="S")
                        {
                            string cFechaTemp = ldt_Date_Temp.ToString("yyyy-MM-dd");
                            Delta oDeltaTemp = oFormulacionTemp.Deltas.FirstOrDefault(x => x.Fecha == cFechaTemp);
                            if (oDeltaTemp == null)
                            {
                                oDeltaTemp = new Delta();
                                oDeltaTemp.Fecha = cFechaTemp;
                                oDeltaTemp.Valor = "";
                                oDeltaTemp.ValorOriginal = oDeltaTemp.Valor;
                                oDeltaTemp.Modificado = "N";
                                oDeltaTemp.Factor = oFormulacionTemp.Factor;
                                oFormulacionTemp.Deltas.Add(oDeltaTemp);
                            }
                        }
                    }

                    ldt_Date_Temp = ldt_Date_Temp.AddDays(1);
                }

                //ordenamos los deltas de cada formulacion de factors por la fecha
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    if (oFormulacionTemp.EsFactor == "S")
                    {
                        oFormulacionTemp.Deltas = oFormulacionTemp.Deltas.OrderBy(x => x.Fecha).ToList();
                    }
                }

                //agreagamos los valores a factores que tienen valor vacio
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    if (oFormulacionTemp.EsFactor == "S")
                    {
                        string cValorUltimo = "";
                        foreach (Delta oDeltaTemp in oFormulacionTemp.Deltas)
                        {
                            if (oDeltaTemp.Valor == "")
                            {
                                oDeltaTemp.Valor = cValorUltimo;
                                //oDeltaTemp.ValorOriginal = oDeltaTemp.Valor;
                            }
                            else
                            {
                                cValorUltimo = oDeltaTemp.Valor;
                            }
                        }
                    }
                }

                //filtramos los deltas de factores para que solo contengan datos en el rango de fecha solicitado
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    if (oFormulacionTemp.EsFactor == "S")
                    {
                        oFormulacionTemp.Deltas = oFormulacionTemp.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= ldt_Date_Ini && Convert.ToDateTime(x.Fecha) <= ldt_Date_Fin).ToList();
                    }
                }



                //ordenamos las formulaciones en general
                List<Formulacion> oFormulacionesOrdenadas = oFormulaciones.OrderBy(x=>x.Orden).ToList();


                return oFormulacionesOrdenadas;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDeltasDeFormulacionParaReportesFinales", "wsUNACEMPI", false);
                return new List<Formulacion>();
            }
        }


        public List<Formulacion> ListarDeltasDeFormulacion(string template, string fechaini, string fechafin, string maquina)
        {
            List<Formulacion> oFormulaciones = new List<Formulacion>();
            Formulacion oFormulacion = new Formulacion();
            Delta oDelta = new Delta();

            //string cDominio = WebConfigurationManager.AppSettings["dominio"];
            //string cUsuario = WebConfigurationManager.AppSettings["usuario"];
            //string cPassword = WebConfigurationManager.AppSettings["password"];

            DateTime ldt_Date_Ini;
            try
            {
                ldt_Date_Ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDeltasDeFormulacion", "wsUNACEMPI", false);
                return new List<Formulacion>();
            }

            DateTime ldt_Date_Fin;
            try
            {
                ldt_Date_Fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDeltasDeFormulacion", "wsUNACEMPI", false);
                return new List<Formulacion>();
            }

            try
            {
                String cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                String cDatabase = WebConfigurationManager.AppSettings["database"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];

                //NetworkCredential oCredencial = new NetworkCredential(cUsuario, cPassword, cDominio);
                //oPI.Connect(oCredencial);
                oPI.Connect();

                AFDatabase oDB = oPI.Databases[cDatabase];

                string cRutaMaquina = "";
                if (maquina.Trim() != "")
                {

                    //buscamos elemento maquina
                    var oSearchMaquina = new AFElementSearch(oDB, "BuscarMaquina", @"Root:'' Name:='" + maquina.Trim() + "' TemplateName:='Equipment'");
                    foreach (AFElement oMaquina in oSearchMaquina.FindElements(fullLoad: true))
                    {
                        cRutaMaquina = oMaquina.GetPath();
                        cRutaMaquina = cRutaMaquina.Replace(@"\\" + cServidorPIAF + @"\" + cDatabase + @"\", "");
                        break;
                    }

                    //cRutaMaquina = @"DOR\" + maquina;
                    //cRutaMaquina =  maquina;
                }

                var oSearch = new AFElementSearch(oDB, "Buscar", @"Root:'" + cRutaMaquina + "' TemplateName:='Counter Formulation'");
                IEnumerable<AFElement> oElementosProductos = oSearch.FindElements(fullLoad: true);

                //creamos los elementos formulacion aun sin los deltas
                foreach (AFElement oAFElement in oElementosProductos)
                {
                    
                    if (oAFElement.Name == "32X.BAUSI2")
                    {
                        int f = 2;
                    }
                    if (template == "*" || oAFElement.Attributes[template].GetValue().ValueAsInt32() == 1)
                    {
                        string cTagContador = "";
                        if (oAFElement.Attributes["Contador"].DataReference != null)
                        {
                            cTagContador = oAFElement.Attributes["Contador"].DataReference.ToString();
                            cTagContador = cTagContador.Substring(cTagContador.LastIndexOf(@"\") + 1);
                        }

                        string cTagDelta = "";
                        if (oAFElement.Attributes["DeltaRawData"].DataReference != null)
                        {
                            cTagDelta = oAFElement.Attributes["DeltaRawData"].DataReference.ToString();
                            cTagDelta = cTagDelta.Substring(cTagDelta.LastIndexOf(@"\") + 1);
                        }

                        string cTagDeltaManual = "";
                        if (oAFElement.Attributes["DeltaManualDataEntry"].DataReference != null)
                        {
                            cTagDeltaManual = oAFElement.Attributes["DeltaManualDataEntry"].DataReference.ToString();
                            cTagDeltaManual = cTagDeltaManual.Substring(cTagDeltaManual.LastIndexOf(@"\") + 1);
                        }

                        oFormulacion = new Formulacion();
                        oFormulacion.EsFactor = "N";
                        oFormulacion.Nombre = oAFElement.Name;
                        oFormulacion.TagContador = cTagContador;
                        oFormulacion.TagDelta = cTagDelta;
                        oFormulacion.TagDeltaManual = cTagDeltaManual;

                        oFormulacion.Factor = 1;
                        try
                        {
                            oFormulacion.Factor = oAFElement.Attributes["Factor"].GetValue().ValueAsDouble();
                        }
                        catch (Exception exFactor)
                        {

                        }
                            

                        oFormulacion.Titulo = oAFElement.Attributes["Title AA"].GetValue().ToString();
                        oFormulacion.Orden = oAFElement.Attributes["Order"].GetValue().ValueAsInt32();

                        oFormulacion.OrdenExport = 0;
                        if (template == "*")
                        {
                            oFormulacion.OrdenExport = oAFElement.Attributes["Order Export"].GetValue().ValueAsInt32();
                        }
                        else
                        {
                            if (oAFElement.Attributes["Order Export " + template] != null)
                            {
                                oFormulacion.OrdenExport = oAFElement.Attributes["Order Export " + template].GetValue().ValueAsInt32();
                            }
                        }

                        oFormulacion.Rounding = oAFElement.Attributes["Rounding"].GetValue().ValueAsInt32();
                        oFormulacion.Deltas = new List<Delta>();
                        oFormulaciones.Add(oFormulacion);
                    }

                    

                    






                }


                //OBTENEMOS LOS VALORES DELTAS ORIGINALES

                IEnumerable<AFAttribute> attributes = oElementosProductos.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList = new AFAttributeList(attributes);

                IEnumerable<AFAttribute> attributesFiltered = attributeList.Where(a => a.Name.ToUpper() == "DeltaRawData".ToUpper());
                AFAttributeList attributeListFiltered = new AFAttributeList(attributesFiltered);

                AFListData oData = attributeListFiltered.Data;

                // Results should be sent back for 100 tags in each page.
                PIPagingConfiguration config = new PIPagingConfiguration(PIPageType.TagCount, 100);
                config.OperationTimeoutOverride = new TimeSpan(2, 0, 0);

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempoIni = new AFTime(ldt_Date_Ini.ToUniversalTime());
                AFTime oTiempoFin = new AFTime(ldt_Date_Fin.ToUniversalTime());
                AFTimeRange oTiempoRango = new AFTimeRange(oTiempoIni, oTiempoFin);

                //traemos los estados de los periodos en el rango de fecha pero empezando en el dia 1
                DateTime ldt_Date_Ini_1 = ldt_Date_Ini.AddDays(-ldt_Date_Ini.Day).AddDays(1); ;
                List<PeriodoMasterData> oPeriodos = ListarPeriodosMasterDataEnRangoFecha(ldt_Date_Ini_1.ToString("yyyy-MM-dd"), ldt_Date_Fin.ToString("yyyy-MM-dd"));

                //traemos los datos
                IEnumerable<AFValues> listResults = oData.RecordedValues(oTiempoRango, AFBoundaryType.Inside, null, false, config);

                foreach (AFValues oAFValores in listResults)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {

                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException")
                            {
                                continue;
                            }

                            oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == oAFValor.Attribute.Element.Name);

                            if (oFormulacion != null)
                            {
                                oDelta = new Delta();
                                oDelta.Fecha = oAFValor.Timestamp.LocalTime.ToString("yyyy-MM-dd");
                                oDelta.Modificado = "N";
                                oDelta.Factor = oFormulacion.Factor;

                                int nRounding = oAFValor.Attribute.Element.Attributes["Rounding"].GetValue().ValueAsInt32();
                                string cCeros = "";
                                if (nRounding > 0)
                                {
                                    cCeros = "." + new StringBuilder(nRounding).Insert(0, "0", nRounding).ToString();
                                }
                                oDelta.Valor = Math.Round(oAFValor.ValueAsDouble(), 2, MidpointRounding.AwayFromZero).ToString("###,###,##0" + cCeros);
                                oDelta.ValorOriginal = oDelta.Valor;

                                oDelta.EsEditable = false;
                                PeriodoMasterData oPeriodo = oPeriodos.FirstOrDefault(x => x.Periodo == oDelta.Fecha.Substring(0, 7) + "-01");
                                if (oPeriodo != null)
                                {
                                    if (oPeriodo.Estado == 1) //abierto
                                    {
                                        oDelta.EsEditable = true;
                                    }
                                }

                                oFormulacion.Deltas.Add(oDelta);
                            }
                        }
                        catch (Exception ex2)
                        {
                            continue;
                        }

                    }
                }

                //validamos si cada formulacion tiene deltas para todas las fechas del rango, si no le agregamos
                DateTime ldt_Date_Temp = ldt_Date_Ini;
                while (ldt_Date_Temp <= ldt_Date_Fin)
                {
                    foreach (Formulacion oFormulacionTemp in oFormulaciones)
                    {
                        string cFechaTemp = ldt_Date_Temp.ToString("yyyy-MM-dd");
                        Delta oDeltaTemp = oFormulacionTemp.Deltas.FirstOrDefault(x => x.Fecha == cFechaTemp);
                        if (oDeltaTemp == null)
                        {
                            oDeltaTemp = new Delta();
                            oDeltaTemp.Fecha = cFechaTemp;
                            oDeltaTemp.Valor = "";
                            oDeltaTemp.ValorOriginal = oDeltaTemp.Valor;
                            oDeltaTemp.Modificado = "N";
                            oDeltaTemp.Factor = oFormulacionTemp.Factor;

                            oDeltaTemp.EsEditable = false;
                            PeriodoMasterData oPeriodo = oPeriodos.FirstOrDefault(x => x.Periodo == oDeltaTemp.Fecha.Substring(0, 7) + "-01");
                            if (oPeriodo != null)
                            {
                                if (oPeriodo.Estado == 1) //abierto
                                {
                                    oDeltaTemp.EsEditable = true;
                                }
                            }

                            oFormulacionTemp.Deltas.Add(oDeltaTemp);
                        }
                    }

                    ldt_Date_Temp = ldt_Date_Temp.AddDays(1);
                }

                //ordenamos los deltas de cada formulacion por la fecha
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    oFormulacionTemp.Deltas = oFormulacionTemp.Deltas.OrderBy(x => x.Fecha).ToList();
                }




                //OBTENEMOS LOS VALORES DELTAS MANUALES EN CASO LOS TUVIERA

                attributes = oElementosProductos.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                attributeList = new AFAttributeList(attributes);

                attributesFiltered = attributeList.Where(a => a.Name.ToUpper() == "DeltaManualDataEntry".ToUpper());
                attributeListFiltered = new AFAttributeList(attributesFiltered);

                oData = attributeListFiltered.Data;

                // Results should be sent back for 100 tags in each page.
                config = new PIPagingConfiguration(PIPageType.TagCount, 100);
                config.OperationTimeoutOverride = new TimeSpan(2, 0, 0);

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                //traemos los datos
                listResults = oData.RecordedValues(oTiempoRango, AFBoundaryType.Inside, null, false, config);

                foreach (AFValues oAFValores in listResults)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                            oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                            oAFValor.Value.GetType().BaseType.Name == "SystemException")
                        {
                            continue;
                        }

                        oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == oAFValor.Attribute.Element.Name);

                        if (oFormulacion != null)
                        {
                            Delta oDeltaTemp = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == oAFValor.Timestamp.LocalTime.ToString("yyyy-MM-dd"));
                            if (oDeltaTemp != null)
                            {
                                int nRounding = oAFValor.Attribute.Element.Attributes["Rounding"].GetValue().ValueAsInt32();
                                string cCeros = "";
                                if (nRounding > 0)
                                {
                                    cCeros = "." + new StringBuilder(nRounding).Insert(0, "0", nRounding).ToString();
                                }
                                oDeltaTemp.Valor = Math.Round(oAFValor.ValueAsDouble(), 2, MidpointRounding.AwayFromZero).ToString("###,###,##0" + cCeros);

                                oDeltaTemp.Modificado = "N";

                                //obtenemos anotaciones si las tuviese
                                oDeltaTemp.UsuarioModificacion = "";
                                oDeltaTemp.Comentarios = "";

                                AFAnnotations oAnotaciones = (AFAnnotations)oAFValor.GetAnnotation();
                                if (oAnotaciones != null)
                                {
                                    //ordenamos las anotaciones desde la mas reciente a la mas antigua
                                    List<AFAnnotation> oAnotacionesOrdenadas = oAnotaciones.OrderByDescending(x => x.CreationDate.LocalTime).ToList();

                                    //usuario modificacion                                  
                                    AFAnnotation oAnotacionUsuarioModificacion = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "UsuarioModificacion");
                                    if (oAnotacionUsuarioModificacion != null)
                                    {
                                        oDeltaTemp.UsuarioModificacion = oAnotacionUsuarioModificacion.Value.ToString();
                                        if (oDeltaTemp.UsuarioModificacion != "PISystem")
                                        {
                                            oDeltaTemp.Modificado = "S";
                                        }
                                    }

                                    //comentarios                                  
                                    AFAnnotation oAnotacionComentarios = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "Comentarios");
                                    if (oAnotacionComentarios != null)
                                    {
                                        oDeltaTemp.Comentarios = oAnotacionComentarios.Value.ToString();
                                    }
                                }


                            }
                        }


                    }
                }



                //OBTENEMOS LOS FACTORES 
                var oSearchFactores = new AFElementSearch(oDB, "Buscar", @"Root:'' TemplateName:='Factor Input'");
                IEnumerable<AFElement> oElementosFactores = oSearchFactores.FindElements(fullLoad: true);

                //creamos los elementos factores
                foreach (AFElement oAFElement in oElementosFactores)
                {
                    if (template == "*" || oAFElement.Attributes[template].GetValue().ValueAsInt32() == 1)
                    {
                        string cTagFactor = "";
                        if (oAFElement.Attributes["Factor"].DataReference != null)
                        {
                            cTagFactor = oAFElement.Attributes["Factor"].DataReference.ToString();
                            cTagFactor = cTagFactor.Substring(cTagFactor.LastIndexOf(@"\") + 1);
                        }

                        oFormulacion = new Formulacion();
                        oFormulacion.EsFactor = "S";
                        oFormulacion.Nombre = oAFElement.Name;
                        oFormulacion.TagContador = cTagFactor;
                        oFormulacion.TagDelta = "";
                        oFormulacion.TagDeltaManual = "";
                        oFormulacion.Factor = 1;
                        oFormulacion.Titulo = oAFElement.Attributes["Title AA"].GetValue().ToString();
                        oFormulacion.Orden = oAFElement.Attributes["Order"].GetValue().ValueAsInt32();
                      
                        oFormulacion.OrdenExport = 0;
                        if (template == "*")
                        {
                            oFormulacion.OrdenExport = oAFElement.Attributes["Order Export"].GetValue().ValueAsInt32();
                        }
                        else
                        {
                            if (oAFElement.Attributes["Order Export " + template] != null)
                            {
                                oFormulacion.OrdenExport = oAFElement.Attributes["Order Export " + template].GetValue().ValueAsInt32();
                            }
                        }

                        oFormulacion.Rounding = oAFElement.Attributes["Rounding"].GetValue().ValueAsInt32();
                        oFormulacion.Deltas = new List<Delta>();
                        oFormulaciones.Add(oFormulacion);
                    }
                }


                //OBTENEMOS LOS VALORES DE LOS FACTORES
                IEnumerable<AFAttribute> attributesFactores = oElementosFactores.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeListFactores = new AFAttributeList(attributesFactores);

                IEnumerable<AFAttribute> attributesFilteredFactores = attributeListFactores.Where(a => a.Name.ToUpper() == "Factor".ToUpper());
                AFAttributeList attributeListFilteredFactores = new AFAttributeList(attributesFilteredFactores);

                AFListData oDataFactores = attributeListFilteredFactores.Data;

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                //traemos los datos
                IEnumerable<AFValues> listResultsFactores = oDataFactores.RecordedValues(oTiempoRango, AFBoundaryType.Outside, null, false, config);

                foreach (AFValues oAFValores in listResultsFactores)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {
                            if (oAFValor.Attribute.Element.Name == "322.Factor1")
                            {
                                int s = 0;
                            }
                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException")
                            {
                                continue;
                            }

                            oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == oAFValor.Attribute.Element.Name);

                            if (oFormulacion != null)
                            {
                                oDelta = new Delta();
                                oDelta.Fecha = oAFValor.Timestamp.LocalTime.ToString("yyyy-MM-dd");
                                oDelta.Modificado = "N";
                                oDelta.Factor = 1;

                                int nRounding = oAFValor.Attribute.Element.Attributes["Rounding"].GetValue().ValueAsInt32();
                                string cCeros = "";
                                if (nRounding > 0)
                                {
                                    cCeros = "." + new StringBuilder(nRounding).Insert(0, "0", nRounding).ToString();
                                }
                                oDelta.Valor = Math.Round(oAFValor.ValueAsDouble(), 2, MidpointRounding.AwayFromZero).ToString("###,###,##0" + cCeros);
                                oDelta.ValorOriginal = oDelta.Valor;
                                oDelta.EsEditable = false;

                                oFormulacion.Deltas.Add(oDelta);
                            }
                        }
                        catch (Exception ex2)
                        {
                            continue;
                        }

                    }
                }

                //validamos si cada formulacion de factores tiene deltas para todas las fechas del rango, si no le agregamos
                ldt_Date_Temp = ldt_Date_Ini;
                while (ldt_Date_Temp <= ldt_Date_Fin)
                {
                    foreach (Formulacion oFormulacionTemp in oFormulaciones)
                    {
                        if (oFormulacionTemp.EsFactor == "S")
                        {
                            string cFechaTemp = ldt_Date_Temp.ToString("yyyy-MM-dd");
                            Delta oDeltaTemp = oFormulacionTemp.Deltas.FirstOrDefault(x => x.Fecha == cFechaTemp);
                            if (oDeltaTemp == null)
                            {
                                oDeltaTemp = new Delta();
                                oDeltaTemp.Fecha = cFechaTemp;
                                oDeltaTemp.Valor = "";
                                oDeltaTemp.ValorOriginal = oDeltaTemp.Valor;
                                oDeltaTemp.Modificado = "N";
                                oDeltaTemp.Factor = oFormulacionTemp.Factor;
                                oDeltaTemp.EsEditable = false;
                                oFormulacionTemp.Deltas.Add(oDeltaTemp);
                            }
                        }
                    }

                    ldt_Date_Temp = ldt_Date_Temp.AddDays(1);
                }

                //ordenamos los deltas de cada formulacion de factors por la fecha
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    if (oFormulacionTemp.EsFactor == "S")
                    {
                        oFormulacionTemp.Deltas = oFormulacionTemp.Deltas.OrderBy(x => x.Fecha).ToList();
                    }
                }

                //agreagamos los valores a factores que tienen valor vacio
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    if (oFormulacionTemp.EsFactor == "S")
                    {
                        string cValorUltimo = "";
                        foreach (Delta oDeltaTemp in oFormulacionTemp.Deltas)
                        {
                            if (oDeltaTemp.Valor == "")
                            {
                                oDeltaTemp.Valor = cValorUltimo;
                                oDeltaTemp.ValorOriginal = oDeltaTemp.Valor;
                            }
                            else
                            {
                                cValorUltimo = oDeltaTemp.Valor;
                            }
                        }
                    }
                }

                //filtramos los deltas de factores para que solo contengan datos en el rango de fecha solicitado
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    if (oFormulacionTemp.EsFactor == "S")
                    {
                        oFormulacionTemp.Deltas = oFormulacionTemp.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= ldt_Date_Ini && Convert.ToDateTime(x.Fecha) <= ldt_Date_Fin).ToList();
                    }
                }



                //ordenamos las formulaciones en general
                List<Formulacion> oFormulacionesOrdenadas = oFormulaciones.OrderBy(x => x.Orden).ToList();


                return oFormulacionesOrdenadas;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDeltasDeFormulacion", "wsUNACEMPI", false);
                return new List<Formulacion>();
            }
        }


        public List<Maquina> ListarMaquinas()
        {
            try
            {
                string cDatabase = WebConfigurationManager.AppSettings["database"];
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
     
                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                
                oPI.Connect();

                AFDatabase lo_Database = oPI.Databases[cDatabase];
                List<Maquina> go_Maquina = new List<Maquina>();
                Maquina lo_Maquina = new Maquina();
                

                var oSearch = new AFElementSearch(lo_Database, "BuscarMaquinas", @"Root:'' TemplateName:='Equipment'");
                //oSearch.CacheTimeout = TimeSpan.FromMinutes(10);

                foreach (AFElement oMaquina in oSearch.FindElements(fullLoad: true))
                {
                    lo_Maquina = new Maquina();

                    lo_Maquina.Dependencia = "";
                    if (oMaquina.Attributes["Dependencia"] != null)
                        lo_Maquina.Dependencia = oMaquina.Attributes["Dependencia"].GetValue().ToString();
                    
                    lo_Maquina.Nombre = oMaquina.Name;
                    lo_Maquina.Descripcion = oMaquina.Description;

                    lo_Maquina.Orden = 0;
                    if (oMaquina.Attributes["Número Order"] != null)
                        lo_Maquina.Orden = Convert.ToInt32(oMaquina.Attributes["Número Order"].GetValue().ToString());

                    go_Maquina.Add(lo_Maquina);
                }


                //ordenamos la lista
                List<Maquina> oMaquinasOrdenadas = go_Maquina.OrderBy(o => o.Orden).ToList();

                return oMaquinasOrdenadas;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarMaquinas", "wsUNACEMPI", false);
                return null;
            }


        }


        public Resultado ActualizarDeltaManual(EntradaActualizarDeltaManual oEntradaActualizarDeltaManual)
        {
            DateTime ldt_Date;
            Resultado oResultado = new Resultado();

            string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
            string cDatabase = WebConfigurationManager.AppSettings["database"];

            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(oEntradaActualizarDeltaManual.Fecha.Substring(0, 4)),
                                        Convert.ToInt32(oEntradaActualizarDeltaManual.Fecha.Substring(5, 2)),
                                        Convert.ToInt32(oEntradaActualizarDeltaManual.Fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ActualizarDeltaManual", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                double nValorDeltaManual = Math.Round(Convert.ToDouble(oEntradaActualizarDeltaManual.Valor), oEntradaActualizarDeltaManual.Rounding, MidpointRounding.AwayFromZero);

                AFAnnotations oAnotaciones = new AFAnnotations();
                AFAnnotation oAnotacion = oAnotaciones.Add("UsuarioModificacion", oEntradaActualizarDeltaManual.UsuarioModificacion);
                oAnotacion = oAnotaciones.Add("Comentarios", oEntradaActualizarDeltaManual.Comentarios);
                
                bool rpta = ModPIExtFunctions.Write_Value_PI(cServidorPIData, oEntradaActualizarDeltaManual.TagDeltaManual, ldt_Date, nValorDeltaManual, true, oAnotaciones);

                if (rpta)
                {
                     return new Resultado(0,"Operación Exitosa" );
                }
                else
                {
                    return new Resultado(-1, "No se pudo registrar el valor " + oEntradaActualizarDeltaManual.Valor + " para el tag " + oEntradaActualizarDeltaManual.TagDeltaManual);
                }
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ActualizarDeltaManual", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public List<BloqueDOR> ObtenerDOR(string fecha)
        {
            List<BloqueDOR> oBloquesDOR = new List<BloqueDOR>();
            string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
            double sumaPorcentajes = 0;

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerDOR", "wsUNACEMPI", false);
                return new List<BloqueDOR>();
            }

            try 
            {
                //Funciones.CapturarMensaje("PASO 1");

                //DateTime dFechaIni = new DateTime(DateTime.Now.Year, 1, 1);
                DateTime dFechaIni = new DateTime(ldt_Date.Year, 1, 1);
                //List<Formulacion> oFormulaciones = ListarDeltasDeFormulacion("*",dFechaIni.ToString("yyyy-MM-dd"), fecha, "");
                List<Formulacion> oFormulaciones = ListarDeltasDeFormulacionParaReportesFinales("*", dFechaIni.ToString("yyyy-MM-dd"), fecha, "");

                FAC oFAC = ObtenerFACEnRangoFechaDeMes(fecha, fecha);




                // 1.) BLOQUE CRUSHER - LowLimestone
                BloqueDOR oBloqueDOR_1 = new BloqueDOR();
                oBloqueDOR_1.Nombre = "CRUSHER LowLimestone";
                oBloqueDOR_1.Orden = 1;
                oBloqueDOR_1.CssClass = "col-6";
                oBloqueDOR_1.EsUsagePorc = false;
                oBloqueDOR_1.Elementos = new List<ElementoDOR>();

                // 1.1) 21X.ALLSP2
                ElementoDOR oElementoDOR_1_1 = new ElementoDOR();
                oElementoDOR_1_1.Orden = 1;
                oElementoDOR_1_1.Padre = "21X.Crusher.LowLimestone";
                oElementoDOR_1_1.Nombre = "HOURS CRUSHING LOW";
                oElementoDOR_1_1.Origen = "21X.ALLSP2";
                //oElementoDOR_1_1.Origen = "411BL1WT1UM1";
                oElementoDOR_1_1.Unidad = "Hrs.";
                oElementoDOR_1_1 = CalcularElementoDOR(oElementoDOR_1_1, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_1);

                // 1.2) 21X.MGALLSP3
                ElementoDOR oElementoDOR_1_2 = new ElementoDOR();
                oElementoDOR_1_2.Orden = 2;
                oElementoDOR_1_2.Padre = "21X.Crusher.LowLimestone";
                oElementoDOR_1_2.Nombre = "MG STONE";
                oElementoDOR_1_2.Origen = "21X.MGALLSP3";
                //oElementoDOR_1_2.Origen = "5211BL1CNT1C";
                oElementoDOR_1_2.Unidad = "sty";
                oElementoDOR_1_2 = CalcularElementoDOR(oElementoDOR_1_2, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_2);

                // 1.3) 21X.ALLSP4
                ElementoDOR oElementoDOR_1_3 = new ElementoDOR();
                oElementoDOR_1_3.Orden = 3;
                oElementoDOR_1_3.Padre = "21X.Crusher.LowLimestone";
                oElementoDOR_1_3.Nombre = "LOW LIMESTONE";
                oElementoDOR_1_3.Origen = "21X.ALLSP4";
                //oElementoDOR_1_3.Origen = "411BL1WT1UM1";
                oElementoDOR_1_3.Unidad = "sT";
                oElementoDOR_1_3 = CalcularElementoDOR(oElementoDOR_1_3, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_3);


                // 1.4) 21x.ALLSP9.Total
                ElementoDOR oElementoDOR_1_4 = new ElementoDOR();
                oElementoDOR_1_4.Orden = 4;
                oElementoDOR_1_4.Padre = "";
                oElementoDOR_1_4.Nombre = "TOTAL LOW LIMESTONE CRUSHED";
                oElementoDOR_1_4.Origen = "21x.ALLSP9.Total";
                oElementoDOR_1_4.Unidad = "sT";
                oElementoDOR_1_4.CssClass = "fila-total";
                oElementoDOR_1_4 = CalcularElementoDOR(oElementoDOR_1_4, oFormulaciones, ldt_Date);           
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_4);


                //// 1.4) 21X.ALLSP4 + 21X.MGALLSP3
                //ElementoDOR oElementoDOR_1_4 = new ElementoDOR();
                //oElementoDOR_1_4.Orden = 4;
                //oElementoDOR_1_4.Padre = "";
                //oElementoDOR_1_4.Nombre = "TOTAL LOW LIMESTONE CRUSHED";
                //oElementoDOR_1_4.Origen = "21X.ALLSP4 + 21X.MGALLSP3";
                //oElementoDOR_1_4.Unidad = "sT";

                //oElementoDOR_1_4.ValorDia = "";
                //if (!(oElementoDOR_1_3.ValorDia.Trim()=="" && oElementoDOR_1_2.ValorDia.Trim()=="")){
                //    double nValorDia = (oElementoDOR_1_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorDia.Trim().Replace(",", "")));
                //    oElementoDOR_1_4.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_4.ValorMes = "";
                //if (!(oElementoDOR_1_3.ValorMes.Trim() == "" && oElementoDOR_1_2.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorMes.Trim().Replace(",", "")));
                //    oElementoDOR_1_4.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_4.ValorAno = "";
                //if (!(oElementoDOR_1_3.ValorAno.Trim() == "" && oElementoDOR_1_2.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorAno.Trim().Replace(",", "")));
                //    oElementoDOR_1_4.ValorAno = nValorAno.ToString("###,###,###.00");
                //}
            
                //oBloqueDOR_1.Elementos.Add(oElementoDOR_1_4);


                oBloquesDOR.Add(oBloqueDOR_1);


                //Funciones.CapturarMensaje("PASO 2");



                // 14.) BLOQUE CRUSHER LowLimestone USAGE %
                BloqueDOR oBloqueDOR_14 = new BloqueDOR();
                oBloqueDOR_14.Nombre = "CRUSHER LowLimestone USAGE %";
                oBloqueDOR_14.Orden = 1;
                oBloqueDOR_14.CssClass = "col-6";
                oBloqueDOR_14.EsUsagePorc = true;
                oBloqueDOR_14.Elementos = new List<ElementoDOR>();

                // 14.1) (MG STONE / TOTAL LOW LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_14_1 = new ElementoDOR();
                oElementoDOR_14_1.Orden = 1;
                oElementoDOR_14_1.Padre = "";
                oElementoDOR_14_1.Nombre = "MG STONE";
                oElementoDOR_14_1.Origen = "(MG STONE / TOTAL LOW LIMESTONE CRUSHED) * 100";
                oElementoDOR_14_1.Unidad = "";

                oElementoDOR_14_1.ValorDia = "";
                if (!(oElementoDOR_1_2.ValorDia.Trim() == "" && oElementoDOR_1_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_14_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_14_1.ValorMes = "";
                if (!(oElementoDOR_1_2.ValorMes.Trim() == "" && oElementoDOR_1_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_14_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_14_1.ValorAno = "";
                if (!(oElementoDOR_1_2.ValorAno.Trim() == "" && oElementoDOR_1_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_14_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_14.Elementos.Add(oElementoDOR_14_1);

                //Funciones.CapturarMensaje("PASO 3");

                // 14.2) (LOW LIMESTONE / TOTAL LOW LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_14_2 = new ElementoDOR();
                oElementoDOR_14_2.Orden = 2;
                oElementoDOR_14_2.Padre = "";
                oElementoDOR_14_2.Nombre = "LOW LIMESTONE";
                oElementoDOR_14_2.Origen = "(LOW LIMESTONE / TOTAL LOW LIMESTONE CRUSHED) * 100";
                oElementoDOR_14_2.Unidad = "";

                oElementoDOR_14_2.ValorDia = "";
                if (!(oElementoDOR_1_3.ValorDia.Trim() == "" && oElementoDOR_1_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_14_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_14_2.ValorMes = "";
                if (!(oElementoDOR_1_3.ValorMes.Trim() == "" && oElementoDOR_1_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_14_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_14_2.ValorAno = "";
                if (!(oElementoDOR_1_3.ValorAno.Trim() == "" && oElementoDOR_1_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_14_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_14.Elementos.Add(oElementoDOR_14_2);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_14_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_14_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_2.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_2.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_3.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_3.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_4.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_14.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_14_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_14_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_2.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_2.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_3.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_3.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_4.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_14.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_14_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_14_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_2.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_2.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_3.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_3.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_4.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_14.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }

                oBloquesDOR.Add(oBloqueDOR_14);


                //Funciones.CapturarMensaje("PASO 4");

                // 12.) BLOQUE CRUSHER - HighLimestone
                BloqueDOR oBloqueDOR_12 = new BloqueDOR();
                oBloqueDOR_12.Nombre = "CRUSHER HighLimestone";
                oBloqueDOR_12.Orden = 1;
                oBloqueDOR_12.CssClass = "col-6";
                oBloqueDOR_12.EsUsagePorc = false;
                oBloqueDOR_12.Elementos = new List<ElementoDOR>();

                // 1.5) 21X.LIMSP2
                ElementoDOR oElementoDOR_1_5 = new ElementoDOR();
                oElementoDOR_1_5.Orden = 5;
                oElementoDOR_1_5.Padre = "21X.Crusher.HighLimestone";
                oElementoDOR_1_5.Nombre = "HOURS CRUSHING HIGH";
                oElementoDOR_1_5.Origen = "21X.LIMSP2";
                oElementoDOR_1_5.Unidad = "Hrs.";
                oElementoDOR_1_5 = CalcularElementoDOR(oElementoDOR_1_5, oFormulaciones, ldt_Date);
                oBloqueDOR_12.Elementos.Add(oElementoDOR_1_5);

                // 1.6) 21X.LIMSP4
                ElementoDOR oElementoDOR_1_6 = new ElementoDOR();
                oElementoDOR_1_6.Orden = 6;
                oElementoDOR_1_6.Padre = "21X.Crusher.HighLimestone";
                oElementoDOR_1_6.Nombre = "HIGH LIMESTONE";
                oElementoDOR_1_6.Origen = "21X.LIMSP4";
                oElementoDOR_1_6.Unidad = "sT";
                oElementoDOR_1_6 = CalcularElementoDOR(oElementoDOR_1_6, oFormulaciones, ldt_Date);
                oBloqueDOR_12.Elementos.Add(oElementoDOR_1_6);

                // 1.7) 21X.Filter Cake
                ElementoDOR oElementoDOR_1_7 = new ElementoDOR();
                oElementoDOR_1_7.Orden = 7;
                oElementoDOR_1_7.Padre = "21X.Crusher.HighLimestone";
                oElementoDOR_1_7.Nombre = "FILTER CAKE USED IN HIGH LIMESTONE";
                oElementoDOR_1_7.Origen = "21X.Filter Cake";
                oElementoDOR_1_7.Unidad = "sT";
                oElementoDOR_1_7 = CalcularElementoDOR(oElementoDOR_1_7, oFormulaciones, ldt_Date);
                oBloqueDOR_12.Elementos.Add(oElementoDOR_1_7);

                // 1.8) 21X.LIMSP9.Total
                ElementoDOR oElementoDOR_1_8 = new ElementoDOR();
                oElementoDOR_1_8.Orden = 8;
                oElementoDOR_1_8.Padre = "";
                oElementoDOR_1_8.Nombre = "TOTAL HIGH LIMESTONE CRUSHED";
                oElementoDOR_1_8.Origen = "21X.LIMSP9.Total";
                oElementoDOR_1_8.Unidad = "sT";
                oElementoDOR_1_8.CssClass = "fila-total";
                oElementoDOR_1_8 = CalcularElementoDOR(oElementoDOR_1_8, oFormulaciones, ldt_Date);              
                oBloqueDOR_12.Elementos.Add(oElementoDOR_1_8);

                //// 1.8) 21X.LIMSP4 + 21X.Filter Cake
                //ElementoDOR oElementoDOR_1_8= new ElementoDOR();
                //oElementoDOR_1_8.Orden = 8;
                //oElementoDOR_1_8.Padre = "";
                //oElementoDOR_1_8.Nombre = "TOTAL HIGH LIMESTONE CRUSHED";
                //oElementoDOR_1_8.Origen = "21X.LIMSP4 + 21X.Filter Cake ";
                //oElementoDOR_1_8.Unidad = "sT";

                //oElementoDOR_1_8.ValorDia = "";
                //if (!(oElementoDOR_1_6.ValorDia.Trim() == "" && oElementoDOR_1_7.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = (oElementoDOR_1_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorDia.Trim().Replace(",", "")));
                //    oElementoDOR_1_8.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_8.ValorMes = "";
                //if (!(oElementoDOR_1_6.ValorMes.Trim() == "" && oElementoDOR_1_7.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorMes.Trim().Replace(",", "")));
                //    oElementoDOR_1_8.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_8.ValorAno = "";
                //if (!(oElementoDOR_1_6.ValorAno.Trim() == "" && oElementoDOR_1_7.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorAno.Trim().Replace(",", "")));
                //    oElementoDOR_1_8.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                //oBloqueDOR_12.Elementos.Add(oElementoDOR_1_8);

                oBloquesDOR.Add(oBloqueDOR_12);

                //Funciones.CapturarMensaje("PASO 5");


                // 15.) BLOQUE CRUSHER HighLimestone USAGE %
                BloqueDOR oBloqueDOR_15 = new BloqueDOR();
                oBloqueDOR_15.Nombre = "CRUSHER HighLimestone USAGE %";
                oBloqueDOR_15.Orden = 1;
                oBloqueDOR_15.CssClass = "col-6";
                oBloqueDOR_15.EsUsagePorc = true;
                oBloqueDOR_15.Elementos = new List<ElementoDOR>();

                // 15.1) (HIGH LIMESTONE / TOTAL HIGH LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_15_1 = new ElementoDOR();
                oElementoDOR_15_1.Orden = 1;
                oElementoDOR_15_1.Padre = "";
                oElementoDOR_15_1.Nombre = "HIGH LIMESTONE";
                oElementoDOR_15_1.Origen = "(HIGH LIMESTONE / TOTAL HIGH LIMESTONE CRUSHED) * 100";
                oElementoDOR_15_1.Unidad = "";

                oElementoDOR_15_1.ValorDia = "";
                if (!(oElementoDOR_1_6.ValorDia.Trim() == "" && oElementoDOR_1_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_15_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_15_1.ValorMes = "";
                if (!(oElementoDOR_1_6.ValorMes.Trim() == "" && oElementoDOR_1_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_15_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_15_1.ValorAno = "";
                if (!(oElementoDOR_1_6.ValorAno.Trim() == "" && oElementoDOR_1_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_15_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_15.Elementos.Add(oElementoDOR_15_1);


                // 15.2) (FILTER CAKE USED IN HIGH LIMESTONE / TOTAL HIGH LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_15_2 = new ElementoDOR();
                oElementoDOR_15_2.Orden = 2;
                oElementoDOR_15_2.Padre = "";
                oElementoDOR_15_2.Nombre = "FILTER CAKE USED IN HIGH LIMESTONE";
                oElementoDOR_15_2.Origen = "(FILTER CAKE USED IN HIGH LIMESTONE / TOTAL HIGH LIMESTONE CRUSHED) * 100";
                oElementoDOR_15_2.Unidad = "";

                oElementoDOR_15_2.ValorDia = "";
                if (!(oElementoDOR_1_7.ValorDia.Trim() == "" && oElementoDOR_1_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_15_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_15_2.ValorMes = "";
                if (!(oElementoDOR_1_7.ValorMes.Trim() == "" && oElementoDOR_1_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_15_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_15_2.ValorAno = "";
                if (!(oElementoDOR_1_7.ValorAno.Trim() == "" && oElementoDOR_1_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_15_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_15.Elementos.Add(oElementoDOR_15_2);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_15_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_15_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_2.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_6.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_6.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_7.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_7.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_8.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_15.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_15_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_15_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_2.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_6.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_6.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_7.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_7.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_8.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_15.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_15_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_15_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_2.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_6.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_6.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_7.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_7.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_8.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_15.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                oBloquesDOR.Add(oBloqueDOR_15);


                //Funciones.CapturarMensaje("PASO 6");


                // 13.) BLOQUE CRUSHER - MixLime
                BloqueDOR oBloqueDOR_13 = new BloqueDOR();
                oBloqueDOR_13.Nombre = "CRUSHER MixLime";
                oBloqueDOR_13.Orden = 1;
                oBloqueDOR_13.CssClass = "col-6";
                oBloqueDOR_13.EsUsagePorc = false;
                oBloqueDOR_13.Elementos = new List<ElementoDOR>();

                // 1.9) 21X.LIMSP8
                ElementoDOR oElementoDOR_1_9 = new ElementoDOR();
                oElementoDOR_1_9.Orden = 9;
                oElementoDOR_1_9.Padre = "21X.Crusher.MixLime";
                oElementoDOR_1_9.Nombre = "HOURS CRUSHING MIX STONE";
                oElementoDOR_1_9.Origen = "21X.LIMSP8";
                oElementoDOR_1_9.Unidad = "Hrs.";
                oElementoDOR_1_9 = CalcularElementoDOR(oElementoDOR_1_9, oFormulaciones, ldt_Date);
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_9);

                // 1.10) 21X.LIMSPMIX_C
                ElementoDOR oElementoDOR_1_10 = new ElementoDOR();
                oElementoDOR_1_10.Orden = 10;
                oElementoDOR_1_10.Padre = "21X.Crusher.MixLime";
                oElementoDOR_1_10.Nombre = "MIXED LIMESTONE  CRUSHED - C PILE";
                oElementoDOR_1_10.Origen = "21X.LIMSPMIX_C";
                oElementoDOR_1_10.Unidad = "sT";
                oElementoDOR_1_10 = CalcularElementoDOR(oElementoDOR_1_10, oFormulaciones, ldt_Date);
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_10);

                // 1.11) 21X.LIMSPMIX_D
                ElementoDOR oElementoDOR_1_11 = new ElementoDOR();
                oElementoDOR_1_11.Orden = 11;
                oElementoDOR_1_11.Padre = "21X.Crusher.MixLime";
                oElementoDOR_1_11.Nombre = "MIXED LIMESTONE  CRUSHED - D PILE";
                oElementoDOR_1_11.Origen = "21X.LIMSPMIX_D";
                oElementoDOR_1_11.Unidad = "sT";
                oElementoDOR_1_11 = CalcularElementoDOR(oElementoDOR_1_11, oFormulaciones, ldt_Date);
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_11);

                // 1.12) 21X.MIXFILTERCAKE
                ElementoDOR oElementoDOR_1_12 = new ElementoDOR();
                oElementoDOR_1_12.Orden = 12;
                oElementoDOR_1_12.Padre = "";
                oElementoDOR_1_12.Nombre = "FILTER CAKE USED IN MIX LIMESTONE";
                oElementoDOR_1_12.Origen = "21X.MIXFILTERCAKE";
                oElementoDOR_1_12.Unidad = "sT";
                oElementoDOR_1_12 = CalcularElementoDOR(oElementoDOR_1_12, oFormulaciones, ldt_Date);               
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_12);

                //// 1.12) (21X.LIMSPMIX_C + 21X.LIMSPMIX_D) * FactorFilterCake
                //ElementoDOR oElementoDOR_1_12 = new ElementoDOR();
                //oElementoDOR_1_12.Orden = 12;
                //oElementoDOR_1_12.Padre = "";
                //oElementoDOR_1_12.Nombre = "FILTER CAKE USED IN MIX LIMESTONE";
                //oElementoDOR_1_12.Origen = "(21X.LIMSPMIX_C + 21X.LIMSPMIX_D) * FactorFilterCake";
                //oElementoDOR_1_12.Unidad = "sT";

                //double nFactorFilterCake = 0;
                //string cTag_FactorFilterCake = WebConfigurationManager.AppSettings["Tag_Factor_Filter_Cake"];
                //AFValue oAFValor_FactorFilterCake = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_FactorFilterCake, ldt_Date);
                //if (oAFValor_FactorFilterCake.Value.GetType().Name == "AFEnumerationValue" ||
                //    oAFValor_FactorFilterCake.Value.GetType().BaseType.Name == "PIException" ||
                //    oAFValor_FactorFilterCake.Value.GetType().BaseType.Name == "SystemException")
                //{
                //    nFactorFilterCake = 0;
                //}
                //else
                //{
                //    nFactorFilterCake = oAFValor_FactorFilterCake.ValueAsDouble();
                //}

                //oElementoDOR_1_12.ValorDia = "";
                //if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_11.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", "")));
                //    nValorDia = nValorDia * nFactorFilterCake;
                //    oElementoDOR_1_12.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_12.ValorMes = "";
                //if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_11.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", "")));
                //    nValorMes = nValorMes * nFactorFilterCake;
                //    oElementoDOR_1_12.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_12.ValorAno = "";
                //if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_11.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", "")));
                //    nValorAno = nValorAno * nFactorFilterCake;
                //    oElementoDOR_1_12.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                //oBloqueDOR_13.Elementos.Add(oElementoDOR_1_12);


                // 1.13) 21X.MXTOT9.Total
                ElementoDOR oElementoDOR_1_13 = new ElementoDOR();
                oElementoDOR_1_13.Orden = 13;
                oElementoDOR_1_13.Padre = "";
                oElementoDOR_1_13.Nombre = "TOTAL MIX LIMESTONE CRUSHED";
                oElementoDOR_1_13.Origen = "21X.MXTOT9.Total";
                oElementoDOR_1_13.Unidad = "sT";
                oElementoDOR_1_13.CssClass = "fila-total";
                oElementoDOR_1_13 = CalcularElementoDOR(oElementoDOR_1_13, oFormulaciones, ldt_Date);           
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_13);


                //// 1.13) 21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (FILTER CAKE USED IN MIX LIMESTONE)
                //ElementoDOR oElementoDOR_1_13 = new ElementoDOR();
                //oElementoDOR_1_13.Orden = 13;
                //oElementoDOR_1_13.Padre = "";
                //oElementoDOR_1_13.Nombre = "TOTAL MIX LIMESTONE CRUSHED";
                //oElementoDOR_1_13.Origen = "21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (FILTER CAKE USED IN MIX LIMESTONE)";
                //oElementoDOR_1_13.Unidad = "sT";

                //oElementoDOR_1_13.ValorDia = "";
                //if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_11.ValorDia.Trim() == "" && oElementoDOR_1_12.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", "")));
                //    oElementoDOR_1_13.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_13.ValorMes = "";
                //if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_11.ValorMes.Trim() == "" && oElementoDOR_1_12.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", "")));
                //     oElementoDOR_1_13.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_13.ValorAno = "";
                //if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_11.ValorAno.Trim() == "" && oElementoDOR_1_12.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", "")));
                //    oElementoDOR_1_13.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                //oBloqueDOR_13.Elementos.Add(oElementoDOR_1_13);


                // 1.14) TOTAL LOW LIMESTONE CRUSHED + TOTAL HIGH LIMESTONE CRUSHED + TOTAL MIX LIMESTONE CRUSHED
                ElementoDOR oElementoDOR_1_14 = new ElementoDOR();
                oElementoDOR_1_14.Orden = 14;
                oElementoDOR_1_14.Padre = "";
                oElementoDOR_1_14.Nombre = "TOTAL LIMESTONE CRUSHED";
                oElementoDOR_1_14.Origen = "TOTAL LOW LIMESTONE CRUSHED + TOTAL HIGH LIMESTONE CRUSHED + TOTAL MIX LIMESTONE CRUSHED";
                oElementoDOR_1_14.Unidad = "sT";
                oElementoDOR_1_14.CssClass = "fila-total";

                oElementoDOR_1_14.ValorDia = "";
                if (!(oElementoDOR_1_4.ValorDia.Trim() == "" && oElementoDOR_1_8.ValorDia.Trim() == "" && oElementoDOR_1_13.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", "")));
                    oElementoDOR_1_14.ValorDia = nValorDia.ToString("###,###,###.00");
                }

                oElementoDOR_1_14.ValorMes = "";
                if (!(oElementoDOR_1_4.ValorMes.Trim() == "" && oElementoDOR_1_8.ValorMes.Trim() == "" && oElementoDOR_1_13.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", "")));
                    oElementoDOR_1_14.ValorMes = nValorMes.ToString("###,###,###.00");
                }

                oElementoDOR_1_14.ValorAno = "";
                if (!(oElementoDOR_1_4.ValorAno.Trim() == "" && oElementoDOR_1_8.ValorAno.Trim() == "" && oElementoDOR_1_13.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", "")));
                    oElementoDOR_1_14.ValorAno = nValorAno.ToString("###,###,###.00");
                }

                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_14);







                // 1.16) 21X.FOAM2
                ElementoDOR oElementoDOR_1_16 = new ElementoDOR();
                oElementoDOR_1_16.Orden = 15;
                oElementoDOR_1_16.Padre = "";
                oElementoDOR_1_16.Nombre = "FOAM";
                oElementoDOR_1_16.Origen = "Foam";
                oElementoDOR_1_16.Unidad = "sT";
                oElementoDOR_1_16.CssClass = "fila-total";
                oElementoDOR_1_16 = CalcularElementoDOR(oElementoDOR_1_16, oFormulaciones, ldt_Date);
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_16);



                //// 1.14) 21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (TOTAL LOW LIMESTONE CRUSHED) + (TOTAL HIGH LIMESTONE CRUSHED) + (FILTER CAKE USED IN MIX LIMESTONE)
                //ElementoDOR oElementoDOR_1_14 = new ElementoDOR();
                //oElementoDOR_1_14.Orden = 14;
                //oElementoDOR_1_14.Padre = "";
                //oElementoDOR_1_14.Nombre = "TOTAL LIMESTONE CRUSHED";
                //oElementoDOR_1_14.Origen = "21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (TOTAL LOW LIMESTONE CRUSHED) + (TOTAL HIGH LIMESTONE CRUSHED) + (FILTER CAKE USED IN MIX LIMESTONE)";
                //oElementoDOR_1_14.Unidad = "sT";

                //oElementoDOR_1_14.ValorDia = "";
                //if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_11.ValorDia.Trim() == "" && oElementoDOR_1_4.ValorDia.Trim() == "" && oElementoDOR_1_8.ValorDia.Trim() == "" && oElementoDOR_1_12.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", "")));
                //    oElementoDOR_1_14.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_14.ValorMes = "";
                //if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_11.ValorMes.Trim() == "" && oElementoDOR_1_4.ValorMes.Trim() == "" && oElementoDOR_1_8.ValorMes.Trim() == "" && oElementoDOR_1_12.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", "")));
                //    oElementoDOR_1_14.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_14.ValorAno = "";
                //if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_11.ValorAno.Trim() == "" && oElementoDOR_1_4.ValorAno.Trim() == "" && oElementoDOR_1_8.ValorAno.Trim() == "" && oElementoDOR_1_12.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", "")));
                //    oElementoDOR_1_14.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                //oBloqueDOR_13.Elementos.Add(oElementoDOR_1_14);



                // 1.15) (TOTAL LIMESTONE CRUSHED) / (21X.ALLSP2 + 21X.LIMSP2 + 21X.LIMSP8)
                ElementoDOR oElementoDOR_1_15 = new ElementoDOR();
                oElementoDOR_1_15.Orden = 16;
                oElementoDOR_1_15.Padre = "";
                oElementoDOR_1_15.Nombre = "PRODUCTION RATE";
                oElementoDOR_1_15.Origen = "(TOTAL LIMESTONE CRUSHED) / (21X.ALLSP2 + 21X.LIMSP2 + 21X.LIMSP8)";
                oElementoDOR_1_15.Unidad = "sT/Hrs.";

                oElementoDOR_1_15.ValorDia = "";
                if (!(oElementoDOR_1_14.ValorDia.Trim() == "" && oElementoDOR_1_1.ValorDia.Trim() == "" && oElementoDOR_1_5.ValorDia.Trim() == "" && oElementoDOR_1_9.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_1.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_5.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_9.ValorDia.Trim().Replace(",", "")));
                    if (nValorDia != 0)
                    {
                        nValorDia = (oElementoDOR_1_14.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_14.ValorDia.Trim().Replace(",", ""))) / nValorDia;
                        oElementoDOR_1_15.ValorDia = nValorDia.ToString("###,###,###.00");
                    }    
                }

                oElementoDOR_1_15.ValorMes = "";
                if (!(oElementoDOR_1_14.ValorMes.Trim() == "" && oElementoDOR_1_1.ValorMes.Trim() == "" && oElementoDOR_1_5.ValorDia.Trim() == "" && oElementoDOR_1_9.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_1.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_5.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_9.ValorMes.Trim().Replace(",", "")));
                    if (nValorMes != 0)
                    {
                        nValorMes = (oElementoDOR_1_14.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_14.ValorMes.Trim().Replace(",", ""))) / nValorMes;
                        oElementoDOR_1_15.ValorMes = nValorMes.ToString("###,###,###.00");
                    }  
                }

                oElementoDOR_1_15.ValorAno = "";
                if (!(oElementoDOR_1_14.ValorAno.Trim() == "" && oElementoDOR_1_1.ValorAno.Trim() == "" && oElementoDOR_1_5.ValorDia.Trim() == "" && oElementoDOR_1_9.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_1.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_5.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_9.ValorAno.Trim().Replace(",", "")));
                    if (nValorAno != 0)
                    {
                        nValorAno = (oElementoDOR_1_14.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_14.ValorAno.Trim().Replace(",", ""))) / nValorAno;
                        oElementoDOR_1_15.ValorAno = nValorAno.ToString("###,###,###.00");
                    }  
                }

                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_15);

                oBloquesDOR.Add(oBloqueDOR_13);

                //Funciones.CapturarMensaje("PASO 7");


                // 16.) BLOQUE CRUSHER MixLime USAGE %
                BloqueDOR oBloqueDOR_16 = new BloqueDOR();
                oBloqueDOR_16.Nombre = "CRUSHER MixLime USAGE %";
                oBloqueDOR_16.Orden = 1;
                oBloqueDOR_16.CssClass = "col-6";
                oBloqueDOR_16.EsUsagePorc = true;
                oBloqueDOR_16.Elementos = new List<ElementoDOR>();

                // 16.1) (MIXED LIMESTONE  CRUSHED - C PILE / TOTAL MIX LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_16_1 = new ElementoDOR();
                oElementoDOR_16_1.Orden = 1;
                oElementoDOR_16_1.Padre = "";
                oElementoDOR_16_1.Nombre = "MIXED LIMESTONE  CRUSHED - C PILE";
                oElementoDOR_16_1.Origen = "(MIXED LIMESTONE  CRUSHED - C PILE / TOTAL MIX LIMESTONE CRUSHED) * 100";
                oElementoDOR_16_1.Unidad = "";

                oElementoDOR_16_1.ValorDia = "";
                if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_13.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_16_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_1.ValorMes = "";
                if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_13.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_16_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_1.ValorAno = "";
                if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_13.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_16_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_16.Elementos.Add(oElementoDOR_16_1);


                // 16.2) (MIXED LIMESTONE  CRUSHED - C PILE / TOTAL MIX LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_16_2 = new ElementoDOR();
                oElementoDOR_16_2.Orden = 2;
                oElementoDOR_16_2.Padre = "";
                oElementoDOR_16_2.Nombre = "MIXED LIMESTONE  CRUSHED - D PILE";
                oElementoDOR_16_2.Origen = "(MIXED LIMESTONE  CRUSHED - D PILE / TOTAL MIX LIMESTONE CRUSHED) * 100";
                oElementoDOR_16_2.Unidad = "";

                oElementoDOR_16_2.ValorDia = "";
                if (!(oElementoDOR_1_11.ValorDia.Trim() == "" && oElementoDOR_1_13.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_16_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_2.ValorMes = "";
                if (!(oElementoDOR_1_11.ValorMes.Trim() == "" && oElementoDOR_1_13.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_16_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_2.ValorAno = "";
                if (!(oElementoDOR_1_11.ValorAno.Trim() == "" && oElementoDOR_1_13.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_16_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_16.Elementos.Add(oElementoDOR_16_2);


                // 16.3) (FILTER CAKE USED IN MIX LIMESTONE / TOTAL MIX LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_16_3 = new ElementoDOR();
                oElementoDOR_16_3.Orden = 3;
                oElementoDOR_16_3.Padre = "";
                oElementoDOR_16_3.Nombre = "FILTER CAKE USED IN MIX LIMESTONE";
                oElementoDOR_16_3.Origen = "(FILTER CAKE USED IN MIX LIMESTONE / TOTAL MIX LIMESTONE CRUSHED) * 100";
                oElementoDOR_16_3.Unidad = "";

                oElementoDOR_16_3.ValorDia = "";
                if (!(oElementoDOR_1_12.ValorDia.Trim() == "" && oElementoDOR_1_13.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_12.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_16_3.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_3.ValorMes = "";
                if (!(oElementoDOR_1_12.ValorMes.Trim() == "" && oElementoDOR_1_13.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_12.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_16_3.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_3.ValorAno = "";
                if (!(oElementoDOR_1_12.ValorAno.Trim() == "" && oElementoDOR_1_13.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_12.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_16_3.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_16.Elementos.Add(oElementoDOR_16_3);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_16_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_2.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_3.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_3.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_10.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_11.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_12.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_13.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_16.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 3).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_16_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_2.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_3.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_3.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_10.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_11.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_12.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_13.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_16.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 3).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_16_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_2.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_3.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_3.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_10.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_11.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_12.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_13.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_16.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 3).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }



                oBloquesDOR.Add(oBloqueDOR_16);

                //Funciones.CapturarMensaje("PASO 8");


                // 2.) BLOQUE RAW MILL
                BloqueDOR oBloqueDOR_2 = new BloqueDOR();
                oBloqueDOR_2.Nombre = "RAW MILL";
                oBloqueDOR_2.Orden = 2;
                oBloqueDOR_2.CssClass = "col-6";
                oBloqueDOR_2.EsUsagePorc = false;
                oBloqueDOR_2.Elementos = new List<ElementoDOR>();

                // 2.1) 32X.ALLSI2
                ElementoDOR oElementoDOR_2_1 = new ElementoDOR();
                oElementoDOR_2_1.Orden = 1;
                oElementoDOR_2_1.Padre = "32X.Raw Mill";
                oElementoDOR_2_1.Nombre = "LOW LIMESTONE";
                oElementoDOR_2_1.Origen = "32X.ALLSI2";
                oElementoDOR_2_1.Unidad = "sT";
                oElementoDOR_2_1 = CalcularElementoDOR(oElementoDOR_2_1, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_1);

                // 2.2) 32X.LIMSI2
                ElementoDOR oElementoDOR_2_2 = new ElementoDOR();
                oElementoDOR_2_2.Orden = 2;
                oElementoDOR_2_2.Padre = "32X.Raw Mill";
                oElementoDOR_2_2.Nombre = "HIGH LIMESTONE";
                oElementoDOR_2_2.Origen = "32X.LIMSI2";
                oElementoDOR_2_2.Unidad = "sT";
                oElementoDOR_2_2 = CalcularElementoDOR(oElementoDOR_2_2, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_2);

                // 2.3) 32X.LIMIX2
                ElementoDOR oElementoDOR_2_3 = new ElementoDOR();
                oElementoDOR_2_3.Orden = 3;
                oElementoDOR_2_3.Padre = "32X.Raw Mill";
                oElementoDOR_2_3.Nombre = "MIX LIMESTONE";
                oElementoDOR_2_3.Origen = "32X.LIMIX2";
                oElementoDOR_2_3.Unidad = "sT";
                oElementoDOR_2_3 = CalcularElementoDOR(oElementoDOR_2_3, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_3);

                // 2.4) 32X.BAUSI2 * RMFactor1
                ElementoDOR oElementoDOR_2_4 = new ElementoDOR();
                oElementoDOR_2_4.Orden = 4;
                oElementoDOR_2_4.Padre = "32X.Raw Mill";
                oElementoDOR_2_4.Nombre = "ALUMINA";
                oElementoDOR_2_4.Origen = "32X.BAUSI2";
                oElementoDOR_2_4.Unidad = "sT";
                oElementoDOR_2_4 = CalcularElementoDOR(oElementoDOR_2_4, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_4);

                // 2.5) 32X.BAUX3 * (1-RMFactor1)
                ElementoDOR oElementoDOR_2_5 = new ElementoDOR();
                oElementoDOR_2_5.Orden = 5;
                oElementoDOR_2_5.Padre = "32X.Raw Mill";
                oElementoDOR_2_5.Nombre = "BAUXITE";
                oElementoDOR_2_5.Origen = "32X.BAUX3";
                oElementoDOR_2_5.Unidad = "sT";
                oElementoDOR_2_5 = CalcularElementoDOR(oElementoDOR_2_5, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_5);

                // 2.6) 32X.IROSICA2 * RMFactor 2
                ElementoDOR oElementoDOR_2_6 = new ElementoDOR();
                oElementoDOR_2_6.Orden = 6;
                oElementoDOR_2_6.Padre = "32X.Raw Mill";
                oElementoDOR_2_6.Nombre = "IRON ORE";
                oElementoDOR_2_6.Origen = "32X.IROSICA2";
                oElementoDOR_2_6.Unidad = "sT";
                oElementoDOR_2_6 = CalcularElementoDOR(oElementoDOR_2_6, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_6);

                // 2.7) 32X.IROSI2
                ElementoDOR oElementoDOR_2_7 = new ElementoDOR();
                oElementoDOR_2_7.Orden = 7;
                oElementoDOR_2_7.Padre = "32X.Raw Mill";
                oElementoDOR_2_7.Nombre = "HEMATITE";
                oElementoDOR_2_7.Origen = "32X.IROSI2";
                oElementoDOR_2_7.Unidad = "sT";
                oElementoDOR_2_7 = CalcularElementoDOR(oElementoDOR_2_7, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_7);

                // 2.8) 32X.MSCL4 * (1-RMFactor2)
                ElementoDOR oElementoDOR_2_8 = new ElementoDOR();
                oElementoDOR_2_8.Orden = 8;
                oElementoDOR_2_8.Padre = "32X.Raw Mill";
                oElementoDOR_2_8.Nombre = "MILL SCALE";
                oElementoDOR_2_8.Origen = "32X.MSCL4";
                oElementoDOR_2_8.Unidad = "sT";
                oElementoDOR_2_8 = CalcularElementoDOR(oElementoDOR_2_8, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_8);

                // 2.9) 32X.SANSI2
                ElementoDOR oElementoDOR_2_9 = new ElementoDOR();
                oElementoDOR_2_9.Orden = 9;
                oElementoDOR_2_9.Padre = "32X.Raw Mill";
                oElementoDOR_2_9.Nombre = "GYPSUM";
                oElementoDOR_2_9.Origen = "32X.SANSI2";
                oElementoDOR_2_9.Unidad = "sT";
                oElementoDOR_2_9 = CalcularElementoDOR(oElementoDOR_2_9, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_9);

                // 2.10) 32X.RAMSI4
                ElementoDOR oElementoDOR_2_10 = new ElementoDOR();
                oElementoDOR_2_10.Orden = 10;
                oElementoDOR_2_10.Padre = "32X.Raw Mill";
                oElementoDOR_2_10.Nombre = "RAW MEAL";
                oElementoDOR_2_10.Origen = "32X.RAMSI4";
                oElementoDOR_2_10.Unidad = "sT";
                oElementoDOR_2_10.CssClass = "fila-total";
                oElementoDOR_2_10 = CalcularElementoDOR(oElementoDOR_2_10, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_10);

                // 2.11) 32X.RAMSI2
                ElementoDOR oElementoDOR_2_11 = new ElementoDOR();
                oElementoDOR_2_11.Orden = 11;
                oElementoDOR_2_11.Padre = "32X.Raw Mill";
                oElementoDOR_2_11.Nombre = "HOURS";
                oElementoDOR_2_11.Origen = "32X.RAMSI2";
                oElementoDOR_2_11.Unidad = "Hrs.";
                oElementoDOR_2_11 = CalcularElementoDOR(oElementoDOR_2_11, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_11);

                // 2.12) 32X.RAMSI4 / 32X.RAMSI2
                ElementoDOR oElementoDOR_2_12 = new ElementoDOR();
                oElementoDOR_2_12.Orden = 12    ;
                oElementoDOR_2_12.Padre = "";
                oElementoDOR_2_12.Nombre = "PRODUCTION RATE";
                oElementoDOR_2_12.Origen = "32X.RAMSI4 / 32X.RAMSI2";
                oElementoDOR_2_12.Unidad = "sT/Hrs.";

                oElementoDOR_2_12.ValorDia = "";
                if (!(oElementoDOR_2_10.ValorDia.Trim() == "" && oElementoDOR_2_11.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_2_12.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_2_12.ValorMes = "";
                if (!(oElementoDOR_2_10.ValorMes.Trim() == "" && oElementoDOR_2_11.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_2_12.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_2_12.ValorAno = "";
                if (!(oElementoDOR_2_10.ValorAno.Trim() == "" && oElementoDOR_2_11.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_2_12.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_12);

                oBloquesDOR.Add(oBloqueDOR_2);

                //Funciones.CapturarMensaje("PASO 9");


                // 3.) BLOQUE COAL GRINDING
                BloqueDOR oBloqueDOR_3 = new BloqueDOR();
                oBloqueDOR_3.Nombre = "COAL GRINDING";
                oBloqueDOR_3.Orden = 4;
                oBloqueDOR_3.CssClass = "col-6";
                oBloqueDOR_3.EsUsagePorc = false;
                oBloqueDOR_3.Elementos = new List<ElementoDOR>();
                
                // 3.1) 52X.COASI3 x*(1- CMFactor1)
                ElementoDOR oElementoDOR_3_1 = new ElementoDOR();
                oElementoDOR_3_1.Orden = 1;
                oElementoDOR_3_1.Padre = "52X.Coal Mill";
                oElementoDOR_3_1.Nombre = "COAL BULK";
                //oElementoDOR_3_1.Origen = "52X.COASI3";
                oElementoDOR_3_1.Origen = "52X.COASI2C";
                oElementoDOR_3_1.Unidad = "sT";
                oElementoDOR_3_1 = CalcularElementoDOR(oElementoDOR_3_1, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_1);

                // 3.2) 52X.PCOKE2 * CMFactor1
                ElementoDOR oElementoDOR_3_2 = new ElementoDOR();
                oElementoDOR_3_2.Orden = 2;
                oElementoDOR_3_2.Padre = "52X.Coal Mill";
                oElementoDOR_3_2.Nombre = "PETCOKE BULK";
                //oElementoDOR_3_2.Origen = "52X.PCOKE2";
                oElementoDOR_3_2.Origen = "52X.COASI2P";
                oElementoDOR_3_2.Unidad = "sT";
                oElementoDOR_3_2 = CalcularElementoDOR(oElementoDOR_3_2, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_2);

                // 3.3) 52X.COASI2
                ElementoDOR oElementoDOR_3_3 = new ElementoDOR();
                oElementoDOR_3_3.Orden = 3;
                oElementoDOR_3_3.Padre = "52X.Coal Mill";
                oElementoDOR_3_3.Nombre = "PULVERIZED FUEL";
                oElementoDOR_3_3.Origen = "52X.COASI2";
                oElementoDOR_3_3.Unidad = "sT";
                oElementoDOR_3_3.CssClass = "fila-total";
                oElementoDOR_3_3 = CalcularElementoDOR(oElementoDOR_3_3, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_3);

                // 3.4) 52X.PCOSI4
                ElementoDOR oElementoDOR_3_4 = new ElementoDOR();
                oElementoDOR_3_4.Orden = 4;
                oElementoDOR_3_4.Padre = "52X.Coal Mill";
                oElementoDOR_3_4.Nombre = "CO2";
                oElementoDOR_3_4.Origen = "52X.PCOSI4";
                oElementoDOR_3_4.Unidad = "MT";
                oElementoDOR_3_4 = CalcularElementoDOR(oElementoDOR_3_4, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_4);

                // 3.5) 52X.PCOSI2
                ElementoDOR oElementoDOR_3_5 = new ElementoDOR();
                oElementoDOR_3_5.Orden = 5;
                oElementoDOR_3_5.Padre = "52X.Coal Mill";
                oElementoDOR_3_5.Nombre = "HOURS";
                oElementoDOR_3_5.Origen = "52X.PCOSI2";
                oElementoDOR_3_5.Unidad = "Hrs.";
                oElementoDOR_3_5 = CalcularElementoDOR(oElementoDOR_3_5, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_5);

                // 3.6) 52X.COASI2 / 52X.PCOSI2
                ElementoDOR oElementoDOR_3_6 = new ElementoDOR();
                oElementoDOR_3_6.Orden = 6;
                oElementoDOR_3_6.Padre = "";
                oElementoDOR_3_6.Nombre = "PRODUCTION RATE";
                oElementoDOR_3_6.Origen = "52X.COASI2 / 52X.PCOSI2";
                oElementoDOR_3_6.Unidad = "sT/Hrs.";

                oElementoDOR_3_6.ValorDia = "";
                if (!(oElementoDOR_3_3.ValorDia.Trim() == "" && oElementoDOR_3_5.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_3_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_3_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_3_6.ValorMes = "";
                if (!(oElementoDOR_3_3.ValorMes.Trim() == "" && oElementoDOR_3_5.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_3_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_3_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_3_6.ValorAno = "";
                if (!(oElementoDOR_3_3.ValorAno.Trim() == "" && oElementoDOR_3_5.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_3_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_3_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_6);

                oBloquesDOR.Add(oBloqueDOR_3);

                //Funciones.CapturarMensaje("PASO 10");


                // 4.) BLOQUE KILN
                BloqueDOR oBloqueDOR_4 = new BloqueDOR();
                oBloqueDOR_4.Nombre = "KILN";
                oBloqueDOR_4.Orden = 6;
                oBloqueDOR_4.CssClass = "col-12";
                oBloqueDOR_4.EsUsagePorc = false;
                oBloqueDOR_4.Elementos = new List<ElementoDOR>();

                // 4.1) 41X.CLISI4
                ElementoDOR oElementoDOR_4_1 = new ElementoDOR();
                oElementoDOR_4_1.Orden = 1;
                oElementoDOR_4_1.Padre = "41X.Kiln";
                oElementoDOR_4_1.Nombre = "AMMONIA";
                oElementoDOR_4_1.Origen = "41X.CLISI4";
                oElementoDOR_4_1.Unidad = "sT";
                oElementoDOR_4_1 = CalcularElementoDOR(oElementoDOR_4_1, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_1);

                // 4.2) 41X.CLIS15
                ElementoDOR oElementoDOR_4_2 = new ElementoDOR();
                oElementoDOR_4_2.Orden = 2;
                oElementoDOR_4_2.Padre = "41X.Kiln";
                oElementoDOR_4_2.Nombre = "ACTUAL KILN FEED";
                oElementoDOR_4_2.Origen = "41X.CLIS15";
                oElementoDOR_4_2.Unidad = "sT";
                oElementoDOR_4_2 = CalcularElementoDOR(oElementoDOR_4_2, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_2);
                
                // 4.3) 41X.CLISI1
                ElementoDOR oElementoDOR_4_3 = new ElementoDOR();
                oElementoDOR_4_3.Orden = 3;
                oElementoDOR_4_3.Padre = "41X.Kiln";
                oElementoDOR_4_3.Nombre = "RAW FEED";
                oElementoDOR_4_3.Origen = "41X.CLISI1";
                oElementoDOR_4_3.Unidad = "sT";
                oElementoDOR_4_3 = CalcularElementoDOR(oElementoDOR_4_3, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_3);

                // 4.4) 41X.CLIS12
                ElementoDOR oElementoDOR_4_4 = new ElementoDOR();
                oElementoDOR_4_4.Orden = 4;
                oElementoDOR_4_4.Padre = "41X.Kiln";
                oElementoDOR_4_4.Nombre = "CLINKER";
                oElementoDOR_4_4.Origen = "41X.CLIS12";
                oElementoDOR_4_4.Unidad = "sT";
                oElementoDOR_4_4.CssClass = "fila-total";
                oElementoDOR_4_4 = CalcularElementoDOR(oElementoDOR_4_4, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_4);

                // 4.5) 41X.CLISI8
                ElementoDOR oElementoDOR_4_5 = new ElementoDOR();
                oElementoDOR_4_5.Orden = 5;
                oElementoDOR_4_5.Padre = "41X.Kiln";
                oElementoDOR_4_5.Nombre = "HOURS";
                oElementoDOR_4_5.Origen = "41X.CLISI8";
                oElementoDOR_4_5.Unidad = "Hrs.";
                oElementoDOR_4_5 = CalcularElementoDOR(oElementoDOR_4_5, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_5);

                // 4.6) 41X.CLIS12 / 41X.CLISI8
                ElementoDOR oElementoDOR_4_6 = new ElementoDOR();
                oElementoDOR_4_6.Orden = 6;
                oElementoDOR_4_6.Padre = "";
                oElementoDOR_4_6.Nombre = "PRODUCTION RATE";
                oElementoDOR_4_6.Origen = "41X.CLIS12 / 41X.CLISI8";
                oElementoDOR_4_6.Unidad = "sT/Hrs.";

                oElementoDOR_4_6.ValorDia = "";
                if (!(oElementoDOR_4_4.ValorDia.Trim() == "" && oElementoDOR_4_5.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_4_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_4_6.ValorMes = "";
                if (!(oElementoDOR_4_4.ValorMes.Trim() == "" && oElementoDOR_4_5.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_4_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_4_6.ValorAno = "";
                if (!(oElementoDOR_4_4.ValorAno.Trim() == "" && oElementoDOR_4_5.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_4_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_6);

                oBloquesDOR.Add(oBloqueDOR_4);


                //Funciones.CapturarMensaje("PASO 11");


                // 5.) BLOQUE FUEL CONSUMPTIONS
                BloqueDOR oBloqueDOR_5 = new BloqueDOR();
                oBloqueDOR_5.Nombre = "FUEL CONSUMPTIONS";
                oBloqueDOR_5.Orden = 8;
                oBloqueDOR_5.CssClass = "col-12";
                oBloqueDOR_5.EsUsagePorc = false;
                oBloqueDOR_5.Elementos = new List<ElementoDOR>();

                // 5.1) 41X.CLISI2
                ElementoDOR oElementoDOR_5_1 = new ElementoDOR();
                oElementoDOR_5_1.Orden = 1;
                oElementoDOR_5_1.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_1.Nombre = "COAL/FUEL KILN";
                oElementoDOR_5_1.Origen = "41X.CLISI2";
                oElementoDOR_5_1.Unidad = "sT";
                oElementoDOR_5_1 = CalcularElementoDOR(oElementoDOR_5_1, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_1);

                // 5.2) 41X.CLISI3
                ElementoDOR oElementoDOR_5_2 = new ElementoDOR();
                oElementoDOR_5_2.Orden = 2;
                oElementoDOR_5_2.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_2.Nombre = "COAL/FUEL CALCINER";
                oElementoDOR_5_2.Origen = "41X.CLISI3";
                oElementoDOR_5_2.Unidad = "sT";
                oElementoDOR_5_2 = CalcularElementoDOR(oElementoDOR_5_2, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_2);

                // 5.3) 41X.CLISI10
                ElementoDOR oElementoDOR_5_3 = new ElementoDOR();
                oElementoDOR_5_3.Orden = 3;
                oElementoDOR_5_3.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_3.Nombre = "GAS CALCINER PREHEAT";
                oElementoDOR_5_3.Origen = "41X.CLISI10";
                oElementoDOR_5_3.Unidad = "CF";
                oElementoDOR_5_3 = CalcularElementoDOR(oElementoDOR_5_3, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_3);

                // 5.4) 41X.CLISI5
                ElementoDOR oElementoDOR_5_4 = new ElementoDOR();
                oElementoDOR_5_4.Orden = 4;
                oElementoDOR_5_4.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_4.Nombre = "GAS KILN PREHEAT";
                oElementoDOR_5_4.Origen = "41X.CLISI5";
                oElementoDOR_5_4.Unidad = "CF";
                oElementoDOR_5_4 = CalcularElementoDOR(oElementoDOR_5_4, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_4);

                // 5.5) 41X.CLISI100
                ElementoDOR oElementoDOR_5_5 = new ElementoDOR();
                oElementoDOR_5_5.Orden = 5;
                oElementoDOR_5_5.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_5.Nombre = "GAS CALCINER FEED ON";
                oElementoDOR_5_5.Origen = "41X.CLISI100";
                oElementoDOR_5_5.Unidad = "CF";
                oElementoDOR_5_5 = CalcularElementoDOR(oElementoDOR_5_5, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_5);

                // 5.6) 41X.CLISI55
                ElementoDOR oElementoDOR_5_6 = new ElementoDOR();
                oElementoDOR_5_6.Orden = 6;
                oElementoDOR_5_6.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_6.Nombre = "GAS KILN FEED ON";
                oElementoDOR_5_6.Origen = "41X.CLISI55";
                oElementoDOR_5_6.Unidad = "CF";
                oElementoDOR_5_6 = CalcularElementoDOR(oElementoDOR_5_6, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_6);

                //Funciones.CapturarMensaje("PASO 11.1");

                // 5.7) VIENE DE TAG
                ElementoDOR oElementoDOR_5_7 = new ElementoDOR();
                oElementoDOR_5_7.Orden = 7;
                oElementoDOR_5_7.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_7.Nombre = "MMBtu coal/coke";
                oElementoDOR_5_7.Origen = "";
                oElementoDOR_5_7.Unidad = "";

                string cTag_5_7 = WebConfigurationManager.AppSettings["Tag_DOR_MMBtu_coal_coke"];  
                string cValor_5_7 = "";
                AFValue oAFValor_5_7 = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_5_7, ldt_Date);
                if (oAFValor_5_7.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_5_7.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_5_7.Value.GetType().BaseType.Name == "SystemException")
                {
                    cValor_5_7 = "";
                }
                else
                {
                    cValor_5_7 = oAFValor_5_7.ValueAsDouble().ToString("###,###,##0.00");
                }

                oElementoDOR_5_7.ValorDia = cValor_5_7;

                double dValor_5_7_Mes = ModPIExtFunctions.ObtenerPromedio(cServidorPIData, ldt_Date.AddDays(-ldt_Date.Day + 1), ldt_Date, cTag_5_7, "");
                oElementoDOR_5_7.ValorMes = dValor_5_7_Mes.ToString("###,###,##0.00");

                double dValor_5_7_Ano = ModPIExtFunctions.ObtenerPromedio(cServidorPIData, new DateTime(ldt_Date.Year,1,1), ldt_Date, cTag_5_7, "");
                oElementoDOR_5_7.ValorAno = dValor_5_7_Ano.ToString("###,###,##0.00");

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_7);

                //Funciones.CapturarMensaje("PASO 11.2");

                // 5.8) VIENE DE TAG
                ElementoDOR oElementoDOR_5_8 = new ElementoDOR();
                oElementoDOR_5_8.Orden = 8;
                oElementoDOR_5_8.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_8.Nombre = "MMBtu gas";
                oElementoDOR_5_8.Origen = "";
                oElementoDOR_5_8.Unidad = "";

                string cTag_5_8 = WebConfigurationManager.AppSettings["Tag_DOR_MMBtu_gas"];  
                string cValor_5_8 = "";
                AFValue oAFValor_5_8 = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_5_8, ldt_Date);
                if (oAFValor_5_8.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_5_8.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_5_8.Value.GetType().BaseType.Name == "SystemException")
                {
                    cValor_5_8 = "";
                }
                else
                {
                    cValor_5_8 = oAFValor_5_8.ValueAsDouble().ToString("###,###,##0.00");
                }

                oElementoDOR_5_8.ValorDia = cValor_5_8;

                double dValor_5_8_Mes = ModPIExtFunctions.ObtenerPromedio(cServidorPIData, ldt_Date.AddDays(-ldt_Date.Day + 1), ldt_Date, cTag_5_8, "");
                oElementoDOR_5_8.ValorMes = dValor_5_8_Mes.ToString("###,###,##0.00");

                double dValor_5_8_Ano = ModPIExtFunctions.ObtenerPromedio(cServidorPIData, new DateTime(ldt_Date.Year, 1, 1), ldt_Date, cTag_5_8, "");
                oElementoDOR_5_8.ValorAno = dValor_5_8_Ano.ToString("###,###,##0.00");

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_8);

                //Funciones.CapturarMensaje("PASO 11.3");

                // 5.9) (MMBtu coal/coke) * (41X.CLISI2 + 41X.CLISI3) / 2000.00 / 41X.CLIS12
                ElementoDOR oElementoDOR_5_9 = new ElementoDOR();
                oElementoDOR_5_9.Orden = 9;
                oElementoDOR_5_9.Padre = "";
                oElementoDOR_5_9.Nombre = "MMBtu/ton of clinker coal";
                oElementoDOR_5_9.Origen = "(MMBtu coal/coke) * (41X.CLISI2 + 41X.CLISI3) / 2000.00 / 41X.CLIS12";
                oElementoDOR_5_9.Unidad = "";
                
                oElementoDOR_5_9.ValorDia = "";
                if (!(oElementoDOR_5_7.ValorDia.Trim() == "" && oElementoDOR_5_1.ValorDia.Trim() == "" && oElementoDOR_5_2.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    double nValorDia_4_4 = 0;
                    double nValorDia_5_7 = 0;
                    double nValorDia_5_1 = 0;
                    double nValorDia_5_2 = 0;

                    Double.TryParse(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""), out nValorDia_4_4);
                    Double.TryParse(oElementoDOR_5_7.ValorDia.Trim().Replace(",", ""), out nValorDia_5_7); 
                    Double.TryParse(oElementoDOR_5_1.ValorDia.Trim().Replace(",", ""), out nValorDia_5_1);
                    Double.TryParse(oElementoDOR_5_2.ValorDia.Trim().Replace(",", ""), out nValorDia_5_2);

                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : nValorDia_4_4) != 0)
                    {
                        double nValorDia = nValorDia_5_7 *
                                           (
                                                nValorDia_5_1 +
                                                nValorDia_5_2
                                           ) / 2000.00;

                        nValorDia = nValorDia /
                                    nValorDia_4_4;

                        oElementoDOR_5_9.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_9.ValorMes = "";
                if (!(oElementoDOR_5_7.ValorMes.Trim() == "" && oElementoDOR_5_1.ValorMes.Trim() == "" && oElementoDOR_5_2.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    double nValorMes_4_4 = 0;
                    double nValorMes_5_7 = 0;
                    double nValorMes_5_1 = 0;
                    double nValorMes_5_2 = 0;

                    Double.TryParse(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""), out nValorMes_4_4);
                    Double.TryParse(oElementoDOR_5_7.ValorMes.Trim().Replace(",", ""), out nValorMes_5_7);
                    Double.TryParse(oElementoDOR_5_1.ValorMes.Trim().Replace(",", ""), out nValorMes_5_1);
                    Double.TryParse(oElementoDOR_5_2.ValorMes.Trim().Replace(",", ""), out nValorMes_5_2);

                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : nValorMes_4_4) != 0)
                    {
                        double nValorMes = nValorMes_5_7 *
                                           (
                                                nValorMes_5_1 +
                                                nValorMes_5_2
                                           ) / 2000.00;

                        nValorMes = nValorMes /
                                    nValorMes_4_4;

                        oElementoDOR_5_9.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_9.ValorAno = "";
                if (!(oElementoDOR_5_7.ValorAno.Trim() == "" && oElementoDOR_5_1.ValorAno.Trim() == "" && oElementoDOR_5_2.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    double nValorAno_4_4 = 0;
                    double nValorAno_5_7 = 0;
                    double nValorAno_5_1 = 0;
                    double nValorAno_5_2 = 0;

                    Double.TryParse(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""), out nValorAno_4_4);
                    Double.TryParse(oElementoDOR_5_7.ValorAno.Trim().Replace(",", ""), out nValorAno_5_7);
                    Double.TryParse(oElementoDOR_5_1.ValorAno.Trim().Replace(",", ""), out nValorAno_5_1);
                    Double.TryParse(oElementoDOR_5_2.ValorAno.Trim().Replace(",", ""), out nValorAno_5_2);

                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : nValorAno_4_4) != 0)
                    {
                        double nValorAno = nValorAno_5_7 *
                                           (
                                                nValorAno_5_1 +
                                                nValorAno_5_2
                                           ) / 2000.00;

                        nValorAno = nValorAno /
                                    nValorAno_4_4;

                        oElementoDOR_5_9.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_9);


                //Funciones.CapturarMensaje("PASO 11.4");

                // 5.10) (MMBtu gas) * (41X.CLISI100 + 41X.CLISI55) / 1000.00 / 41X.CLIS12
                ElementoDOR oElementoDOR_5_10 = new ElementoDOR();
                oElementoDOR_5_10.Orden = 10;
                oElementoDOR_5_10.Padre = "";
                oElementoDOR_5_10.Nombre = "MMBtu/ton of clinker gas";
                oElementoDOR_5_10.Origen = "(MMBtu gas) * (41X.CLISI100 + 41X.CLISI55) / 1000.00 / 41X.CLIS12";
                oElementoDOR_5_10.Unidad = "";

                oElementoDOR_5_10.ValorDia = "";
                if (!(oElementoDOR_5_8.ValorDia.Trim() == "" && oElementoDOR_5_5.ValorDia.Trim() == "" && oElementoDOR_5_6.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = oElementoDOR_5_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorDia.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_5.ValorDia.Trim().Replace(",", "")) +
                                                oElementoDOR_5_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_6.ValorDia.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorDia = nValorDia /
                                    (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));

                        oElementoDOR_5_10.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_10.ValorMes = "";
                if (!(oElementoDOR_5_8.ValorMes.Trim() == "" && oElementoDOR_5_5.ValorMes.Trim() == "" && oElementoDOR_5_6.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = oElementoDOR_5_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorMes.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_5.ValorMes.Trim().Replace(",", "")) +
                                                oElementoDOR_5_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_6.ValorMes.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorMes = nValorMes /
                                    (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));

                        oElementoDOR_5_10.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_10.ValorAno = "";
                if (!(oElementoDOR_5_8.ValorAno.Trim() == "" && oElementoDOR_5_5.ValorAno.Trim() == "" && oElementoDOR_5_6.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = oElementoDOR_5_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorAno.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_5.ValorAno.Trim().Replace(",", "")) +
                                                oElementoDOR_5_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_6.ValorAno.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorAno = nValorAno /
                                    (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));

                        oElementoDOR_5_10.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_10);

                //Funciones.CapturarMensaje("PASO 11.5");

                // 5.11) (MMBtu gas) * (41X.CLISI10 + 41X.CLISI55) / 1000.00 / 41X.CLIS12
                ElementoDOR oElementoDOR_5_11 = new ElementoDOR();
                oElementoDOR_5_11.Orden = 11;
                oElementoDOR_5_11.Padre = "";
                oElementoDOR_5_11.Nombre = "MMBtu/ton of clinker gas - PREHEAT";
                oElementoDOR_5_11.Origen = "(MMBtu gas) * (41X.CLISI10 + 41X.CLISI55) / 1000.00 / 41X.CLIS12";
                oElementoDOR_5_11.Unidad = "";

                oElementoDOR_5_11.ValorDia = "";
                if (!(oElementoDOR_5_8.ValorDia.Trim() == "" && oElementoDOR_5_3.ValorDia.Trim() == "" && oElementoDOR_5_4.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = oElementoDOR_5_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorDia.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_3.ValorDia.Trim().Replace(",", "")) +
                                                oElementoDOR_5_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_4.ValorDia.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorDia = nValorDia /
                                    (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));

                        oElementoDOR_5_11.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_11.ValorMes = "";
                if (!(oElementoDOR_5_8.ValorMes.Trim() == "" && oElementoDOR_5_3.ValorMes.Trim() == "" && oElementoDOR_5_4.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = oElementoDOR_5_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorMes.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_3.ValorMes.Trim().Replace(",", "")) +
                                                oElementoDOR_5_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_4.ValorMes.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorMes = nValorMes /
                                    (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));

                        oElementoDOR_5_11.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_11.ValorAno = "";
                if (!(oElementoDOR_5_8.ValorAno.Trim() == "" && oElementoDOR_5_3.ValorAno.Trim() == "" && oElementoDOR_5_4.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = oElementoDOR_5_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorAno.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_3.ValorAno.Trim().Replace(",", "")) +
                                                oElementoDOR_5_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_4.ValorAno.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorAno = nValorAno /
                                    (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));

                        oElementoDOR_5_11.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_11);

                //Funciones.CapturarMensaje("PASO 11.6");

                // 5.12) (MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas) + (MMBtu/ton of clinker gas - PREHEAT)
                ElementoDOR oElementoDOR_5_12 = new ElementoDOR();
                oElementoDOR_5_12.Orden = 12;
                oElementoDOR_5_12.Padre = "";
                oElementoDOR_5_12.Nombre = "SPECIFIC TOTAL HEAT CONSUMTION - TOTAL";
                oElementoDOR_5_12.Origen = "(MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas) + (MMBtu/ton of clinker gas - PREHEAT)";
                oElementoDOR_5_12.Unidad = "MMBTU/TON";
                oElementoDOR_5_12.CssClass = "fila-total";

                oElementoDOR_5_12.ValorDia = "";
                oElementoDOR_5_12.ValorMes = "";
                oElementoDOR_5_12.ValorAno = "";
                if (oFAC.Elementos.Count > 0)
                {
                    oElementoDOR_5_12.ValorDia = oFAC.Elementos[0].Total_MMBTU_Ton_Today;
                    oElementoDOR_5_12.ValorMes = oFAC.Elementos[0].Total_MMBTU_Ton_MTD;
                    oElementoDOR_5_12.ValorAno = oFAC.Elementos[0].Total_MMBTU_Ton_YTD;
                }                 

                //oElementoDOR_5_12.ValorDia = "";
                //if (!(oElementoDOR_5_9.ValorDia.Trim() == "" && oElementoDOR_5_10.ValorDia.Trim() == "" && oElementoDOR_5_11.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = oElementoDOR_5_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorDia.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorDia.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_11.ValorDia.Trim().Replace(",", ""));

                //    oElementoDOR_5_12.ValorDia = nValorDia.ToString("###,###,###.00");               
                //}

                //oElementoDOR_5_12.ValorMes = "";
                //if (!(oElementoDOR_5_9.ValorMes.Trim() == "" && oElementoDOR_5_10.ValorMes.Trim() == "" && oElementoDOR_5_11.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = oElementoDOR_5_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorMes.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorMes.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_11.ValorMes.Trim().Replace(",", ""));

                //    oElementoDOR_5_12.ValorMes = nValorMes.ToString("###,###,###.00");               
                //}

                //oElementoDOR_5_12.ValorAno = "";
                //if (!(oElementoDOR_5_9.ValorAno.Trim() == "" && oElementoDOR_5_10.ValorAno.Trim() == "" && oElementoDOR_5_11.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = oElementoDOR_5_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorAno.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorAno.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_11.ValorAno.Trim().Replace(",", ""));

                //    oElementoDOR_5_12.ValorAno = nValorAno.ToString("###,###,###.00");               
                //}

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_12);


                //Funciones.CapturarMensaje("PASO 11.7");

                // 5.13) (MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas)
                ElementoDOR oElementoDOR_5_13 = new ElementoDOR();
                oElementoDOR_5_13.Orden = 13;
                oElementoDOR_5_13.Padre = "";
                oElementoDOR_5_13.Nombre = "SPECIFIC HEAT CONSUMTION - Production";
                oElementoDOR_5_13.Origen = "(MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas)";
                oElementoDOR_5_13.Unidad = "MMBTU/TON";
                oElementoDOR_5_13.CssClass = "fila-total";

                oElementoDOR_5_13.ValorDia = "";
                oElementoDOR_5_13.ValorMes = "";
                oElementoDOR_5_13.ValorAno = "";
                if (oFAC.Elementos.Count > 0)
                {
                    oElementoDOR_5_13.ValorDia = oFAC.Elementos[0].Process_MMBTU_Ton_Today;
                    oElementoDOR_5_13.ValorMes = oFAC.Elementos[0].Process_MMBTU_Ton_MTD;
                    oElementoDOR_5_13.ValorAno = oFAC.Elementos[0].Process_MMBTU_Ton_YTD;
                }  

                //oElementoDOR_5_13.ValorDia = "";
                //if (!(oElementoDOR_5_9.ValorDia.Trim() == "" && oElementoDOR_5_10.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = oElementoDOR_5_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorDia.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorDia.Trim().Replace(",", ""));

                //    oElementoDOR_5_13.ValorDia = nValorDia.ToString("###,###,###.00");               
                //}

                //oElementoDOR_5_13.ValorMes = "";
                //if (!(oElementoDOR_5_9.ValorMes.Trim() == "" && oElementoDOR_5_10.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = oElementoDOR_5_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorMes.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorMes.Trim().Replace(",", ""));

                //    oElementoDOR_5_13.ValorMes = nValorMes.ToString("###,###,###.00");               
                //}

                //oElementoDOR_5_13.ValorAno = "";
                //if (!(oElementoDOR_5_9.ValorAno.Trim() == "" && oElementoDOR_5_10.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = oElementoDOR_5_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorAno.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorAno.Trim().Replace(",", ""));

                //    oElementoDOR_5_13.ValorAno = nValorAno.ToString("###,###,###.00");               
                //}

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_13);

                oBloqueDOR_5.Elementos.Remove(oElementoDOR_5_9);
                oBloqueDOR_5.Elementos.Remove(oElementoDOR_5_10);
                oBloqueDOR_5.Elementos.Remove(oElementoDOR_5_11);

                oBloquesDOR.Add(oBloqueDOR_5);

                //Funciones.CapturarMensaje("PASO 11.8");

                //Funciones.CapturarMensaje("PASO 12");


                // 6.) BLOQUE CEMENT GRINDING
                BloqueDOR oBloqueDOR_6 = new BloqueDOR();
                oBloqueDOR_6.Nombre = "CEMENT GRINDING";
                oBloqueDOR_6.Orden = 10;
                oBloqueDOR_6.CssClass = "col-6";
                oBloqueDOR_6.EsUsagePorc = false;
                oBloqueDOR_6.Elementos = new List<ElementoDOR>();

                // 6.1) 62X.CEMSI1
                ElementoDOR oElementoDOR_6_1 = new ElementoDOR();
                oElementoDOR_6_1.Orden = 1;
                oElementoDOR_6_1.Padre = "62X.Mill Roller";
                oElementoDOR_6_1.Nombre = "GRINDING AID";
                oElementoDOR_6_1.Origen = "62X.CEMSI1";
                oElementoDOR_6_1.Unidad = "LB";
                oElementoDOR_6_1 = CalcularElementoDOR(oElementoDOR_6_1, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_1);
                
                // 6.2) 62X.LIMSI6
                ElementoDOR oElementoDOR_6_2 = new ElementoDOR();
                oElementoDOR_6_2.Orden = 2;
                oElementoDOR_6_2.Padre = "62X.Mill Roller";
                oElementoDOR_6_2.Nombre = "HIGH LIMESTONE";
                oElementoDOR_6_2.Origen = "62X.LIMSI6";
                oElementoDOR_6_2.Unidad = "sT";
                oElementoDOR_6_2 = CalcularElementoDOR(oElementoDOR_6_2, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_2);

                // 6.3) 62X.GYPSI2
                ElementoDOR oElementoDOR_6_3 = new ElementoDOR();
                oElementoDOR_6_3.Orden = 3;
                oElementoDOR_6_3.Padre = "62X.Mill Roller";
                oElementoDOR_6_3.Nombre = "GYPSUM";
                oElementoDOR_6_3.Origen = "62X.GYPSI2";
                oElementoDOR_6_3.Unidad = "sT";
                oElementoDOR_6_3 = CalcularElementoDOR(oElementoDOR_6_3, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_3);

                // 6.4) 62X.CKDC1
                ElementoDOR oElementoDOR_6_4 = new ElementoDOR();
                oElementoDOR_6_4.Orden = 4;
                oElementoDOR_6_4.Padre = "62X.Mill Roller";
                oElementoDOR_6_4.Nombre = "CKD";
                oElementoDOR_6_4.Origen = "62X.CKDC1";
                oElementoDOR_6_4.Unidad = "sT";
                oElementoDOR_6_4 = CalcularElementoDOR(oElementoDOR_6_4, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_4);

                // 6.5) 62X.CLKBK20
                ElementoDOR oElementoDOR_6_5 = new ElementoDOR();
                oElementoDOR_6_5.Orden = 5;
                oElementoDOR_6_5.Padre = "62X.Mill Roller";
                oElementoDOR_6_5.Nombre = "CLINKER BK";
                oElementoDOR_6_5.Origen = "62X.CLKBK20";
                oElementoDOR_6_5.Unidad = "sT";
                oElementoDOR_6_5 = CalcularElementoDOR(oElementoDOR_6_5, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_5);

                // 6.6) 62X.TCLSIP
                ElementoDOR oElementoDOR_6_6 = new ElementoDOR();
                oElementoDOR_6_6.Orden = 6  ;
                oElementoDOR_6_6.Padre = "62X.Mill Roller";
                oElementoDOR_6_6.Nombre = "PAULDEN CLINKER";
                oElementoDOR_6_6.Origen = "62X.TCLSIP";
                oElementoDOR_6_6.Unidad = "sT";
                oElementoDOR_6_6 = CalcularElementoDOR(oElementoDOR_6_6, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_6);

                // 6.7) 62X.TCLSI1
                ElementoDOR oElementoDOR_6_7 = new ElementoDOR();
                oElementoDOR_6_7.Orden = 7;
                oElementoDOR_6_7.Padre = "62X.Mill Roller";
                oElementoDOR_6_7.Nombre = "CLINKER";
                oElementoDOR_6_7.Origen = "62X.TCLSI1";
                oElementoDOR_6_7.Unidad = "sT";
                oElementoDOR_6_7 = CalcularElementoDOR(oElementoDOR_6_7, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_7);
             
                // 6.8) 62X.TCLSI5
                ElementoDOR oElementoDOR_6_8 = new ElementoDOR();
                oElementoDOR_6_8.Orden = 8;
                oElementoDOR_6_8.Padre = "62X.Mill Roller";
                oElementoDOR_6_8.Nombre = "CEMENT";
                oElementoDOR_6_8.Origen = "62X.TCLSI5";
                oElementoDOR_6_8.Unidad = "sT";
                oElementoDOR_6_8.CssClass = "fila-total";
                oElementoDOR_6_8 = CalcularElementoDOR(oElementoDOR_6_8, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_8);

                // 6.9) 62X.CEMENT BK
                ElementoDOR oElementoDOR_6_9= new ElementoDOR();
                oElementoDOR_6_9.Orden = 9;
                oElementoDOR_6_9.Padre = "62X.Mill Ball";
                oElementoDOR_6_9.Nombre = "CEMENT BK -Prod";
                oElementoDOR_6_9.Origen = "62X.CEMENT BK";
                oElementoDOR_6_9.Unidad = "sT";
                oElementoDOR_6_9 = CalcularElementoDOR(oElementoDOR_6_9, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_9);

                // 6.10) 62X.CEMSI3
                ElementoDOR oElementoDOR_6_10 = new ElementoDOR();
                oElementoDOR_6_10.Orden = 10;
                oElementoDOR_6_10.Padre = "62X.Mill Roller";
                oElementoDOR_6_10.Nombre = "HOURS ROLLER PRESS";
                oElementoDOR_6_10.Origen = "62X.CEMSI3";
                oElementoDOR_6_10.Unidad = "Hrs.";
                oElementoDOR_6_10 = CalcularElementoDOR(oElementoDOR_6_10, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_10);

                // 6.11) 62X.CEMSI5
                ElementoDOR oElementoDOR_6_11 = new ElementoDOR();
                oElementoDOR_6_11.Orden = 11;
                oElementoDOR_6_11.Padre = "62X.Mill Ball";
                oElementoDOR_6_11.Nombre = "HOURS CEMENT GRINDING";
                oElementoDOR_6_11.Origen = "62X.CEMSI5";
                oElementoDOR_6_11.Unidad = "Hrs.";
                oElementoDOR_6_11 = CalcularElementoDOR(oElementoDOR_6_11, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_11);

                 // 6.12) 62X.TCLSI5 / 62X.CEMSI3
                ElementoDOR oElementoDOR_6_12 = new ElementoDOR();
                oElementoDOR_6_12.Orden = 12;
                oElementoDOR_6_12.Padre = "";
                oElementoDOR_6_12.Nombre = "PRODUCTION RATE-RP";
                oElementoDOR_6_12.Origen = "62X.TCLSI5 / 62X.CEMSI3";
                oElementoDOR_6_12.Unidad = "sT/Hrs.";

                oElementoDOR_6_12.ValorDia = "";
                if (!(oElementoDOR_6_8.ValorDia.Trim() == "" && oElementoDOR_6_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_6_12.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_6_12.ValorMes = "";
                if (!(oElementoDOR_6_8.ValorMes.Trim() == "" && oElementoDOR_6_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_6_12.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                 oElementoDOR_6_12.ValorAno = "";
                if (!(oElementoDOR_6_8.ValorAno.Trim() == "" && oElementoDOR_6_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_6_12.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_12);

                oBloquesDOR.Add(oBloqueDOR_6);

                //Funciones.CapturarMensaje("PASO 13");


                // 7.) BLOQUE RAW MILL USAGE %
                BloqueDOR oBloqueDOR_7 = new BloqueDOR();
                oBloqueDOR_7.Nombre = "RAW MILL USAGE %";
                oBloqueDOR_7.Orden = 3;
                oBloqueDOR_7.CssClass = "col-6";
                oBloqueDOR_7.EsUsagePorc = true;
                oBloqueDOR_7.Elementos = new List<ElementoDOR>();

                // 7.1) (LOW LIMESTONE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_1 = new ElementoDOR();
                oElementoDOR_7_1.Orden = 1;
                oElementoDOR_7_1.Padre = "";
                oElementoDOR_7_1.Nombre = "LOW LIMESTONE";
                oElementoDOR_7_1.Origen = "(LOW LIMESTONE / RAW MEAL) * 100";
                oElementoDOR_7_1.Unidad = "";

                oElementoDOR_7_1.ValorDia = "";
                if (!(oElementoDOR_2_1.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_1.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }                  
                }

                oElementoDOR_7_1.ValorMes = "";
                if (!(oElementoDOR_2_1.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_1.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }        
                }

                oElementoDOR_7_1.ValorAno = "";
                if (!(oElementoDOR_2_1.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_1.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_1);


                // 7.2) (ALUMINA / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_2 = new ElementoDOR();
                oElementoDOR_7_2.Orden = 2;
                oElementoDOR_7_2.Padre = "";
                oElementoDOR_7_2.Nombre = "ALUMINA";
                oElementoDOR_7_2.Origen = "(ALUMINA / RAW MEAL) * 100";
                oElementoDOR_7_2.Unidad = "";

                oElementoDOR_7_2.ValorDia = "";
                if (!(oElementoDOR_2_4.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_2.ValorMes = "";
                if (!(oElementoDOR_2_4.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_2.ValorAno = "";
                if (!(oElementoDOR_2_4.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_2);



                // 7.3) (BAUXITE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_3 = new ElementoDOR();
                oElementoDOR_7_3.Orden = 3;
                oElementoDOR_7_3.Padre = "";
                oElementoDOR_7_3.Nombre = "BAUXITE";
                oElementoDOR_7_3.Origen = "(BAUXITE / RAW MEAL) * 100";
                oElementoDOR_7_3.Unidad = "";

                oElementoDOR_7_3.ValorDia = "";
                if (!(oElementoDOR_2_5.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_5.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_3.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_3.ValorMes = "";
                if (!(oElementoDOR_2_5.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_5.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_3.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_3.ValorAno = "";
                if (!(oElementoDOR_2_5.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_5.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_3.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_3);


                // 7.4) (IRON ORE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_4 = new ElementoDOR();
                oElementoDOR_7_4.Orden = 4;
                oElementoDOR_7_4.Padre = "";
                oElementoDOR_7_4.Nombre = "IRON ORE";
                oElementoDOR_7_4.Origen = "(IRON ORE / RAW MEAL) * 100";
                oElementoDOR_7_4.Unidad = "";

                oElementoDOR_7_4.ValorDia = "";
                if (!(oElementoDOR_2_6.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_6.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_4.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_4.ValorMes = "";
                if (!(oElementoDOR_2_6.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_6.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_4.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_4.ValorAno = "";
                if (!(oElementoDOR_2_6.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_6.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_4.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_4);



                // 7.5) (HEMATITE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_5 = new ElementoDOR();
                oElementoDOR_7_5.Orden = 5;
                oElementoDOR_7_5.Padre = "";
                oElementoDOR_7_5.Nombre = "HEMATITE";
                oElementoDOR_7_5.Origen = "(HEMATITE / RAW MEAL) * 100";
                oElementoDOR_7_5.Unidad = "";

                oElementoDOR_7_5.ValorDia = "";
                if (!(oElementoDOR_2_7.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_7.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_5.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_5.ValorMes = "";
                if (!(oElementoDOR_2_7.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_7.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_5.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_5.ValorAno = "";
                if (!(oElementoDOR_2_7.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_7.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_5.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_5);



                // 7.6) (MILL SCALE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_6 = new ElementoDOR();
                oElementoDOR_7_6.Orden = 6;
                oElementoDOR_7_6.Padre = "";
                oElementoDOR_7_6.Nombre = "MILL SCALE";
                oElementoDOR_7_6.Origen = "(MILL SCALE / RAW MEAL) * 100";
                oElementoDOR_7_6.Unidad = "";

                oElementoDOR_7_6.ValorDia = "";
                if (!(oElementoDOR_2_8.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_8.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_6.ValorMes = "";
                if (!(oElementoDOR_2_8.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_8.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_6.ValorAno = "";
                if (!(oElementoDOR_2_8.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_8.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_6);


                
                    
                // 7.7) (HIGH LIMESTONE/ RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_7 = new ElementoDOR();
                oElementoDOR_7_7.Orden = 7;
                oElementoDOR_7_7.Padre = "";
                oElementoDOR_7_7.Nombre = "HIGH LIMESTONE";
                oElementoDOR_7_7.Origen = "(HIGH LIMESTONE / RAW MEAL) * 100";
                oElementoDOR_7_7.Unidad = "";

                oElementoDOR_7_7.ValorDia = "";
                if (!(oElementoDOR_2_2.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_7.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_7.ValorMes = "";
                if (!(oElementoDOR_2_2.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_7.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_7.ValorAno = "";
                if (!(oElementoDOR_2_2.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_7.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_7);



                // 7.8) (MIX LIMESTONE/ RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_8 = new ElementoDOR();
                oElementoDOR_7_8.Orden = 8;
                oElementoDOR_7_8.Padre = "";
                oElementoDOR_7_8.Nombre = "MIX LIMESTONE";
                oElementoDOR_7_8.Origen = "(MIX LIMESTONE / RAW MEAL) * 100";
                oElementoDOR_7_8.Unidad = "";

                oElementoDOR_7_8.ValorDia = "";
                if (!(oElementoDOR_2_3.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_8.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_8.ValorMes = "";
                if (!(oElementoDOR_2_3.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_8.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_8.ValorAno = "";
                if (!(oElementoDOR_2_3.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_8.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_8);



                // 7.9) (GYPSUM/ RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_9 = new ElementoDOR();
                oElementoDOR_7_9.Orden = 9;
                oElementoDOR_7_9.Padre = "";
                oElementoDOR_7_9.Nombre = "GYPSUM";
                oElementoDOR_7_9.Origen = "(GYPSUM / RAW MEAL) * 100";
                oElementoDOR_7_9.Unidad = "";

                oElementoDOR_7_9.ValorDia = "";
                if (!(oElementoDOR_2_9.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_9.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_9.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_9.ValorMes = "";
                if (!(oElementoDOR_2_9.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_9.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_9.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_9.ValorAno = "";
                if (!(oElementoDOR_2_9.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_9.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_9.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_9);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_7_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_2.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_3.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_3.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_4.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_4.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_5.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_5.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_6.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_6.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_7.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_7.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_8.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_8.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_9.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_9.ValorDia.Trim().Replace(",", ""));
                }


                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_2_1.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_1.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_2.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_3.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_3.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_4.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_4.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_5.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_5.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_6.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_6.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_7.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_7.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_8.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_8.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_9.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_9.ValorDia.Trim().Replace(",", ""));
                    }


                    if (sumaComponentes == (oElementoDOR_2_10.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_7.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 9).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;
                if (oElementoDOR_7_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_2.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_3.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_3.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_4.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_4.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_5.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_5.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_6.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_6.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_7.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_7.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_8.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_8.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_9.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_9.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != 100)
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_2_1.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_1.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_2.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_3.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_3.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_4.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_4.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_5.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_5.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_6.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_6.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_7.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_7.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_8.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_8.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_9.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_9.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_2_10.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_7.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 9).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - ano
                sumaPorcentajes = 0;
                if (oElementoDOR_7_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_2.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_3.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_3.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_4.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_4.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_5.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_5.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_6.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_6.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_7.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_7.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_8.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_8.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_9.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_9.ValorAno.Trim().Replace(",", ""));
                }


                if (sumaPorcentajes != 100)
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;
                    if (oElementoDOR_2_1.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_1.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_2.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_3.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_3.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_4.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_4.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_5.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_5.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_6.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_6.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_7.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_7.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_8.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_8.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_9.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_9.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_2_10.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_7.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 9).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }



                oBloquesDOR.Add(oBloqueDOR_7);

                //Funciones.CapturarMensaje("PASO 14");


                // 8.) COAL MILL USAGE %
                BloqueDOR oBloqueDOR_8 = new BloqueDOR();
                oBloqueDOR_8.Nombre = "COAL MILL USAGE %";
                oBloqueDOR_8.Orden = 5;
                oBloqueDOR_8.CssClass = "col-6";
                oBloqueDOR_8.EsUsagePorc = true;
                oBloqueDOR_8.Elementos = new List<ElementoDOR>();

               
                // 8.1) (COAL BULK / PULVERIZED FUEL) * 100
                ElementoDOR oElementoDOR_8_1 = new ElementoDOR();
                oElementoDOR_8_1.Orden = 1;
                oElementoDOR_8_1.Padre = "";
                oElementoDOR_8_1.Nombre = "COAL BULK";
                oElementoDOR_8_1.Origen = "(COAL BULK / PULVERIZED FUEL) * 100";
                oElementoDOR_8_1.Unidad = "";

                oElementoDOR_8_1.ValorDia = "";
                if (!(oElementoDOR_3_1.ValorDia.Trim() == "" && oElementoDOR_3_3.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_3_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_1.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_8_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_1.ValorMes = "";
                if (!(oElementoDOR_3_1.ValorMes.Trim() == "" && oElementoDOR_3_3.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_3_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_1.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_8_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_1.ValorAno = "";
                if (!(oElementoDOR_3_1.ValorAno.Trim() == "" && oElementoDOR_3_3.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_3_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_1.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_8_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_8.Elementos.Add(oElementoDOR_8_1);



                // 8.2) (PETCOKE BULK / PULVERIZED FUEL) * 100
                ElementoDOR oElementoDOR_8_2 = new ElementoDOR();
                oElementoDOR_8_2.Orden = 2;
                oElementoDOR_8_2.Padre = "";
                oElementoDOR_8_2.Nombre = "PETCOKE BULK";
                oElementoDOR_8_2.Origen = "(PETCOKE BULK / PULVERIZED FUEL) * 100";
                oElementoDOR_8_2.Unidad = "";

                oElementoDOR_8_2.ValorDia = "";
                if (!(oElementoDOR_3_2.ValorDia.Trim() == "" && oElementoDOR_3_3.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_3_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_8_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_2.ValorMes = "";
                if (!(oElementoDOR_3_2.ValorMes.Trim() == "" && oElementoDOR_3_3.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_3_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_8_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_2.ValorAno = "";
                if (!(oElementoDOR_3_2.ValorAno.Trim() == "" && oElementoDOR_3_3.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_3_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_8_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_8.Elementos.Add(oElementoDOR_8_2);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_8_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_8_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_2.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_3_1.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_1.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_3_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_2.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_3_3.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_8.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_8_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_8_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_2.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_3_1.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_1.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_3_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_2.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_3_3.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_8.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_8_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_8_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_2.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_3_1.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_1.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_3_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_2.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_3_3.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_8.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                oBloquesDOR.Add(oBloqueDOR_8);

                //Funciones.CapturarMensaje("PASO 15");


                // 9.) MATERIAL USAGE %
                BloqueDOR oBloqueDOR_9 = new BloqueDOR();
                oBloqueDOR_9.Nombre = "MATERIAL USAGE %";
                oBloqueDOR_9.Orden = 11;
                oBloqueDOR_9.CssClass = "col-6";
                oBloqueDOR_9.EsUsagePorc = true;
                oBloqueDOR_9.Elementos = new List<ElementoDOR>();

                
                // 9.1) (GYPSUM / CEMENT) * 100
                ElementoDOR oElementoDOR_9_1 = new ElementoDOR();
                oElementoDOR_9_1.Orden = 1;
                oElementoDOR_9_1.Padre = "";
                oElementoDOR_9_1.Nombre = "GYPSUM";
                oElementoDOR_9_1.Origen = "(GYPSUM / CEMENT) * 100";
                oElementoDOR_9_1.Unidad = "";

                oElementoDOR_9_1.ValorDia = "";
                if (!(oElementoDOR_6_3.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_1.ValorMes = "";
                if (!(oElementoDOR_6_3.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_1.ValorAno = "";
                if (!(oElementoDOR_6_3.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_1);



                // 9.2) (CLINKER PAULDEN / CEMENT) * 100
                ElementoDOR oElementoDOR_9_2 = new ElementoDOR();
                oElementoDOR_9_2.Orden = 2;
                oElementoDOR_9_2.Padre = "";
                oElementoDOR_9_2.Nombre = "CLINKER PAULDEN";
                oElementoDOR_9_2.Origen = "(CLINKER PAULDEN / CEMENT) * 100";
                oElementoDOR_9_2.Unidad = "";

                oElementoDOR_9_2.ValorDia = "";
                if (!(oElementoDOR_6_6.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_6.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_2.ValorMes = "";
                if (!(oElementoDOR_6_6.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_6.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_2.ValorAno = "";
                if (!(oElementoDOR_6_6.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_6.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_2);



                // 9.3) (CKD / CEMENT) * 100
                ElementoDOR oElementoDOR_9_3 = new ElementoDOR();
                oElementoDOR_9_3.Orden = 3;
                oElementoDOR_9_3.Padre = "";
                oElementoDOR_9_3.Nombre = "CKD";
                oElementoDOR_9_3.Origen = "(CKD / CEMENT) * 100";
                oElementoDOR_9_3.Unidad = "";

                oElementoDOR_9_3.ValorDia = "";
                if (!(oElementoDOR_6_4.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_3.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_3.ValorMes = "";
                if (!(oElementoDOR_6_4.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_3.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_3.ValorAno = "";
                if (!(oElementoDOR_6_4.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_3.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_3);



                // 9.4) (CLINKER BKR / CEMENT) * 100
                ElementoDOR oElementoDOR_9_4 = new ElementoDOR();
                oElementoDOR_9_4.Orden = 4;
                oElementoDOR_9_4.Padre = "";
                oElementoDOR_9_4.Nombre = "CLINKER BKR";
                oElementoDOR_9_4.Origen = "(CLINKER BKR / CEMENT) * 100";
                oElementoDOR_9_4.Unidad = "";

                oElementoDOR_9_4.ValorDia = "";
                if (!(oElementoDOR_6_5.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_5.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_4.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_4.ValorMes = "";
                if (!(oElementoDOR_6_5.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_5.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_4.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_4.ValorAno = "";
                if (!(oElementoDOR_6_5.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_5.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_4.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_4);



                // 9.5) (CLINKER / CEMENT) * 100
                ElementoDOR oElementoDOR_9_5 = new ElementoDOR();
                oElementoDOR_9_5.Orden = 5;
                oElementoDOR_9_5.Padre = "";
                oElementoDOR_9_5.Nombre = "CLINKER";
                oElementoDOR_9_5.Origen = "(CLINKER / CEMENT) * 100";
                oElementoDOR_9_5.Unidad = "";

                oElementoDOR_9_5.ValorDia = "";
                if (!(oElementoDOR_6_7.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_7.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_5.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_5.ValorMes = "";
                if (!(oElementoDOR_6_7.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_7.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_5.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_5.ValorAno = "";
                if (!(oElementoDOR_6_7.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_7.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_5.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_5);



                // 9.6) (HIGH LIMESTONE / CEMENT) * 100
                ElementoDOR oElementoDOR_9_6 = new ElementoDOR();
                oElementoDOR_9_6.Orden = 6;
                oElementoDOR_9_6.Padre = "";
                oElementoDOR_9_6.Nombre = "HIGH LIMESTONE";
                oElementoDOR_9_6.Origen = "(HIGH LIMESTONE / CEMENT) * 100";
                oElementoDOR_9_6.Unidad = "";

                oElementoDOR_9_6.ValorDia = "";
                if (!(oElementoDOR_6_2.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_6.ValorMes = "";
                if (!(oElementoDOR_6_2.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_6.ValorAno = "";
                if (!(oElementoDOR_6_2.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_6);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_9_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_2.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_3.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_3.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_4.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_4.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_5.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_5.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_6.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_6.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_6_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_2.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_3.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_3.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_4.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_4.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_5.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_5.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_6.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_6.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_7.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_7.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_6_8.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_9.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 6).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_9_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_2.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_3.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_3.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_4.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_4.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_5.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_5.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_6.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_6.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_6_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_2.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_3.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_3.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_4.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_4.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_5.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_5.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_6.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_6.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_7.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_7.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_6_8.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_9.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 6).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_9_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_2.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_3.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_3.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_4.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_4.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_5.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_5.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_6.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_6.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_6_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_2.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_3.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_3.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_4.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_4.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_5.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_5.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_6.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_6.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_7.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_7.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_6_8.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_9.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 6).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                oBloquesDOR.Add(oBloqueDOR_9);

                //Funciones.CapturarMensaje("PASO 16");


                // 10.) RATIOS
                BloqueDOR oBloqueDOR_10 = new BloqueDOR();
                oBloqueDOR_10.Nombre = "RATIOS";
                oBloqueDOR_10.Orden = 7;
                oBloqueDOR_10.CssClass = "col-12";
                oBloqueDOR_10.EsUsagePorc = false;
                oBloqueDOR_10.Elementos = new List<ElementoDOR>();

                
                // 10.1) (RAW FEED / CLINKER)
                ElementoDOR oElementoDOR_10_1 = new ElementoDOR();
                oElementoDOR_10_1.Orden = 1;
                oElementoDOR_10_1.Padre = "";
                oElementoDOR_10_1.Nombre = "RATIO 1";
                oElementoDOR_10_1.Origen = "(RAW FEED / CLINKER)";
                oElementoDOR_10_1.Unidad = "";

                oElementoDOR_10_1.ValorDia = "";
                if (!(oElementoDOR_4_3.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_4_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_10_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_1.ValorMes = "";
                if (!(oElementoDOR_4_3.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_4_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_10_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_1.ValorAno = "";
                if (!(oElementoDOR_4_3.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_4_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_10_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_10.Elementos.Add(oElementoDOR_10_1);



                // 10.2) (CLINKER / ACTUAL KILN FEED)
                ElementoDOR oElementoDOR_10_2 = new ElementoDOR();
                oElementoDOR_10_2.Orden = 2;
                oElementoDOR_10_2.Padre = "";
                oElementoDOR_10_2.Nombre = "RATIO 2";
                oElementoDOR_10_2.Origen = "(CLINKER / ACTUAL KILN FEED)";
                oElementoDOR_10_2.Unidad = "";

                oElementoDOR_10_2.ValorDia = "";
                if (!(oElementoDOR_4_4.ValorDia.Trim() == "" && oElementoDOR_4_2.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_10_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_2.ValorMes = "";
                if (!(oElementoDOR_4_4.ValorMes.Trim() == "" && oElementoDOR_4_2.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_10_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_2.ValorAno = "";
                if (!(oElementoDOR_4_4.ValorAno.Trim() == "" && oElementoDOR_4_2.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_10_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_10.Elementos.Add(oElementoDOR_10_2);

                oBloquesDOR.Add(oBloqueDOR_10);

                //Funciones.CapturarMensaje("PASO 17");


                // 11.) EQUIVALENCIES
                BloqueDOR oBloqueDOR_11 = new BloqueDOR();
                oBloqueDOR_11.Nombre = "EQUIVALENCIES";
                oBloqueDOR_11.Orden = 9;
                oBloqueDOR_11.CssClass = "col-12";
                oBloqueDOR_11.EsUsagePorc = false;
                oBloqueDOR_11.Elementos = new List<ElementoDOR>();


                // 11.1) MMBtu coal/coke
                ElementoDOR oElementoDOR_11_1 = new ElementoDOR();
                oElementoDOR_11_1.Orden = 1;
                oElementoDOR_11_1.Padre = "";
                oElementoDOR_11_1.Nombre = "EQUIVALENCE 1";
                oElementoDOR_11_1.Origen = "MMBtu coal/coke";

                oElementoDOR_11_1.Unidad = "BTU/LB";
                oElementoDOR_11_1.ValorDia = oElementoDOR_5_7.ValorDia;
                oElementoDOR_11_1.ValorMes = oElementoDOR_5_7.ValorMes;
                oElementoDOR_11_1.ValorAno = oElementoDOR_5_7.ValorAno;

                oElementoDOR_11_1.Unidad2 = "KILOCAL/KG";

                oElementoDOR_11_1.ValorDia2 = "";
                if (!(oElementoDOR_11_1.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_11_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_1.ValorDia.Trim().Replace(",", ""))) / 1.79998;
                    oElementoDOR_11_1.ValorDia2 = nValorDia.ToString("###,###,##0.00");
                }

                oElementoDOR_11_1.ValorMes2 = "";
                if (!(oElementoDOR_11_1.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_11_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_1.ValorMes.Trim().Replace(",", ""))) / 1.79998;
                    oElementoDOR_11_1.ValorMes2 = nValorMes.ToString("###,###,##0.00");
                }

                oElementoDOR_11_1.ValorAno2 = "";
                if (!(oElementoDOR_11_1.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_11_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_1.ValorAno.Trim().Replace(",", ""))) / 1.79998;
                    oElementoDOR_11_1.ValorAno2 = nValorAno.ToString("###,###,##0.00");
                }
                
                oBloqueDOR_11.Elementos.Add(oElementoDOR_11_1);



                // 11.2) MMBtu gas
                ElementoDOR oElementoDOR_11_2 = new ElementoDOR();
                oElementoDOR_11_2.Orden = 2;
                oElementoDOR_11_2.Padre = "";
                oElementoDOR_11_2.Nombre = "EQUIVALENCE 2";
                oElementoDOR_11_2.Origen = "MMBtu gas";

                oElementoDOR_11_2.Unidad = "BTU/CF";
                oElementoDOR_11_2.ValorDia = oElementoDOR_5_8.ValorDia;
                oElementoDOR_11_2.ValorMes = oElementoDOR_5_8.ValorMes;
                oElementoDOR_11_2.ValorAno = oElementoDOR_5_8.ValorAno;

                oElementoDOR_11_2.Unidad2 = "KILOCAL/M3";

                oElementoDOR_11_2.ValorDia2 = "";
                if (!(oElementoDOR_11_2.ValorDia.Trim() == ""))
                {
                    double nValorDia = ((oElementoDOR_11_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_2.ValorDia.Trim().Replace(",", ""))) / 3.96825) / 0.02832;
                    oElementoDOR_11_2.ValorDia2 = nValorDia.ToString("###,###,##0.00");
                }

                oElementoDOR_11_2.ValorMes2 = "";
                if (!(oElementoDOR_11_2.ValorMes.Trim() == ""))
                {
                    double nValorMes = ((oElementoDOR_11_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_2.ValorMes.Trim().Replace(",", ""))) / 3.96825) / 0.02832;
                    oElementoDOR_11_2.ValorMes2 = nValorMes.ToString("###,###,##0.00");
                }

                oElementoDOR_11_2.ValorAno2 = "";
                if (!(oElementoDOR_11_2.ValorAno.Trim() == ""))
                {
                    double nValorAno = ((oElementoDOR_11_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_2.ValorAno.Trim().Replace(",", ""))) / 3.96825) / 0.02832;
                    oElementoDOR_11_2.ValorAno2 = nValorAno.ToString("###,###,##0.00");
                }
                
                oBloqueDOR_11.Elementos.Add(oElementoDOR_11_2);


                oBloquesDOR.Add(oBloqueDOR_11);


                //Funciones.CapturarMensaje("PASO 18");


                // 17.) DISPATCH
                BloqueDOR oBloqueDOR_17 = new BloqueDOR();
                oBloqueDOR_17.Nombre = "DISPATCH";
                oBloqueDOR_17.Orden = 12;
                oBloqueDOR_17.CssClass = "col-12";
                oBloqueDOR_17.EsUsagePorc = false;
                oBloqueDOR_17.Elementos = new List<ElementoDOR>();


                // 17.1) CLINKER
                ElementoDOR oElementoDOR_17_1 = new ElementoDOR();
                oElementoDOR_17_1.Orden = 1;
                oElementoDOR_17_1.Padre = "";
                oElementoDOR_17_1.Nombre = "CLINKER";
                oElementoDOR_17_1.Origen = "";

                oElementoDOR_17_1.Unidad = "sT";
                oElementoDOR_17_1.ValorDia = "";
                oElementoDOR_17_1.ValorMes = "";
                oElementoDOR_17_1.ValorAno = "";

                oBloqueDOR_17.Elementos.Add(oElementoDOR_17_1);


                // 17.2) CEMENT dispatch by truck
                ElementoDOR oElementoDOR_17_2 = new ElementoDOR();
                oElementoDOR_17_2.Orden = 2;
                oElementoDOR_17_2.Padre = "";
                oElementoDOR_17_2.Nombre = "CEMENT dispatch by truck";
                oElementoDOR_17_2.Origen = "";
                oElementoDOR_17_2.Unidad = "sT";

                string cTag_17_2_Dia = WebConfigurationManager.AppSettings["Tag_Drake_Dispatch"];
                string cValor_17_2_Dia = "";
                AFValue oAFValor_17_2_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_17_2_Dia, ldt_Date);
                if (oAFValor_17_2_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_17_2_Dia.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_17_2_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_17_2_Dia.Value.GetType().BaseType.Name == "Exception")
                {
                    cValor_17_2_Dia = "";
                }
                else
                {
                    cValor_17_2_Dia = oAFValor_17_2_Dia.ValueAsDouble().ToString("###,###,##0.00");
                }

                string cTag_17_2_Mes = WebConfigurationManager.AppSettings["Tag_Drake_Dispatch_MTD"];
                string cValor_17_2_Mes = "";
                //DateTime ldt_Date_Mes = new DateTime(ldt_Date.Year, ldt_Date.Month, 1);
                AFValue oAFValor_17_2_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_17_2_Mes, ldt_Date);
                if (oAFValor_17_2_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_17_2_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_17_2_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_17_2_Mes.Value.GetType().BaseType.Name == "Exception")
                {
                    cValor_17_2_Mes = "";
                }
                else
                {
                    cValor_17_2_Mes = oAFValor_17_2_Mes.ValueAsDouble().ToString("###,###,##0.00");
                }

                string cTag_17_2_Ano = WebConfigurationManager.AppSettings["Tag_Drake_Dispatch_YTD"];
                string cValor_17_2_Ano = "";
                //DateTime ldt_Date_Ano = new DateTime(ldt_Date.Year, 1, 1);
                AFValue oAFValor_17_2_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_17_2_Ano, ldt_Date);
                if (oAFValor_17_2_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_17_2_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_17_2_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_17_2_Ano.Value.GetType().BaseType.Name == "Exception")
                {
                    cValor_17_2_Ano = "";
                }
                else
                {
                    cValor_17_2_Ano = oAFValor_17_2_Ano.ValueAsDouble().ToString("###,###,##0.00");
                }

                oElementoDOR_17_2.ValorDia = cValor_17_2_Dia;
                oElementoDOR_17_2.ValorMes = cValor_17_2_Mes;
                oElementoDOR_17_2.ValorAno = cValor_17_2_Ano;

                oBloqueDOR_17.Elementos.Add(oElementoDOR_17_2);


                // 17.3) CEMENT dispatch by train
                ElementoDOR oElementoDOR_17_3 = new ElementoDOR();
                oElementoDOR_17_3.Orden = 3;
                oElementoDOR_17_3.Padre = "";
                oElementoDOR_17_3.Nombre = "CEMENT dispatch by train";
                oElementoDOR_17_3.Origen = "";

                oElementoDOR_17_3.Unidad = "sT";
                oElementoDOR_17_3.ValorDia = "";
                oElementoDOR_17_3.ValorMes = "";
                oElementoDOR_17_3.ValorAno = "";

                oBloqueDOR_17.Elementos.Add(oElementoDOR_17_3);


                // 17.4) CEMENT BRKD
                ElementoDOR oElementoDOR_17_4 = new ElementoDOR();
                oElementoDOR_17_4.Orden = 4;
                oElementoDOR_17_4.Padre = "";
                oElementoDOR_17_4.Nombre = "CEMENT BRKD";
                oElementoDOR_17_4.Origen = "";

                oElementoDOR_17_4.Unidad = "sT";
                oElementoDOR_17_4.ValorDia = "";
                oElementoDOR_17_4.ValorMes = "";
                oElementoDOR_17_4.ValorAno = "";

                oBloqueDOR_17.Elementos.Add(oElementoDOR_17_4);


                oBloquesDOR.Add(oBloqueDOR_17);

                //Funciones.CapturarMensaje("PASO 19");


                // 18.) STOCK REPORT

                //obtenemos elementos de AF de template
                string cDatabaseCalculatedTags = WebConfigurationManager.AppSettings["databaseCalculatedTags"];
                List<AFElement> oAFElementosStock = ObtenerAFElementosDeTemplate(cDatabaseCalculatedTags, "Stocks Template");

                //definimos bloque
                BloqueDOR oBloqueDOR_18 = new BloqueDOR();
                oBloqueDOR_18.Nombre = "STOCK REPORT";
                oBloqueDOR_18.Orden = 13;
                oBloqueDOR_18.CssClass = "col-12";
                oBloqueDOR_18.EsUsagePorc = false;
                oBloqueDOR_18.Elementos = new List<ElementoDOR>();


                // 18.1) High Limestone stock pile"
                ElementoDOR oElementoDOR_18_1 = new ElementoDOR();
                oElementoDOR_18_1.Orden = 1;
                oElementoDOR_18_1.Padre = "";
                oElementoDOR_18_1.Nombre = "High Limestone stock pile";
                oElementoDOR_18_1.Origen = "";
                oElementoDOR_18_1.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_1.ValorDia3 = "";
                oElementoDOR_18_1.ValorMes3 = "";

                double nValorOpening_18_1_Dia = 0;
                double nValorOpening_18_1_Mes = 0;
                AFElement oAFElemento_18_1 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_1.Nombre.ToLower());
                string cTag_18_1 = "";
                if (oAFElemento_18_1 != null)
                {
                    try
                    {
                        cTag_18_1 = oAFElemento_18_1.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_1, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_1.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_1.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_1_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_1, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_1.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_1.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_1_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }



                //2. Production
                oElementoDOR_18_1.ValorDia = "";
                oElementoDOR_18_1.ValorMes = "";
                oElementoDOR_18_1.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_1_Dia = 0;
                double nValorProduction_18_1_Mes = 0;
                double nValorProduction_18_1_Ano = 0;
                BloqueDOR oBloqueCRUSHERHighLimestone = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CRUSHER HighLimestone");
                if (oBloqueCRUSHERHighLimestone != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCRUSHERHighLimestone.Elementos.FirstOrDefault(x => x.Nombre == "TOTAL HIGH LIMESTONE CRUSHED");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorProduction_18_1_Dia))
                        {
                            oElementoDOR_18_1.ValorDia = nValorProduction_18_1_Dia.ToString("###,###,##0.00");
                        }
                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorProduction_18_1_Mes))
                        {
                            oElementoDOR_18_1.ValorMes = nValorProduction_18_1_Mes.ToString("###,###,##0.00");
                        }
                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorProduction_18_1_Ano))
                        {
                            oElementoDOR_18_1.ValorAno = nValorProduction_18_1_Ano.ToString("###,###,##0.00");
                        }
                    }
                }

                //3. Consumption
                oElementoDOR_18_1.ValorDia2 = "";
                oElementoDOR_18_1.ValorMes2 = "";
                oElementoDOR_18_1.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_1_Dia = 0;
                double nValorConsumption1_18_1_Dia = 0;
                double nValorConsumption2_18_1_Dia = 0;
                double nValorConsumption_18_1_Mes = 0;
                double nValorConsumption1_18_1_Mes = 0;
                double nValorConsumption2_18_1_Mes = 0;
                double nValorConsumption_18_1_Ano = 0;
                double nValorConsumption1_18_1_Ano = 0;
                double nValorConsumption2_18_1_Ano = 0;
                BloqueDOR oBloqueRAWMILL = oBloquesDOR.FirstOrDefault(x => x.Nombre == "RAW MILL");
                if (oBloqueRAWMILL != null)
                {
                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "HIGH LIMESTONE");
                    if (oElementoDOR != null)
                    {
                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption1_18_1_Dia);
                        Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption1_18_1_Mes);
                        Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption1_18_1_Ano);
                    }
                }
                BloqueDOR oBloqueCEMENTGRINDING = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                if (oBloqueCEMENTGRINDING != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "HIGH LIMESTONE");
                    if (oElementoDOR != null)
                    {
                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption2_18_1_Dia);
                        Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption2_18_1_Mes);
                        Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption2_18_1_Ano);
                    }
                }
                nValorConsumption_18_1_Dia = nValorConsumption1_18_1_Dia + nValorConsumption2_18_1_Dia;
                nValorConsumption_18_1_Mes = nValorConsumption1_18_1_Mes + nValorConsumption2_18_1_Mes;
                nValorConsumption_18_1_Ano = nValorConsumption1_18_1_Ano + nValorConsumption2_18_1_Ano;

                oElementoDOR_18_1.ValorDia2 = nValorConsumption_18_1_Dia.ToString("###,###,##0.00");
                oElementoDOR_18_1.ValorMes2 = nValorConsumption_18_1_Mes.ToString("###,###,##0.00");
                oElementoDOR_18_1.ValorAno2 = nValorConsumption_18_1_Ano.ToString("###,###,##0.00");


                //4. Closing
                oElementoDOR_18_1.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_1_Dia = 0;
                nValorClosing_18_1_Dia = nValorOpening_18_1_Dia + nValorProduction_18_1_Dia - nValorConsumption_18_1_Dia;
                oElementoDOR_18_1.ValorDia4 = nValorClosing_18_1_Dia.ToString("###,###,##0.00");


                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_1);



                // 18.2) Low Limestone Stock pile
                ElementoDOR oElementoDOR_18_2 = new ElementoDOR();
                oElementoDOR_18_2.Orden = 2;
                oElementoDOR_18_2.Padre = "";
                oElementoDOR_18_2.Nombre = "Low Limestone Stock pile";
                oElementoDOR_18_2.Origen = "";
                oElementoDOR_18_2.Unidad = "sT";


                //1. Opening	
                oElementoDOR_18_2.ValorDia3 = "";
                oElementoDOR_18_2.ValorMes3 = "";

                double nValorOpening_18_2_Dia = 0;
                double nValorOpening_18_2_Mes = 0;
                AFElement oAFElemento_18_2 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_2.Nombre.ToLower());
                string cTag_18_2 = "";
                if (oAFElemento_18_2 != null)
                {
                    try
                    {
                        cTag_18_2 = oAFElemento_18_2.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_2, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_2.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_2.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_2_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_2, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_2.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_2.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_2_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_2.ValorDia = "";
                oElementoDOR_18_2.ValorMes = "";
                oElementoDOR_18_2.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_2_Dia = 0;
                double nValorProduction_18_2_Mes = 0;
                double nValorProduction_18_2_Ano = 0;

                BloqueDOR oBloqueCRUSHERLowLimestone = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CRUSHER LowLimestone");
                if (oBloqueCRUSHERLowLimestone != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCRUSHERLowLimestone.Elementos.FirstOrDefault(x => x.Nombre == "TOTAL LOW LIMESTONE CRUSHED");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorProduction_18_2_Dia))
                        {
                            oElementoDOR_18_2.ValorDia = nValorProduction_18_2_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorProduction_18_2_Mes))
                        {
                            oElementoDOR_18_2.ValorMes = nValorProduction_18_2_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorProduction_18_2_Ano))
                        {
                            oElementoDOR_18_2.ValorAno = nValorProduction_18_2_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //3. Consumption
                oElementoDOR_18_2.ValorDia2 = "";
                oElementoDOR_18_2.ValorMes2 = "";
                oElementoDOR_18_2.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_2_Dia = 0;
                double nValorConsumption_18_2_Mes = 0;
                double nValorConsumption_18_2_Ano = 0;
                BloqueDOR oBloqueRAWMILL2 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "RAW MILL");
                if (oBloqueRAWMILL2 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueRAWMILL2.Elementos.FirstOrDefault(x => x.Nombre == "LOW LIMESTONE");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_2_Dia))
                        {
                            oElementoDOR_18_2.ValorDia2 = nValorConsumption_18_2_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_2_Mes))
                        {
                            oElementoDOR_18_2.ValorMes2 = nValorConsumption_18_2_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_2_Ano))
                        {
                            oElementoDOR_18_2.ValorAno2 = nValorConsumption_18_2_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //4. Closing
                oElementoDOR_18_2.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_2_Dia = 0;
                nValorClosing_18_2_Dia = nValorOpening_18_2_Dia + nValorProduction_18_2_Dia - nValorConsumption_18_2_Dia;
                oElementoDOR_18_2.ValorDia4 = nValorClosing_18_2_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_2);



                // 18.3) Mix Limestone Stock Pile
                ElementoDOR oElementoDOR_18_3 = new ElementoDOR();
                oElementoDOR_18_3.Orden = 3;
                oElementoDOR_18_3.Padre = "";
                oElementoDOR_18_3.Nombre = "Mix Limestone Stock Pile";
                oElementoDOR_18_3.Origen = "";
                oElementoDOR_18_3.Unidad = "sT";


                //1. Opening	
                oElementoDOR_18_3.ValorDia3 = "";
                oElementoDOR_18_3.ValorMes3 = "";

                double nValorOpening_18_3_Dia = 0;
                double nValorOpening_18_3_Mes = 0;
                AFElement oAFElemento_18_3 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_3.Nombre.ToLower());
                string cTag_18_3 = "";
                if (oAFElemento_18_3 != null)
                {
                    try
                    {
                        cTag_18_3 = oAFElemento_18_3.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_3, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_3.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_3.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_3_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_3, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_3.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_3.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_3_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_3.ValorDia = "";
                oElementoDOR_18_3.ValorMes = "";
                oElementoDOR_18_3.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_3_Dia = 0;
                double nValorProduction_18_3_Mes = 0;
                double nValorProduction_18_3_Ano = 0;

                BloqueDOR oBloqueCRUSHERMixLime = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CRUSHER MixLime");
                if (oBloqueCRUSHERMixLime != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCRUSHERMixLime.Elementos.FirstOrDefault(x => x.Nombre == "TOTAL MIX LIMESTONE CRUSHED");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorProduction_18_3_Dia))
                        {
                            oElementoDOR_18_3.ValorDia = nValorProduction_18_3_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorProduction_18_3_Mes))
                        {
                            oElementoDOR_18_3.ValorMes = nValorProduction_18_3_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorProduction_18_3_Ano))
                        {
                            oElementoDOR_18_3.ValorAno = nValorProduction_18_3_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //3. Consumption
                oElementoDOR_18_3.ValorDia2 = "";
                oElementoDOR_18_3.ValorMes2 = "";
                oElementoDOR_18_3.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_3_Dia = 0;
                double nValorConsumption_18_3_Mes = 0;
                double nValorConsumption_18_3_Ano = 0;
                BloqueDOR oBloqueRAWMILL3 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "RAW MILL");
                if (oBloqueRAWMILL3 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueRAWMILL3.Elementos.FirstOrDefault(x => x.Nombre == "MIX LIMESTONE");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_3_Dia))
                        {
                            oElementoDOR_18_3.ValorDia2 = nValorConsumption_18_3_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_3_Mes))
                        {
                            oElementoDOR_18_3.ValorMes2 = nValorConsumption_18_3_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_3_Ano))
                        {
                            oElementoDOR_18_3.ValorAno2 = nValorConsumption_18_3_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //4. Closing
                oElementoDOR_18_3.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_3_Dia = 0;
                nValorClosing_18_3_Dia = nValorOpening_18_3_Dia + nValorProduction_18_3_Dia - nValorConsumption_18_3_Dia;
                oElementoDOR_18_3.ValorDia4 = nValorClosing_18_3_Dia.ToString("###,###,##0.00");


                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_3);



                // 18.4) Hematite Stock pile
                ElementoDOR oElementoDOR_18_4 = new ElementoDOR();
                oElementoDOR_18_4.Orden = 4;
                oElementoDOR_18_4.Padre = "";
                oElementoDOR_18_4.Nombre = "Hematite Stock pile";
                oElementoDOR_18_4.Origen = "";
                oElementoDOR_18_4.Unidad = "sT";

                oElementoDOR_18_4.ValorDia3 = "";
                oElementoDOR_18_4.ValorMes3 = "";

                oElementoDOR_18_4.ValorDia = "";
                oElementoDOR_18_4.ValorMes = "";
                oElementoDOR_18_4.ValorAno = "";

                oElementoDOR_18_4.ValorDia2 = "";
                oElementoDOR_18_4.ValorMes2 = "";
                oElementoDOR_18_4.ValorAno2 = "";

                oElementoDOR_18_4.ValorDia4 = "";
                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_4);



                // 18.5) Iron Ore Stock Piles
                ElementoDOR oElementoDOR_18_5 = new ElementoDOR();
                oElementoDOR_18_5.Orden = 5;
                oElementoDOR_18_5.Padre = "";
                oElementoDOR_18_5.Nombre = "Iron Ore Stock Piles";
                oElementoDOR_18_5.Origen = "";
                oElementoDOR_18_5.Unidad = "sT";
        
                //1. Opening	
                oElementoDOR_18_5.ValorDia3 = "";
                oElementoDOR_18_5.ValorMes3 = "";

                double nValorOpening_18_5_Dia = 0;
                double nValorOpening_18_5_Mes = 0;
                AFElement oAFElemento_18_5 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_5.Nombre.ToLower());
                string cTag_18_5 = "";
                if (oAFElemento_18_5 != null)
                {
                    try
                    {
                        cTag_18_5 = oAFElemento_18_5.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_5, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_5.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_5.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_5_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_5, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_5.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_5.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_5_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_5.ValorDia = "";
                oElementoDOR_18_5.ValorMes = "";
                oElementoDOR_18_5.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_5_Dia = 0;
                double nValorProduction_18_5_Mes = 0;
                double nValorProduction_18_5_Ano = 0;

                AFValue oAFValorProduction_18_5_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001151.In.Value", ldt_Date);
                if (oAFValorProduction_18_5_Dia != null)
                {
                    if (!(oAFValorProduction_18_5_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_5_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_5_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_5_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_5_Dia.Value.ToString(), out nValorProduction_18_5_Dia))
                        {
                            oElementoDOR_18_5.ValorDia = nValorProduction_18_5_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_5_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001151.In.Value.MTD", ldt_Date);
                if (oAFValorProduction_18_5_Mes != null)
                {
                    if (!(oAFValorProduction_18_5_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_5_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_5_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_5_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_5_Mes.Value.ToString(), out nValorProduction_18_5_Mes))
                        {
                            oElementoDOR_18_5.ValorMes = nValorProduction_18_5_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_5_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001151.In.Value.YTD", ldt_Date);
                if (oAFValorProduction_18_5_Ano != null)
                {
                    if (!(oAFValorProduction_18_5_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_5_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_5_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_5_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_5_Ano.Value.ToString(), out nValorProduction_18_5_Ano))
                        {
                            oElementoDOR_18_5.ValorAno = nValorProduction_18_5_Ano.ToString("###,###,##0.00");
                        }
                    }
                }




                //3. Consumption
                oElementoDOR_18_5.ValorDia2 = "";
                oElementoDOR_18_5.ValorMes2 = "";
                oElementoDOR_18_5.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_5_Dia = 0;
                double nValorConsumption_18_5_Mes = 0;
                double nValorConsumption_18_5_Ano = 0;
                BloqueDOR oBloqueRAWMILL4 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "RAW MILL");
                if (oBloqueRAWMILL4 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueRAWMILL4.Elementos.FirstOrDefault(x => x.Nombre == "IRON ORE");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_5_Dia))
                        {
                            oElementoDOR_18_5.ValorDia2 = nValorConsumption_18_5_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_5_Mes))
                        {
                            oElementoDOR_18_5.ValorMes2 = nValorConsumption_18_5_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_5_Ano))
                        {
                            oElementoDOR_18_5.ValorAno2 = nValorConsumption_18_5_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //4. Closing
                oElementoDOR_18_5.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_5_Dia = 0;
                nValorClosing_18_5_Dia = nValorOpening_18_5_Dia + nValorProduction_18_5_Dia - nValorConsumption_18_5_Dia;
                oElementoDOR_18_5.ValorDia4 = nValorClosing_18_5_Dia.ToString("###,###,##0.00");

                
                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_5);



                // 18.6) Mill Scale Stock Pile
                ElementoDOR oElementoDOR_18_6 = new ElementoDOR();
                oElementoDOR_18_6.Orden = 6;
                oElementoDOR_18_6.Padre = "";
                oElementoDOR_18_6.Nombre = "Mill Scale Stock Pile";
                oElementoDOR_18_6.Origen = "";
                oElementoDOR_18_6.Unidad = "sT";

         
                //1. Opening	
                oElementoDOR_18_6.ValorDia3 = "";
                oElementoDOR_18_6.ValorMes3 = "";

                double nValorOpening_18_6_Dia = 0;
                double nValorOpening_18_6_Mes = 0;
                AFElement oAFElemento_18_6 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_6.Nombre.ToLower());
                string cTag_18_6 = "";
                if (oAFElemento_18_6 != null)
                {
                    try
                    {
                        cTag_18_6 = oAFElemento_18_6.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_6, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_6.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_6.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_6_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_6, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_6.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_6.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_6_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_6.ValorDia = "";
                oElementoDOR_18_6.ValorMes = "";
                oElementoDOR_18_6.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_6_Dia = 0;
                double nValorProduction_18_6_Mes = 0;
                double nValorProduction_18_6_Ano = 0;

                AFValue oAFValorProduction_18_6_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001502.In.Value", ldt_Date);
                if (oAFValorProduction_18_6_Dia != null)
                {
                    if (!(oAFValorProduction_18_6_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_6_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_6_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_6_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_6_Dia.Value.ToString(), out nValorProduction_18_6_Dia))
                        {
                            oElementoDOR_18_6.ValorDia = nValorProduction_18_6_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_6_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001502.In.Value.MTD", ldt_Date);
                if (oAFValorProduction_18_6_Mes != null)
                {
                    if (!(oAFValorProduction_18_6_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_6_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_6_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_6_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_6_Mes.Value.ToString(), out nValorProduction_18_6_Mes))
                        {
                            oElementoDOR_18_6.ValorMes = nValorProduction_18_6_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_6_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001502.In.Value.YTD", ldt_Date);
                if (oAFValorProduction_18_6_Ano != null)
                {
                    if (!(oAFValorProduction_18_6_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_6_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_6_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_6_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_6_Ano.Value.ToString(), out nValorProduction_18_6_Ano))
                        {
                            oElementoDOR_18_6.ValorAno = nValorProduction_18_6_Ano.ToString("###,###,##0.00");
                        }
                    }
                }



                //3. Consumption
                oElementoDOR_18_6.ValorDia2 = "";
                oElementoDOR_18_6.ValorMes2 = "";
                oElementoDOR_18_6.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_6_Dia = 0;
                double nValorConsumption_18_6_Mes = 0;
                double nValorConsumption_18_6_Ano = 0;
                BloqueDOR oBloqueRAWMILL_18_6 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "RAW MILL");
                if (oBloqueRAWMILL_18_6 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueRAWMILL_18_6.Elementos.FirstOrDefault(x => x.Nombre == "MILL SCALE");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_6_Dia))
                        {
                            oElementoDOR_18_6.ValorDia2 = nValorConsumption_18_6_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_6_Mes))
                        {
                            oElementoDOR_18_6.ValorMes2 = nValorConsumption_18_6_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_6_Ano))
                        {
                            oElementoDOR_18_6.ValorAno2 = nValorConsumption_18_6_Ano.ToString("###,###,##0.00");
                        }
                    }
                }



                //4. Closing
                oElementoDOR_18_6.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_6_Dia = 0;
                nValorClosing_18_6_Dia = nValorOpening_18_6_Dia + nValorProduction_18_6_Dia - nValorConsumption_18_6_Dia;
                oElementoDOR_18_6.ValorDia4 = nValorClosing_18_6_Dia.ToString("###,###,##0.00");


                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_6);
                




                // 18.7) Bottom Ash Stock Pile
                ElementoDOR oElementoDOR_18_7 = new ElementoDOR();
                oElementoDOR_18_7.Orden = 7;
                oElementoDOR_18_7.Padre = "";
                oElementoDOR_18_7.Nombre = "Bottom Ash Stock Pile";
                oElementoDOR_18_7.Origen = "";
                oElementoDOR_18_7.Unidad = "sT";

                oElementoDOR_18_7.ValorDia3 = "";
                oElementoDOR_18_7.ValorMes3 = "";

                oElementoDOR_18_7.ValorDia = "";
                oElementoDOR_18_7.ValorMes = "";
                oElementoDOR_18_7.ValorAno = "";

                oElementoDOR_18_7.ValorDia2 = "";
                oElementoDOR_18_7.ValorMes2 = "";
                oElementoDOR_18_7.ValorAno2 = "";

                oElementoDOR_18_7.ValorDia4 = "";
                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_7);


                // 18.8) Alumina Stock Pile
                ElementoDOR oElementoDOR_18_8 = new ElementoDOR();
                oElementoDOR_18_8.Orden = 8;
                oElementoDOR_18_8.Padre = "";
                oElementoDOR_18_8.Nombre = "Alumina Stock Pile";
                oElementoDOR_18_8.Origen = "";
                oElementoDOR_18_8.Unidad = "sT";


                //1. Opening	
                oElementoDOR_18_8.ValorDia3 = "";
                oElementoDOR_18_8.ValorMes3 = "";

                double nValorOpening_18_8_Dia = 0;
                double nValorOpening_18_8_Mes = 0;
                AFElement oAFElemento_18_8 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_8.Nombre.ToLower());
                string cTag_18_8 = "";
                if (oAFElemento_18_8 != null)
                {
                    try
                    {
                        cTag_18_8 = oAFElemento_18_8.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_8, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_8.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_8.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_8_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_8, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_8.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_8.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_8_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_8.ValorDia = "";
                oElementoDOR_18_8.ValorMes = "";
                oElementoDOR_18_8.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_8_Dia = 0;
                double nValorProduction_18_8_Mes = 0;
                double nValorProduction_18_8_Ano = 0;


                //3. Consumption
                oElementoDOR_18_8.ValorDia2 = "";
                oElementoDOR_18_8.ValorMes2 = "";
                oElementoDOR_18_8.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_8_Dia = 0;
                double nValorConsumption_18_8_Mes = 0;
                double nValorConsumption_18_8_Ano = 0;
                BloqueDOR oBloqueRAWMILLAlumina = oBloquesDOR.FirstOrDefault(x => x.Nombre == "RAW MILL");
                if (oBloqueRAWMILLAlumina != null)
                {
                    ElementoDOR oElementoDOR = oBloqueRAWMILLAlumina.Elementos.FirstOrDefault(x => x.Nombre == "ALUMINA");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_8_Dia))
                        {
                            oElementoDOR_18_8.ValorDia2 = nValorConsumption_18_8_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_8_Mes))
                        {
                            oElementoDOR_18_8.ValorMes2 = nValorConsumption_18_8_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_8_Ano))
                        {
                            oElementoDOR_18_8.ValorAno2 = nValorConsumption_18_8_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //4. Closing
                oElementoDOR_18_8.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_8_Dia = 0;
                nValorClosing_18_8_Dia = nValorOpening_18_8_Dia + nValorProduction_18_8_Dia - nValorConsumption_18_8_Dia;
                oElementoDOR_18_8.ValorDia4 = nValorClosing_18_8_Dia.ToString("###,###,##0.00");


                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_8);



                // 18.9) Bauxite Stock Pile
                ElementoDOR oElementoDOR_18_9 = new ElementoDOR();
                oElementoDOR_18_9.Orden = 9;
                oElementoDOR_18_9.Padre = "";
                oElementoDOR_18_9.Nombre = "Bauxite Stock Pile";
                oElementoDOR_18_9.Origen = "";
                oElementoDOR_18_9.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_9.ValorDia3 = "";
                oElementoDOR_18_9.ValorMes3 = "";

                double nValorOpening_18_9_Dia = 0;
                double nValorOpening_18_9_Mes = 0;
                AFElement oAFElemento_18_9 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_9.Nombre.ToLower());
                string cTag_18_9 = "";
                if (oAFElemento_18_9 != null)
                {
                    try
                    {
                        cTag_18_9 = oAFElemento_18_9.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_9, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_9.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_9.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_9_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_9, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_9.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_9.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_9_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_9.ValorDia = "";
                oElementoDOR_18_9.ValorMes = "";
                oElementoDOR_18_9.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_9_Dia = 0;
                double nValorProduction_18_9_Mes = 0;
                double nValorProduction_18_9_Ano = 0;

                AFValue oAFValorProduction_18_9_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001066.In.Value", ldt_Date);
                if (oAFValorProduction_18_9_Dia != null)
                {
                    if (!(oAFValorProduction_18_9_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_9_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_9_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_9_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_9_Dia.Value.ToString(), out nValorProduction_18_9_Dia))
                        {
                            oElementoDOR_18_9.ValorDia = nValorProduction_18_9_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_9_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001066.In.Value.MTD", ldt_Date);
                if (oAFValorProduction_18_9_Mes != null)
                {
                    if (!(oAFValorProduction_18_9_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_9_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_9_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_9_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_9_Mes.Value.ToString(), out nValorProduction_18_9_Mes))
                        {
                            oElementoDOR_18_9.ValorMes = nValorProduction_18_9_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_9_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001066.In.Value.YTD", ldt_Date);
                if (oAFValorProduction_18_9_Ano != null)
                {
                    if (!(oAFValorProduction_18_9_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_9_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_9_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_9_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_9_Ano.Value.ToString(), out nValorProduction_18_9_Ano))
                        {
                            oElementoDOR_18_9.ValorAno = nValorProduction_18_9_Ano.ToString("###,###,##0.00");
                        }
                    }
                }




                //3. Consumption
                oElementoDOR_18_9.ValorDia2 = "";
                oElementoDOR_18_9.ValorMes2 = "";
                oElementoDOR_18_9.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_9_Dia = 0;
                double nValorConsumption_18_9_Mes = 0;
                double nValorConsumption_18_9_Ano = 0;
                BloqueDOR oBloqueRAWMILL5 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "RAW MILL");
                if (oBloqueRAWMILL5 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueRAWMILL5.Elementos.FirstOrDefault(x => x.Nombre == "BAUXITE");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_9_Dia))
                        {
                            oElementoDOR_18_9.ValorDia2 = nValorConsumption_18_9_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_9_Mes))
                        {
                            oElementoDOR_18_9.ValorMes2 = nValorConsumption_18_9_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_9_Ano))
                        {
                            oElementoDOR_18_9.ValorAno2 = nValorConsumption_18_9_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //4. Closing
                oElementoDOR_18_9.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_9_Dia = 0;
                nValorClosing_18_9_Dia = nValorOpening_18_9_Dia + nValorProduction_18_9_Dia - nValorConsumption_18_9_Dia;
                oElementoDOR_18_9.ValorDia4 = nValorClosing_18_9_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_9);



                // 18.10) Coal Stock pile
                ElementoDOR oElementoDOR_18_10 = new ElementoDOR();
                oElementoDOR_18_10.Orden = 10;
                oElementoDOR_18_10.Padre = "";
                oElementoDOR_18_10.Nombre = "Coal Stock pile";
                oElementoDOR_18_10.Origen = "";
                oElementoDOR_18_10.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_10.ValorDia3 = "";
                oElementoDOR_18_10.ValorMes3 = "";

                double nValorOpening_18_10_Dia = 0;
                double nValorOpening_18_10_Mes = 0;
                AFElement oAFElemento_18_10 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_10.Nombre.ToLower());
                string cTag_18_10 = "";
                if (oAFElemento_18_10 != null)
                {
                    try
                    {
                        cTag_18_10 = oAFElemento_18_10.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_10, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_10.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_10.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_10_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_10, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_10.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_10.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_10_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_10.ValorDia = "";
                oElementoDOR_18_10.ValorMes = "";
                oElementoDOR_18_10.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_10_Dia = 0;
                double nValorProduction_18_10_Mes = 0;
                double nValorProduction_18_10_Ano = 0;

                AFValue oAFValorProduction_18_10_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.06-00000029.In.Value", ldt_Date);
                if (oAFValorProduction_18_10_Dia != null)
                {
                    if (!(oAFValorProduction_18_10_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_10_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_10_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_10_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_10_Dia.Value.ToString(), out nValorProduction_18_10_Dia))
                        {
                            oElementoDOR_18_10.ValorDia = nValorProduction_18_10_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_10_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.06-00000029.In.Value.MTD", ldt_Date);
                if (oAFValorProduction_18_10_Mes != null)
                {
                    if (!(oAFValorProduction_18_10_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_10_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_10_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_10_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_10_Mes.Value.ToString(), out nValorProduction_18_10_Mes))
                        {
                            oElementoDOR_18_10.ValorMes = nValorProduction_18_10_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_10_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.06-00000029.In.Value.YTD", ldt_Date);
                if (oAFValorProduction_18_10_Ano != null)
                {
                    if (!(oAFValorProduction_18_10_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_10_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_10_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_10_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_10_Ano.Value.ToString(), out nValorProduction_18_10_Ano))
                        {
                            oElementoDOR_18_10.ValorAno = nValorProduction_18_10_Ano.ToString("###,###,##0.00");
                        }
                    }
                }






                //3. Consumption
                oElementoDOR_18_10.ValorDia2 = "";
                oElementoDOR_18_10.ValorMes2 = "";
                oElementoDOR_18_10.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_10_Dia = 0;
                double nValorConsumption_18_10_Mes = 0;
                double nValorConsumption_18_10_Ano = 0;
                BloqueDOR oBloqueCOALGRINDING = oBloquesDOR.FirstOrDefault(x => x.Nombre == "COAL GRINDING");
                if (oBloqueCOALGRINDING != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCOALGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "COAL BULK");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_10_Dia))
                        {
                            oElementoDOR_18_10.ValorDia2 = nValorConsumption_18_10_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_10_Mes))
                        {
                            oElementoDOR_18_10.ValorMes2 = nValorConsumption_18_10_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_10_Ano))
                        {
                            oElementoDOR_18_10.ValorAno2 = nValorConsumption_18_10_Ano.ToString("###,###,##0.00");
                        }
                    }
                }

                //4. Closing
                oElementoDOR_18_10.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_10_Dia = 0;
                nValorClosing_18_10_Dia = nValorOpening_18_10_Dia + nValorProduction_18_10_Dia - nValorConsumption_18_10_Dia;
                oElementoDOR_18_10.ValorDia4 = nValorClosing_18_10_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_10);



                // 18.11) Pet coke Stock Pile
                ElementoDOR oElementoDOR_18_11 = new ElementoDOR();
                oElementoDOR_18_11.Orden = 11;
                oElementoDOR_18_11.Padre = "";
                oElementoDOR_18_11.Nombre = "Pet coke Stock Pile";
                oElementoDOR_18_11.Origen = "";
                oElementoDOR_18_11.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_11.ValorDia3 = "";
                oElementoDOR_18_11.ValorMes3 = "";

                double nValorOpening_18_11_Dia = 0;
                double nValorOpening_18_11_Mes = 0;
                AFElement oAFElemento_18_11 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_11.Nombre.ToLower());
                string cTag_18_11 = "";
                if (oAFElemento_18_11 != null)
                {
                    try
                    {
                        cTag_18_11 = oAFElemento_18_11.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_11, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_11.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_11.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_11_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_11, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_11.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_11.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_11_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_11.ValorDia = "";
                oElementoDOR_18_11.ValorMes = "";
                oElementoDOR_18_11.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_11_Dia = 0;
                double nValorProduction_18_11_Mes = 0;
                double nValorProduction_18_11_Ano = 0;

                AFValue oAFValorProduction_18_11_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.06-00001144.In.Value", ldt_Date);
                if (oAFValorProduction_18_11_Dia != null)
                {
                    if (!(oAFValorProduction_18_11_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_11_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_11_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_11_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_11_Dia.Value.ToString(), out nValorProduction_18_11_Dia))
                        {
                            oElementoDOR_18_11.ValorDia = nValorProduction_18_11_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_11_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.06-00001144.In.Value.MTD", ldt_Date);
                if (oAFValorProduction_18_11_Mes != null)
                {
                    if (!(oAFValorProduction_18_11_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_11_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_11_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_11_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_11_Mes.Value.ToString(), out nValorProduction_18_11_Mes))
                        {
                            oElementoDOR_18_11.ValorMes = nValorProduction_18_11_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_11_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.06-00001144.In.Value.YTD", ldt_Date);
                if (oAFValorProduction_18_11_Ano != null)
                {
                    if (!(oAFValorProduction_18_11_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_11_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_11_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_11_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_11_Ano.Value.ToString(), out nValorProduction_18_11_Ano))
                        {
                            oElementoDOR_18_11.ValorAno = nValorProduction_18_11_Ano.ToString("###,###,##0.00");
                        }
                    }
                }




                //3. Consumption
                oElementoDOR_18_11.ValorDia2 = "";
                oElementoDOR_18_11.ValorMes2 = "";
                oElementoDOR_18_11.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_11_Dia = 0;
                double nValorConsumption_18_11_Mes = 0;
                double nValorConsumption_18_11_Ano = 0;
                BloqueDOR oBloqueCOALGRINDING2 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "COAL GRINDING");
                if (oBloqueCOALGRINDING2 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCOALGRINDING2.Elementos.FirstOrDefault(x => x.Nombre == "PETCOKE BULK");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_11_Dia))
                        {
                            oElementoDOR_18_11.ValorDia2 = nValorConsumption_18_11_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_11_Mes))
                        {
                            oElementoDOR_18_11.ValorMes2 = nValorConsumption_18_11_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_11_Ano))
                        {
                            oElementoDOR_18_11.ValorAno2 = nValorConsumption_18_11_Ano.ToString("###,###,##0.00");
                        }
                    }
                }

                //4. Closing
                oElementoDOR_18_11.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_11_Dia = 0;
                nValorClosing_18_11_Dia = nValorOpening_18_11_Dia + nValorProduction_18_11_Dia - nValorConsumption_18_11_Dia;
                oElementoDOR_18_11.ValorDia4 = nValorClosing_18_11_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_11);



                // 18.12) Gypsum Stock pile
                ElementoDOR oElementoDOR_18_12 = new ElementoDOR();
                oElementoDOR_18_12.Orden = 12;
                oElementoDOR_18_12.Padre = "";
                oElementoDOR_18_12.Nombre = "Gypsum Stock pile";
                oElementoDOR_18_12.Origen = "";
                oElementoDOR_18_12.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_12.ValorDia3 = "";
                oElementoDOR_18_12.ValorMes3 = "";

                double nValorOpening_18_12_Dia = 0;
                double nValorOpening_18_12_Mes = 0;
                AFElement oAFElemento_18_12 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_12.Nombre.ToLower());
                string cTag_18_12 = "";
                if (oAFElemento_18_12 != null)
                {
                    try
                    {
                        cTag_18_12 = oAFElemento_18_12.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_12, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_12.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_12.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_12_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_12, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_12.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_12.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_12_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_12.ValorDia = "";
                oElementoDOR_18_12.ValorMes = "";
                oElementoDOR_18_12.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_12_Dia = 0;
                double nValorProduction_18_12_Mes = 0;
                double nValorProduction_18_12_Ano = 0;

                AFValue oAFValorProduction_18_12_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00000038.In.Value", ldt_Date);
                if (oAFValorProduction_18_12_Dia != null)
                {
                    if (!(oAFValorProduction_18_12_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_12_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_12_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_12_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_12_Dia.Value.ToString(), out nValorProduction_18_12_Dia))
                        {
                            oElementoDOR_18_12.ValorDia = nValorProduction_18_12_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_12_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00000038.In.Value.MTD", ldt_Date);
                if (oAFValorProduction_18_12_Mes != null)
                {
                    if (!(oAFValorProduction_18_12_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_12_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_12_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_12_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_12_Mes.Value.ToString(), out nValorProduction_18_12_Mes))
                        {
                            oElementoDOR_18_12.ValorMes = nValorProduction_18_12_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_12_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00000038.In.Value.YTD", ldt_Date);
                if (oAFValorProduction_18_12_Ano != null)
                {
                    if (!(oAFValorProduction_18_12_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_12_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_12_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_12_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_12_Ano.Value.ToString(), out nValorProduction_18_12_Ano))
                        {
                            oElementoDOR_18_12.ValorAno = nValorProduction_18_12_Ano.ToString("###,###,##0.00");
                        }
                    }
                }





                //3. Consumption
                oElementoDOR_18_12.ValorDia2 = "";
                oElementoDOR_18_12.ValorMes2 = "";
                oElementoDOR_18_12.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_12_Dia = 0;
                double nValorConsumption_18_12_Mes = 0;
                double nValorConsumption_18_12_Ano = 0;
                BloqueDOR oBloqueCEMENTGRINDING2 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                if (oBloqueCEMENTGRINDING2 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING2.Elementos.FirstOrDefault(x => x.Nombre == "GYPSUM");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_12_Dia))
                        {
                            oElementoDOR_18_12.ValorDia2 = nValorConsumption_18_12_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_12_Mes))
                        {
                            oElementoDOR_18_12.ValorMes2 = nValorConsumption_18_12_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_12_Ano))
                        {
                            oElementoDOR_18_12.ValorAno2 = nValorConsumption_18_12_Ano.ToString("###,###,##0.00");
                        }
                    }
                }

                //4. Closing
                oElementoDOR_18_12.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_12_Dia = 0;
                nValorClosing_18_12_Dia = nValorOpening_18_12_Dia + nValorProduction_18_12_Dia - nValorConsumption_18_12_Dia;
                oElementoDOR_18_12.ValorDia4 = nValorClosing_18_12_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_12);




                // 18.13) Raw meal Blending silo
                ElementoDOR oElementoDOR_18_13 = new ElementoDOR();
                oElementoDOR_18_13.Orden = 13;
                oElementoDOR_18_13.Padre = "";
                oElementoDOR_18_13.Nombre = "Raw meal Blending silo";
                oElementoDOR_18_13.Origen = "";
                oElementoDOR_18_13.Unidad = "sT";


                //1. Opening	
                oElementoDOR_18_13.ValorDia3 = "";
                oElementoDOR_18_13.ValorMes3 = "";

                double nValorOpening_18_13_Dia = 0;
                double nValorOpening_18_13_Mes = 0;
                AFElement oAFElemento_18_13 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_13.Nombre.ToLower());
                string cTag_18_13 = "";
                if (oAFElemento_18_13 != null)
                {
                    try
                    {
                        cTag_18_13 = oAFElemento_18_13.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_13, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_13.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_13.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_13_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_13, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_13.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_13.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_13_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_13.ValorDia = "";
                oElementoDOR_18_13.ValorMes = "";
                oElementoDOR_18_13.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_13_Dia = 0;
                double nValorProduction_18_13_Mes = 0;
                double nValorProduction_18_13_Ano = 0;

                BloqueDOR oBloqueRAWMILL6 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "RAW MILL");
                if (oBloqueRAWMILL6 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueRAWMILL6.Elementos.FirstOrDefault(x => x.Nombre == "RAW MEAL");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorProduction_18_13_Dia))
                        {
                            oElementoDOR_18_13.ValorDia = nValorProduction_18_13_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorProduction_18_13_Mes))
                        {
                            oElementoDOR_18_13.ValorMes = nValorProduction_18_13_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorProduction_18_13_Ano))
                        {
                            oElementoDOR_18_13.ValorAno = nValorProduction_18_13_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //3. Consumption
                oElementoDOR_18_13.ValorDia2 = "";
                oElementoDOR_18_13.ValorMes2 = "";
                oElementoDOR_18_13.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_13_Dia = 0;
                double nValorConsumption1_18_13_Dia = 0;
                double nValorConsumption2_18_13_Dia = 0;
                double nValorConsumption_18_13_Mes = 0;
                double nValorConsumption1_18_13_Mes = 0;
                double nValorConsumption2_18_13_Mes = 0;
                double nValorConsumption_18_13_Ano = 0;
                double nValorConsumption1_18_13_Ano = 0;
                double nValorConsumption2_18_13_Ano = 0;
                BloqueDOR oBloqueKILN = oBloquesDOR.FirstOrDefault(x => x.Nombre == "KILN");
                if (oBloqueKILN != null)
                {
                    ElementoDOR oElementoDOR = oBloqueKILN.Elementos.FirstOrDefault(x => x.Nombre == "RAW FEED");
                    if (oElementoDOR != null)
                    {
                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption1_18_13_Dia);
                        Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption1_18_13_Mes);
                        Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption1_18_13_Ano);
                    }
                }

                //BloqueDOR oBloqueCEMENTGRINDING3 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                //if (oBloqueCEMENTGRINDING3 != null)
                //{
                //    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING3.Elementos.FirstOrDefault(x => x.Nombre == "CKD");
                //    if (oElementoDOR != null)
                //    {
                //        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption2_18_13_Dia);
                //        Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption2_18_13_Mes);
                //        Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption2_18_13_Ano);
                //    }
                //}


                AFValue oAFConsumption2_18_13_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "CKD-Production.AA", ldt_Date);
                if (oAFConsumption2_18_13_Dia != null)
                {
                    if (!(oAFConsumption2_18_13_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFConsumption2_18_13_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFConsumption2_18_13_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFConsumption2_18_13_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        Double.TryParse(oAFConsumption2_18_13_Dia.Value.ToString(), out nValorConsumption2_18_13_Dia);                      
                    }
                }

                AFValue oAFConsumption2_18_13_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "CKD-Production.MTD", ldt_Date);
                if (oAFConsumption2_18_13_Mes != null)
                {
                    if (!(oAFConsumption2_18_13_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFConsumption2_18_13_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFConsumption2_18_13_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFConsumption2_18_13_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        Double.TryParse(oAFConsumption2_18_13_Mes.Value.ToString(), out nValorConsumption2_18_13_Mes);
                    }
                }

                AFValue oAFValorConsumption2_18_13_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "CKD-Production.YTD", ldt_Date);
                if (oAFValorConsumption2_18_13_Ano != null)
                {
                    if (!(oAFValorConsumption2_18_13_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorConsumption2_18_13_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorConsumption2_18_13_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorConsumption2_18_13_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        Double.TryParse(oAFValorConsumption2_18_13_Ano.Value.ToString(), out nValorConsumption2_18_13_Ano);
                    }
                }

                nValorConsumption_18_13_Dia = nValorConsumption1_18_13_Dia + nValorConsumption2_18_13_Dia;
                nValorConsumption_18_13_Mes = nValorConsumption1_18_13_Mes + nValorConsumption2_18_13_Mes;
                nValorConsumption_18_13_Ano = nValorConsumption1_18_13_Ano + nValorConsumption2_18_13_Ano;

                oElementoDOR_18_13.ValorDia2 = nValorConsumption_18_13_Dia.ToString("###,###,##0.00");
                oElementoDOR_18_13.ValorMes2 = nValorConsumption_18_13_Mes.ToString("###,###,##0.00");
                oElementoDOR_18_13.ValorAno2 = nValorConsumption_18_13_Ano.ToString("###,###,##0.00");



                //4. Closing
                oElementoDOR_18_13.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_13_Dia = 0;
                nValorClosing_18_13_Dia = nValorOpening_18_13_Dia + nValorProduction_18_13_Dia - nValorConsumption_18_13_Dia;
                oElementoDOR_18_13.ValorDia4 = nValorClosing_18_13_Dia.ToString("###,###,##0.00");


                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_13);



                // 18.14) Pulverized Silo
                ElementoDOR oElementoDOR_18_14 = new ElementoDOR();
                oElementoDOR_18_14.Orden = 14;
                oElementoDOR_18_14.Padre = "";
                oElementoDOR_18_14.Nombre = "Pulverized Silo";
                oElementoDOR_18_14.Origen = "";
                oElementoDOR_18_14.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_14.ValorDia3 = "";
                oElementoDOR_18_14.ValorMes3 = "";

                double nValorOpening_18_14_Dia = 0;
                double nValorOpening_18_14_Mes = 0;
                AFElement oAFElemento_18_14 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_14.Nombre.ToLower());
                string cTag_18_14 = "";
                if (oAFElemento_18_14 != null)
                {
                    try
                    {
                        cTag_18_14 = oAFElemento_18_14.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_14, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_14.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_14.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_14_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_14, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_14.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_14.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_14_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_14.ValorDia = "";
                oElementoDOR_18_14.ValorMes = "";
                oElementoDOR_18_14.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_14_Dia = 0;
                double nValorProduction_18_14_Mes = 0;
                double nValorProduction_18_14_Ano = 0;

                BloqueDOR oBloqueCOALGRINDING4 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "COAL GRINDING");
                if (oBloqueCOALGRINDING4 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCOALGRINDING4.Elementos.FirstOrDefault(x => x.Nombre == "PULVERIZED FUEL");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorProduction_18_14_Dia))
                        {
                            oElementoDOR_18_14.ValorDia = nValorProduction_18_14_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorProduction_18_14_Mes))
                        {
                            oElementoDOR_18_14.ValorMes = nValorProduction_18_14_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorProduction_18_14_Ano))
                        {
                            oElementoDOR_18_14.ValorAno = nValorProduction_18_14_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //3. Consumption
                oElementoDOR_18_14.ValorDia2 = "";
                oElementoDOR_18_14.ValorMes2 = "";
                oElementoDOR_18_14.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_14_Dia = 0;
                double nValorConsumption1_18_14_Dia = 0;
                double nValorConsumption2_18_14_Dia = 0;
                double nValorConsumption_18_14_Mes = 0;
                double nValorConsumption1_18_14_Mes = 0;
                double nValorConsumption2_18_14_Mes = 0;
                double nValorConsumption_18_14_Ano = 0;
                double nValorConsumption1_18_14_Ano = 0;
                double nValorConsumption2_18_14_Ano = 0;
                BloqueDOR oBloqueFUELCONSUMPTIONS = oBloquesDOR.FirstOrDefault(x => x.Nombre == "FUEL CONSUMPTIONS");
                if (oBloqueFUELCONSUMPTIONS != null)
                {
                    ElementoDOR oElementoDOR = oBloqueFUELCONSUMPTIONS.Elementos.FirstOrDefault(x => x.Nombre == "COAL/FUEL KILN");
                    if (oElementoDOR != null)
                    {
                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption1_18_14_Dia);
                        Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption1_18_14_Mes);
                        Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption1_18_14_Ano);
                    }
                }
                BloqueDOR oBloqueFUELCONSUMPTIONS2 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "FUEL CONSUMPTIONS");
                if (oBloqueFUELCONSUMPTIONS2 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueFUELCONSUMPTIONS2.Elementos.FirstOrDefault(x => x.Nombre == "COAL/FUEL CALCINER");
                    if (oElementoDOR != null)
                    {
                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption2_18_14_Dia);
                        Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption2_18_14_Mes);
                        Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption2_18_14_Ano);
                    }
                }
                nValorConsumption_18_14_Dia = nValorConsumption1_18_14_Dia + nValorConsumption2_18_14_Dia;
                nValorConsumption_18_14_Mes = nValorConsumption1_18_14_Mes + nValorConsumption2_18_14_Mes;
                nValorConsumption_18_14_Ano = nValorConsumption1_18_14_Ano + nValorConsumption2_18_14_Ano;

                oElementoDOR_18_14.ValorDia2 = nValorConsumption_18_14_Dia.ToString("###,###,##0.00");
                oElementoDOR_18_14.ValorMes2 = nValorConsumption_18_14_Mes.ToString("###,###,##0.00");
                oElementoDOR_18_14.ValorAno2 = nValorConsumption_18_14_Ano.ToString("###,###,##0.00");



                //4. Closing
                oElementoDOR_18_14.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_14_Dia = 0;
                nValorClosing_18_14_Dia = nValorOpening_18_14_Dia + nValorProduction_18_14_Dia - nValorConsumption_18_14_Dia;
                oElementoDOR_18_14.ValorDia4 = nValorClosing_18_14_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_14);




                // 18.15) CKD System
                ElementoDOR oElementoDOR_18_15 = new ElementoDOR();
                oElementoDOR_18_15.Orden = 15;
                oElementoDOR_18_15.Padre = "";
                oElementoDOR_18_15.Nombre = "CKD System";
                oElementoDOR_18_15.Origen = "";
                oElementoDOR_18_15.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_15.ValorDia3 = "";
                oElementoDOR_18_15.ValorMes3 = "";

                double nValorOpening_18_15_Dia = 0;
                double nValorOpening_18_15_Mes = 0;
                AFElement oAFElemento_18_15 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_15.Nombre.ToLower());
                string cTag_18_15 = "";
                if (oAFElemento_18_15 != null)
                {
                    try
                    {
                        cTag_18_15 = oAFElemento_18_15.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_15, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_15.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_15.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_15_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_15, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_15.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_15.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_15_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_15.ValorDia = "";
                oElementoDOR_18_15.ValorMes = "";
                oElementoDOR_18_15.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_15_Dia = 0;
                double nValorProduction_18_15_Mes = 0;
                double nValorProduction_18_15_Ano = 0;

                AFValue oAFValorProduction_18_15_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "CKD-Production.AA", ldt_Date);
                if (oAFValorProduction_18_15_Dia != null)
                {
                    if (!(oAFValorProduction_18_15_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_15_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_15_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_15_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_15_Dia.Value.ToString(), out nValorProduction_18_15_Dia))
                        {
                            oElementoDOR_18_15.ValorDia = nValorProduction_18_15_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_15_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "CKD-Production.MTD", ldt_Date);
                if (oAFValorProduction_18_15_Mes != null)
                {
                    if (!(oAFValorProduction_18_15_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_15_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_15_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_15_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_15_Mes.Value.ToString(), out nValorProduction_18_15_Mes))
                        {
                            oElementoDOR_18_15.ValorMes = nValorProduction_18_15_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_15_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "CKD-Production.YTD", ldt_Date);
                if (oAFValorProduction_18_15_Ano != null)
                {
                    if (!(oAFValorProduction_18_15_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_15_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_15_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_15_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_15_Ano.Value.ToString(), out nValorProduction_18_15_Ano))
                        {
                            oElementoDOR_18_15.ValorAno = nValorProduction_18_15_Ano.ToString("###,###,##0.00");
                        }
                    }
                }




                //3. Consumption
                oElementoDOR_18_15.ValorDia2 = "";
                oElementoDOR_18_15.ValorMes2 = "";
                oElementoDOR_18_15.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_15_Dia = 0;
                double nValorConsumption_18_15_Mes = 0;
                double nValorConsumption_18_15_Ano = 0;
                BloqueDOR oBloqueCEMENTGRINDING4 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                if (oBloqueCEMENTGRINDING4 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING4.Elementos.FirstOrDefault(x => x.Nombre == "CKD");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_15_Dia))
                        {
                            oElementoDOR_18_15.ValorDia2 = nValorConsumption_18_15_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_15_Mes))
                        {
                            oElementoDOR_18_15.ValorMes2 = nValorConsumption_18_15_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_15_Ano))
                        {
                            oElementoDOR_18_15.ValorAno2 = nValorConsumption_18_15_Ano.ToString("###,###,##0.00");
                        }
                    }
                }

                //4. Closing
                oElementoDOR_18_15.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_15_Dia = 0;
                nValorClosing_18_15_Dia = nValorOpening_18_15_Dia + nValorProduction_18_15_Dia - nValorConsumption_18_15_Dia;
                oElementoDOR_18_15.ValorDia4 = nValorClosing_18_15_Dia.ToString("###,###,##0.00");
                //oElementoDOR_18_15.ValorDia4 = "";

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_15);



                // 18.16) Paulden Clinker
                ElementoDOR oElementoDOR_18_16 = new ElementoDOR();
                oElementoDOR_18_16.Orden = 16;
                oElementoDOR_18_16.Padre = "";
                oElementoDOR_18_16.Nombre = "Paulden Clinker";
                oElementoDOR_18_16.Origen = "";
                oElementoDOR_18_16.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_16.ValorDia3 = "";
                oElementoDOR_18_16.ValorMes3 = "";

                double nValorOpening_18_16_Dia = 0;
                double nValorOpening_18_16_Mes = 0;
                AFElement oAFElemento_18_16 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_16.Nombre.ToLower());
                string cTag_18_16 = "";
                if (oAFElemento_18_16 != null)
                {
                    try
                    {
                        cTag_18_16 = oAFElemento_18_16.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_16, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_16.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_16.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_16_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_16, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_16.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_16.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_16_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_16.ValorDia = "";
                oElementoDOR_18_16.ValorMes = "";
                oElementoDOR_18_16.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_16_Dia = 0;
                double nValorProduction_18_16_Mes = 0;
                double nValorProduction_18_16_Ano = 0;

                AFValue oAFValorProduction_18_16_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001121.In", ldt_Date);
                if (oAFValorProduction_18_16_Dia != null)
                {
                    if (!(oAFValorProduction_18_16_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_16_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_16_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_16_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_16_Dia.Value.ToString(), out nValorProduction_18_16_Dia))
                        {
                            oElementoDOR_18_16.ValorDia = nValorProduction_18_16_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_16_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001121.In.MTD", ldt_Date);
                if (oAFValorProduction_18_16_Mes != null)
                {
                    if (!(oAFValorProduction_18_16_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_16_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_16_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_16_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_16_Mes.Value.ToString(), out nValorProduction_18_16_Mes))
                        {
                            oElementoDOR_18_16.ValorMes = nValorProduction_18_16_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_16_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001121.In.YTD", ldt_Date);
                if (oAFValorProduction_18_16_Ano != null)
                {
                    if (!(oAFValorProduction_18_16_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_16_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_16_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_16_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_16_Ano.Value.ToString(), out nValorProduction_18_16_Ano))
                        {
                            oElementoDOR_18_16.ValorAno = nValorProduction_18_16_Ano.ToString("###,###,##0.00");
                        }
                    }
                }



                //3. Consumption
                oElementoDOR_18_16.ValorDia2 = "";
                oElementoDOR_18_16.ValorMes2 = "";
                oElementoDOR_18_16.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_16_Dia = 0;
                double nValorConsumption_18_16_Mes = 0;
                double nValorConsumption_18_16_Ano = 0;
                BloqueDOR oBloqueCEMENTGRINDING5 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                if (oBloqueCEMENTGRINDING5 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING5.Elementos.FirstOrDefault(x => x.Nombre == "PAULDEN CLINKER");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_16_Dia))
                        {
                            oElementoDOR_18_16.ValorDia2 = nValorConsumption_18_16_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_16_Mes))
                        {
                            oElementoDOR_18_16.ValorMes2 = nValorConsumption_18_16_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_16_Ano))
                        {
                            oElementoDOR_18_16.ValorAno2 = nValorConsumption_18_16_Ano.ToString("###,###,##0.00");
                        }
                    }
                }

                //4. Closing
                oElementoDOR_18_16.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_16_Dia = 0;
                nValorClosing_18_16_Dia = nValorOpening_18_16_Dia + nValorProduction_18_16_Dia - nValorConsumption_18_16_Dia;
                oElementoDOR_18_16.ValorDia4 = nValorClosing_18_16_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_16);




                // 18.17) Clinker in Paulden AZ
                ElementoDOR oElementoDOR_18_17 = new ElementoDOR();
                oElementoDOR_18_17.Orden = 17;
                oElementoDOR_18_17.Padre = "";
                oElementoDOR_18_17.Nombre = "Clinker in Paulden AZ";
                oElementoDOR_18_17.Origen = "";
                oElementoDOR_18_17.Unidad = "sT";


                //1. Opening	
                oElementoDOR_18_17.ValorDia3 = "";
                oElementoDOR_18_17.ValorMes3 = "";

                double nValorOpening_18_17_Dia = 0;
                double nValorOpening_18_17_Mes = 0;
                AFElement oAFElemento_18_17 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_17.Nombre.ToLower());
                string cTag_18_17 = "";
                if (oAFElemento_18_17 != null)
                {
                    try
                    {
                        cTag_18_17 = oAFElemento_18_17.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_17, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_17.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_17.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_17_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_17, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_17.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_17.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_17_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_17.ValorDia = "";
                oElementoDOR_18_17.ValorMes = "";
                oElementoDOR_18_17.ValorAno = "";

                double nValorProduction_18_17_Dia = 0;
                double nValorProduction_18_17_Mes = 0;
                double nValorProduction_18_17_Ano = 0;



                //3. Consumption (es igual a production de Paulden Clinker)
                oElementoDOR_18_17.ValorDia2 = oElementoDOR_18_16.ValorDia;
                oElementoDOR_18_17.ValorMes2 = oElementoDOR_18_16.ValorMes;
                oElementoDOR_18_17.ValorAno2 = oElementoDOR_18_16.ValorAno;

                double nValorConsumption_18_17_Dia = nValorProduction_18_16_Dia;
                double nValorConsumption_18_17_Mes = nValorProduction_18_16_Mes;
                double nValorConsumption_18_17_Ano = nValorProduction_18_16_Ano;



                //4. Closing
                oElementoDOR_18_17.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_17_Dia = 0;
                nValorClosing_18_17_Dia = nValorOpening_18_17_Dia + nValorProduction_18_17_Dia - nValorConsumption_18_17_Dia;
                oElementoDOR_18_17.ValorDia4 = nValorClosing_18_17_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_17);



                // 18.18) Clinker storage
                ElementoDOR oElementoDOR_18_18 = new ElementoDOR();
                oElementoDOR_18_18.Orden = 18;
                oElementoDOR_18_18.Padre = "";
                oElementoDOR_18_18.Nombre = "Clinker storage";
                oElementoDOR_18_18.Origen = "";
                oElementoDOR_18_18.Unidad = "sT";


                //1. Opening	
                oElementoDOR_18_18.ValorDia3 = "";
                oElementoDOR_18_18.ValorMes3 = "";

                double nValorOpening_18_18_Dia = 0;
                double nValorOpening_18_18_Mes = 0;
                AFElement oAFElemento_18_18 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_18.Nombre.ToLower());
                string cTag_18_18 = "";
                if (oAFElemento_18_18 != null)
                {
                    try
                    {
                        cTag_18_18 = oAFElemento_18_18.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_18, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_18.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_18.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_18_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_18, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_18.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_18.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_18_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_18.ValorDia = "";
                oElementoDOR_18_18.ValorMes = "";
                oElementoDOR_18_18.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_18_Dia = 0;
                double nValorProduction_18_18_Mes = 0;
                double nValorProduction_18_18_Ano = 0;

                BloqueDOR oBloqueKILN2 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "KILN");
                if (oBloqueKILN2 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueKILN2.Elementos.FirstOrDefault(x => x.Nombre == "CLINKER");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorProduction_18_18_Dia))
                        {
                            oElementoDOR_18_18.ValorDia = nValorProduction_18_18_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorProduction_18_18_Mes))
                        {
                            oElementoDOR_18_18.ValorMes = nValorProduction_18_18_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorProduction_18_18_Ano))
                        {
                            oElementoDOR_18_18.ValorAno = nValorProduction_18_18_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //3. Consumption
                oElementoDOR_18_18.ValorDia2 = "";
                oElementoDOR_18_18.ValorMes2 = "";
                oElementoDOR_18_18.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_18_Dia = 0;
                double nValorConsumption_18_18_Mes = 0;
                double nValorConsumption_18_18_Ano = 0;
                BloqueDOR oBloqueCEMENTGRINDING8 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                if (oBloqueCEMENTGRINDING8 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING8.Elementos.FirstOrDefault(x => x.Nombre == "CLINKER");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_18_Dia))
                        {
                            oElementoDOR_18_18.ValorDia2 = nValorConsumption_18_18_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_18_Mes))
                        {
                            oElementoDOR_18_18.ValorMes2 = nValorConsumption_18_18_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_18_Ano))
                        {
                            oElementoDOR_18_18.ValorAno2 = nValorConsumption_18_18_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //4. Closing
                oElementoDOR_18_18.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_18_Dia = 0;
                nValorClosing_18_18_Dia = nValorOpening_18_18_Dia + nValorProduction_18_18_Dia - nValorConsumption_18_18_Dia;
                oElementoDOR_18_18.ValorDia4 = nValorClosing_18_18_Dia.ToString("###,###,##0.00");


                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_18);




                // 18.19) Cement silos
                ElementoDOR oElementoDOR_18_19 = new ElementoDOR();
                oElementoDOR_18_19.Orden = 19;
                oElementoDOR_18_19.Padre = "";
                oElementoDOR_18_19.Nombre = "Cement silos";
                oElementoDOR_18_19.Origen = "";
                oElementoDOR_18_19.Unidad = "sT";


                //1. Opening	
                oElementoDOR_18_19.ValorDia3 = "";
                oElementoDOR_18_19.ValorMes3 = "";

                double nValorOpening_18_19_Dia = 0;
                double nValorOpening_18_19_Mes = 0;
                AFElement oAFElemento_18_19 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_19.Nombre.ToLower());
                string cTag_18_19 = "";
                if (oAFElemento_18_19 != null)
                {
                    try
                    {
                        cTag_18_19 = oAFElemento_18_19.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_19, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_19.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_19.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_19_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_19, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_19.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_19.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_19_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_19.ValorDia = "";
                oElementoDOR_18_19.ValorMes = "";
                oElementoDOR_18_19.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_19_Dia = 0;
                double nValorProduction_18_19_Mes = 0;
                double nValorProduction_18_19_Ano = 0;

                BloqueDOR oBloqueCEMENTGRINDING6 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                if (oBloqueCEMENTGRINDING6 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING6.Elementos.FirstOrDefault(x => x.Nombre == "CEMENT");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorProduction_18_19_Dia))
                        {
                            oElementoDOR_18_19.ValorDia = nValorProduction_18_19_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorProduction_18_19_Mes))
                        {
                            oElementoDOR_18_19.ValorMes = nValorProduction_18_19_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorProduction_18_19_Ano))
                        {
                            oElementoDOR_18_19.ValorAno = nValorProduction_18_19_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


                //3. Consumption
                oElementoDOR_18_19.ValorDia2 = "";
                oElementoDOR_18_19.ValorMes2 = "";
                oElementoDOR_18_19.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_19_Dia = 0;
                double nValorConsumption_18_19_Mes = 0;
                double nValorConsumption_18_19_Ano = 0;

                AFValue oAFValorDrakeDispatch = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "Drake.Dispatch", ldt_Date);
                if (oAFValorDrakeDispatch != null)
                {
                    if (!(oAFValorDrakeDispatch.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorDrakeDispatch.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorDrakeDispatch.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorDrakeDispatch.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorDrakeDispatch.Value.ToString(), out nValorConsumption_18_19_Dia))
                        {
                            oElementoDOR_18_19.ValorDia2 = nValorConsumption_18_19_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                //AFValue oAFValorDrakeDispatchMTD = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "Drake.Dispatch.MTD", new DateTime(ldt_Date.Year, ldt_Date.Month, 1));
                AFValue oAFValorDrakeDispatchMTD = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "Drake.Dispatch.MTD", ldt_Date);
                if (oAFValorDrakeDispatchMTD != null)
                {
                    if (!(oAFValorDrakeDispatchMTD.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorDrakeDispatchMTD.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorDrakeDispatchMTD.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorDrakeDispatchMTD.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorDrakeDispatchMTD.Value.ToString(), out nValorConsumption_18_19_Mes))
                        {
                            oElementoDOR_18_19.ValorMes2 = nValorConsumption_18_19_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                //AFValue oAFValorDrakeDispatchYTD = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "Drake.Dispatch.YTD", new DateTime(ldt_Date.Year, 1, 1));
                AFValue oAFValorDrakeDispatchYTD = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "Drake.Dispatch.YTD", ldt_Date);
                if (oAFValorDrakeDispatchYTD != null)
                {
                    if (!(oAFValorDrakeDispatchYTD.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorDrakeDispatchYTD.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorDrakeDispatchYTD.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorDrakeDispatchYTD.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorDrakeDispatchYTD.Value.ToString(), out nValorConsumption_18_19_Ano))
                        {
                            oElementoDOR_18_19.ValorAno2 = nValorConsumption_18_19_Ano.ToString("###,###,##0.00");
                        }
                    }
                }



                //4. Closing
                oElementoDOR_18_19.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_19_Dia = 0;
                nValorClosing_18_19_Dia = nValorOpening_18_19_Dia + nValorProduction_18_19_Dia - nValorConsumption_18_19_Dia;
                oElementoDOR_18_19.ValorDia4 = nValorClosing_18_19_Dia.ToString("###,###,##0.00");


                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_19);



                // 18.20) Cement BK into system
                ElementoDOR oElementoDOR_18_20 = new ElementoDOR();
                oElementoDOR_18_20.Orden = 20;
                oElementoDOR_18_20.Padre = "";
                oElementoDOR_18_20.Nombre = "Cement BK into system";
                oElementoDOR_18_20.Origen = "";
                oElementoDOR_18_20.Unidad = "sT";

                oElementoDOR_18_20.ValorDia3 = "";
                oElementoDOR_18_20.ValorMes3 = "";

                oElementoDOR_18_20.ValorDia = "";
                oElementoDOR_18_20.ValorMes = "";
                oElementoDOR_18_20.ValorAno = "";

                oElementoDOR_18_20.ValorDia2 = "";
                oElementoDOR_18_20.ValorMes2 = "";
                oElementoDOR_18_20.ValorAno2 = "";

                oElementoDOR_18_20.ValorDia4 = "";
                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_20);


                // 18.21) Clinker BK (GCC)
                ElementoDOR oElementoDOR_18_21 = new ElementoDOR();
                oElementoDOR_18_21.Orden = 21;
                oElementoDOR_18_21.Padre = "";
                oElementoDOR_18_21.Nombre = "Clinker BK (GCC)";
                oElementoDOR_18_21.Origen = "";
                oElementoDOR_18_21.Unidad = "sT";

                oElementoDOR_18_21.ValorDia3 = "";
                oElementoDOR_18_21.ValorMes3 = "";

                oElementoDOR_18_21.ValorDia = "";
                oElementoDOR_18_21.ValorMes = "";
                oElementoDOR_18_21.ValorAno = "";

                oElementoDOR_18_21.ValorDia2 = "";
                oElementoDOR_18_21.ValorMes2 = "";
                oElementoDOR_18_21.ValorAno2 = "";

                oElementoDOR_18_21.ValorDia4 = "";
                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_21);


                // 18.22) Carbon Dioxide CO2
                ElementoDOR oElementoDOR_18_22 = new ElementoDOR();
                oElementoDOR_18_22.Orden = 22;
                oElementoDOR_18_22.Padre = "";
                oElementoDOR_18_22.Nombre = "Carbon Dioxide CO2";
                oElementoDOR_18_22.Origen = "";
                oElementoDOR_18_22.Unidad = "MT";


                //1. Opening	
                oElementoDOR_18_22.ValorDia3 = "";
                oElementoDOR_18_22.ValorMes3 = "";

                double nValorOpening_18_22_Dia = 0;
                double nValorOpening_18_22_Mes = 0;
                AFElement oAFElemento_18_22 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_22.Nombre.ToLower());
                string cTag_18_22 = "";
                if (oAFElemento_18_22 != null)
                {
                    try
                    {
                        cTag_18_22 = oAFElemento_18_22.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_22, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_22.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_22.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_22_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_22, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_22.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_22.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_22_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }


                //2. Production
                oElementoDOR_18_22.ValorDia = "";
                oElementoDOR_18_22.ValorMes = "";
                oElementoDOR_18_22.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_22_Dia = 0;
                double nValorProduction_18_22_Mes = 0;
                double nValorProduction_18_22_Ano = 0;

                AFValue oAFValorProduction_18_22_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.05-00000687.In", ldt_Date);
                if (oAFValorProduction_18_22_Dia != null)
                {
                    if (!(oAFValorProduction_18_22_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_22_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_22_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_22_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_22_Dia.Value.ToString(), out nValorProduction_18_22_Dia))
                        {
                            oElementoDOR_18_22.ValorDia = nValorProduction_18_22_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                Funciones.CapturarMensaje("OJO. nValorProduction_18_22_Dia:" + nValorProduction_18_22_Dia.ToString() + " para el tag: RM.05-00000687.In, para la fecha: " + ldt_Date.ToString());

                AFValue oAFValorProduction_18_22_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.05-00000687.In.MTD", ldt_Date);
                if (oAFValorProduction_18_22_Mes != null)
                {
                    if (!(oAFValorProduction_18_22_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_22_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_22_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_22_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_22_Mes.Value.ToString(), out nValorProduction_18_22_Mes))
                        {
                            oElementoDOR_18_22.ValorMes = nValorProduction_18_22_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_22_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.05-00000687.In.YTD", ldt_Date);
                if (oAFValorProduction_18_22_Ano != null)
                {
                    if (!(oAFValorProduction_18_22_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_22_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_22_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_22_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_22_Ano.Value.ToString(), out nValorProduction_18_22_Ano))
                        {
                            oElementoDOR_18_22.ValorAno = nValorProduction_18_22_Ano.ToString("###,###,##0.00");
                        }
                    }
                }


        

                //3. Consumption
                oElementoDOR_18_22.ValorDia2 = "";
                oElementoDOR_18_22.ValorMes2 = "";
                oElementoDOR_18_22.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_22_Dia = 0;
                double nValorConsumption_18_22_Mes = 0;
                double nValorConsumption_18_22_Ano = 0;
                BloqueDOR oBloqueCOALGRINDING_18_22 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "COAL GRINDING");
                if (oBloqueCOALGRINDING_18_22 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCOALGRINDING_18_22.Elementos.FirstOrDefault(x => x.Nombre == "CO2");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_22_Dia))
                        {
                            oElementoDOR_18_22.ValorDia2 = nValorConsumption_18_22_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_22_Mes))
                        {
                            oElementoDOR_18_22.ValorMes2 = nValorConsumption_18_22_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_22_Ano))
                        {
                            oElementoDOR_18_22.ValorAno2 = nValorConsumption_18_22_Ano.ToString("###,###,##0.00");
                        }
                    }
                }



                //4. Closing
                oElementoDOR_18_22.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_22_Dia = 0;
                nValorClosing_18_22_Dia = nValorOpening_18_22_Dia + nValorProduction_18_22_Dia - nValorConsumption_18_22_Dia;
                oElementoDOR_18_22.ValorDia4 = nValorClosing_18_22_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_22);



                // 18.23) Ammonium hydroxide
                ElementoDOR oElementoDOR_18_23 = new ElementoDOR();
                oElementoDOR_18_23.Orden = 23;
                oElementoDOR_18_23.Padre = "";
                oElementoDOR_18_23.Nombre = "Ammonium hydroxide";
                oElementoDOR_18_23.Origen = "";
                oElementoDOR_18_23.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_23.ValorDia3 = "";
                oElementoDOR_18_23.ValorMes3 = "";

                double nValorOpening_18_23_Dia = 0;
                double nValorOpening_18_23_Mes = 0;
                AFElement oAFElemento_18_23 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_23.Nombre.ToLower());
                string cTag_18_23 = "";
                if (oAFElemento_18_23 != null)
                {
                    try
                    {
                        cTag_18_23 = oAFElemento_18_23.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_23, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_23.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_23.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_23_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_23, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_23.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_23.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_23_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_23.ValorDia = "";
                oElementoDOR_18_23.ValorMes = "";
                oElementoDOR_18_23.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_23_Dia = 0;
                double nValorProduction_18_23_Mes = 0;
                double nValorProduction_18_23_Ano = 0;

                AFValue oAFValorProduction_18_23_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.04-00007229.In", ldt_Date);
                if (oAFValorProduction_18_23_Dia != null)
                {
                    if (!(oAFValorProduction_18_23_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_23_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_23_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_23_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_23_Dia.Value.ToString(), out nValorProduction_18_23_Dia))
                        {
                            oElementoDOR_18_23.ValorDia = nValorProduction_18_23_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_23_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.04-00007229.In.MTD", ldt_Date);
                if (oAFValorProduction_18_23_Mes != null)
                {
                    if (!(oAFValorProduction_18_23_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_23_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_23_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_23_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_23_Mes.Value.ToString(), out nValorProduction_18_23_Mes))
                        {
                            oElementoDOR_18_23.ValorMes = nValorProduction_18_23_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_23_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.04-00007229.In.YTD", ldt_Date);
                if (oAFValorProduction_18_23_Ano != null)
                {
                    if (!(oAFValorProduction_18_23_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_23_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_23_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_23_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_23_Ano.Value.ToString(), out nValorProduction_18_23_Ano))
                        {
                            oElementoDOR_18_23.ValorAno = nValorProduction_18_23_Ano.ToString("###,###,##0.00");
                        }
                    }
                }



                //3. Consumption
                oElementoDOR_18_23.ValorDia2 = "";
                oElementoDOR_18_23.ValorMes2 = "";
                oElementoDOR_18_23.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_23_Dia = 0;
                double nValorConsumption_18_23_Mes = 0;
                double nValorConsumption_18_23_Ano = 0;
                BloqueDOR oBloqueKILN3 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "KILN");
                if (oBloqueKILN3 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueKILN3.Elementos.FirstOrDefault(x => x.Nombre == "AMMONIA");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_23_Dia))
                        {
                            oElementoDOR_18_23.ValorDia2 = nValorConsumption_18_23_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_23_Mes))
                        {
                            oElementoDOR_18_23.ValorMes2 = nValorConsumption_18_23_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_23_Ano))
                        {
                            oElementoDOR_18_23.ValorAno2 = nValorConsumption_18_23_Ano.ToString("###,###,##0.00");
                        }
                    }
                }

                //4. Closing
                oElementoDOR_18_23.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_23_Dia = 0;
                nValorClosing_18_23_Dia = nValorOpening_18_23_Dia + nValorProduction_18_23_Dia - nValorConsumption_18_23_Dia;
                oElementoDOR_18_23.ValorDia4 = nValorClosing_18_23_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_23);




                // 18.24) Grinding Aid
                ElementoDOR oElementoDOR_18_24 = new ElementoDOR();
                oElementoDOR_18_24.Orden = 24;
                oElementoDOR_18_24.Padre = "";
                oElementoDOR_18_24.Nombre = "Grinding Aid";
                oElementoDOR_18_24.Origen = "";
                oElementoDOR_18_24.Unidad = "LB";

                //1. Opening	
                oElementoDOR_18_24.ValorDia3 = "";
                oElementoDOR_18_24.ValorMes3 = "";

                double nValorOpening_18_24_Dia = 0;
                double nValorOpening_18_24_Mes = 0;
                AFElement oAFElemento_18_24 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_24.Nombre.ToLower());
                string cTag_18_24 = "";
                if (oAFElemento_18_24 != null)
                {
                    try
                    {
                        cTag_18_24 = oAFElemento_18_24.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_24, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_24.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_24.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_24_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_24, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_24.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_24.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_24_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_24.ValorDia = "";
                oElementoDOR_18_24.ValorMes = "";
                oElementoDOR_18_24.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_24_Dia = 0;
                double nValorProduction_18_24_Mes = 0;
                double nValorProduction_18_24_Ano = 0;

                AFValue oAFValorProduction_18_24_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.05-00013303.In", ldt_Date);
                if (oAFValorProduction_18_24_Dia != null)
                {
                    if (!(oAFValorProduction_18_24_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_24_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_24_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_24_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_24_Dia.Value.ToString(), out nValorProduction_18_24_Dia))
                        {
                            oElementoDOR_18_24.ValorDia = nValorProduction_18_24_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_24_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.05-00013303.In.MTD", ldt_Date);
                if (oAFValorProduction_18_24_Mes != null)
                {
                    if (!(oAFValorProduction_18_24_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_24_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_24_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_23_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_24_Mes.Value.ToString(), out nValorProduction_18_24_Mes))
                        {
                            oElementoDOR_18_24.ValorMes = nValorProduction_18_24_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_24_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.05-00013303.In.YTD", ldt_Date);
                if (oAFValorProduction_18_24_Ano != null)
                {
                    if (!(oAFValorProduction_18_24_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_24_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_24_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_24_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_24_Ano.Value.ToString(), out nValorProduction_18_24_Ano))
                        {
                            oElementoDOR_18_24.ValorAno = nValorProduction_18_24_Ano.ToString("###,###,##0.00");
                        }
                    }
                }




                //3. Consumption
                oElementoDOR_18_24.ValorDia2 = "";
                oElementoDOR_18_24.ValorMes2 = "";
                oElementoDOR_18_24.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_24_Dia = 0;
                double nValorConsumption_18_24_Mes = 0;
                double nValorConsumption_18_24_Ano = 0;
                BloqueDOR oBloqueCEMENTGRINDING7 = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                if (oBloqueCEMENTGRINDING7 != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING7.Elementos.FirstOrDefault(x => x.Nombre == "GRINDING AID");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_24_Dia))
                        {
                            oElementoDOR_18_24.ValorDia2 = nValorConsumption_18_24_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_24_Mes))
                        {
                            oElementoDOR_18_24.ValorMes2 = nValorConsumption_18_24_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_24_Ano))
                        {
                            oElementoDOR_18_24.ValorAno2 = nValorConsumption_18_24_Ano.ToString("###,###,##0.00");
                        }
                    }
                }

                //4. Closing
                oElementoDOR_18_24.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_24_Dia = 0;
                nValorClosing_18_24_Dia = nValorOpening_18_24_Dia + nValorProduction_18_24_Dia - nValorConsumption_18_24_Dia;
                oElementoDOR_18_24.ValorDia4 = nValorClosing_18_24_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_24);




                // 18.25) Cement Additive
                ElementoDOR oElementoDOR_18_25 = new ElementoDOR();
                oElementoDOR_18_25.Orden = 25;
                oElementoDOR_18_25.Padre = "";
                oElementoDOR_18_25.Nombre = "Cement Additive";
                oElementoDOR_18_25.Origen = "";
                oElementoDOR_18_25.Unidad = "LB";

                oElementoDOR_18_25.ValorDia3 = "";
                oElementoDOR_18_25.ValorMes3 = "";

                oElementoDOR_18_25.ValorDia = "";
                oElementoDOR_18_25.ValorMes = "";
                oElementoDOR_18_25.ValorAno = "";

                oElementoDOR_18_25.ValorDia2 = "";
                oElementoDOR_18_25.ValorMes2 = "";
                oElementoDOR_18_25.ValorAno2 = "";

                oElementoDOR_18_25.ValorDia4 = "";
                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_25);


                // 18.26) Filter cake
                ElementoDOR oElementoDOR_18_26 = new ElementoDOR();
                oElementoDOR_18_26.Orden = 26;
                oElementoDOR_18_26.Padre = "";
                oElementoDOR_18_26.Nombre = "Filter cake";
                oElementoDOR_18_26.Origen = "";
                oElementoDOR_18_26.Unidad = "sT";

                //1. Opening	
                oElementoDOR_18_26.ValorDia3 = "";
                oElementoDOR_18_26.ValorMes3 = "";

                double nValorOpening_18_26_Dia = 0;
                double nValorOpening_18_26_Mes = 0;
                AFElement oAFElemento_18_26 = oAFElementosStock.FirstOrDefault(x => x.Attributes["Name"].GetValue().Value.ToString().ToLower() == oElementoDOR_18_26.Nombre.ToLower());
                string cTag_18_26 = "";
                if (oAFElemento_18_26 != null)
                {
                    try
                    {
                        cTag_18_26 = oAFElemento_18_26.Attributes["Tag"].DataReference.PIPoint.Name;

                        //calculo del dia
                        AFValue oValorDia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_26, ldt_Date.AddDays(-1));

                        if (oValorDia.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorDia.Value.GetType().BaseType.Name == "PIException" ||
                            oValorDia.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorDia.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_26.ValorDia3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_26.ValorDia3 = oValorDia.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_26_Dia = oValorDia.ValueAsDouble();
                        }

                        //calculo del mes
                        AFValue oValorMes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_18_26, (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).AddDays(-1));

                        if (oValorMes.Value.GetType().Name == "AFEnumerationValue" ||
                            oValorMes.Value.GetType().BaseType.Name == "PIException" ||
                            oValorMes.Value.GetType().BaseType.Name == "SystemException" ||
                            oValorMes.Value.GetType().BaseType.Name == "Exception")
                        {
                            oElementoDOR_18_26.ValorMes3 = "";
                        }
                        else
                        {
                            oElementoDOR_18_26.ValorMes3 = oValorMes.ValueAsDouble().ToString("###,###,##0.00");
                            nValorOpening_18_26_Mes = oValorMes.ValueAsDouble();
                        }
                    }
                    catch (Exception exs)
                    {

                    }
                }

                //2. Production
                oElementoDOR_18_26.ValorDia = "";
                oElementoDOR_18_26.ValorMes = "";
                oElementoDOR_18_26.ValorAno = "";

                //obtenemos el valor production
                double nValorProduction_18_26_Dia = 0;
                double nValorProduction_18_26_Mes = 0;
                double nValorProduction_18_26_Ano = 0;

                AFValue oAFValorProduction_18_26_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.11-00003496.In", ldt_Date);
                if (oAFValorProduction_18_26_Dia != null)
                {
                    if (!(oAFValorProduction_18_26_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_26_Dia.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_26_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_26_Dia.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_26_Dia.Value.ToString(), out nValorProduction_18_26_Dia))
                        {
                            oElementoDOR_18_26.ValorDia = nValorProduction_18_26_Dia.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_26_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.11-00003496.In.MTD", ldt_Date);
                if (oAFValorProduction_18_26_Mes != null)
                {
                    if (!(oAFValorProduction_18_26_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_26_Mes.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_26_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_26_Mes.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_26_Mes.Value.ToString(), out nValorProduction_18_26_Mes))
                        {
                            oElementoDOR_18_26.ValorMes = nValorProduction_18_26_Mes.ToString("###,###,##0.00");
                        }
                    }
                }

                AFValue oAFValorProduction_18_26_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.11-00003496.In.YTD", ldt_Date);
                if (oAFValorProduction_18_26_Ano != null)
                {
                    if (!(oAFValorProduction_18_26_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                          oAFValorProduction_18_26_Ano.Value.GetType().BaseType.Name == "PIException" ||
                          oAFValorProduction_18_26_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                          oAFValorProduction_18_26_Ano.Value.GetType().BaseType.Name == "Exception"))
                    {
                        if (Double.TryParse(oAFValorProduction_18_26_Ano.Value.ToString(), out nValorProduction_18_26_Ano))
                        {
                            oElementoDOR_18_26.ValorAno = nValorProduction_18_26_Ano.ToString("###,###,##0.00");
                        }
                    }
                }




                //3. Consumption
                oElementoDOR_18_26.ValorDia2 = "";
                oElementoDOR_18_26.ValorMes2 = "";
                oElementoDOR_18_26.ValorAno2 = "";

                //obtenemos el valor consumption
                double nValorConsumption_18_26_Dia = 0;
                double nValorConsumption_18_26_Mes = 0;
                double nValorConsumption_18_26_Ano = 0;
                BloqueDOR oBloqueCRUSHERMIXLIME = oBloquesDOR.FirstOrDefault(x => x.Nombre == "CRUSHER MixLime");
                if (oBloqueCRUSHERMIXLIME != null)
                {
                    ElementoDOR oElementoDOR = oBloqueCRUSHERMIXLIME.Elementos.FirstOrDefault(x => x.Nombre == "FILTER CAKE USED IN MIX LIMESTONE");
                    if (oElementoDOR != null)
                    {
                        if (Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption_18_26_Dia))
                        {
                            oElementoDOR_18_26.ValorDia2 = nValorConsumption_18_26_Dia.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorMes, out nValorConsumption_18_26_Mes))
                        {
                            oElementoDOR_18_26.ValorMes2 = nValorConsumption_18_26_Mes.ToString("###,###,##0.00");
                        }

                        if (Double.TryParse(oElementoDOR.ValorAno, out nValorConsumption_18_26_Ano))
                        {
                            oElementoDOR_18_26.ValorAno2 = nValorConsumption_18_26_Ano.ToString("###,###,##0.00");
                        }
                    }
                }

                //4. Closing
                oElementoDOR_18_26.ValorDia4 = "";

                //obtenemos el valor closing
                double nValorClosing_18_26_Dia = 0;
                nValorClosing_18_26_Dia = nValorOpening_18_26_Dia + nValorProduction_18_26_Dia - nValorConsumption_18_26_Dia;
                oElementoDOR_18_26.ValorDia4 = nValorClosing_18_26_Dia.ToString("###,###,##0.00");

                oBloqueDOR_18.Elementos.Add(oElementoDOR_18_26);




                oBloquesDOR.Add(oBloqueDOR_18);



                //Funciones.CapturarMensaje("PASO 20");


                //OBTENEMOS TAGS A USAR PARA LOS KPI
                DataTable dtTagsIndicadores = ObtenerTablaIndicadores();
                

                // 19.) CRUSHER KPI - MAI
                BloqueDOR oBloqueDOR_19 = new BloqueDOR();
                oBloqueDOR_19.Nombre = "CRUSHER KPI";
                oBloqueDOR_19.Orden = 14;
                oBloqueDOR_19.CssClass = "col-6";
                oBloqueDOR_19.EsUsagePorc = false;
                oBloqueDOR_19.Elementos = new List<ElementoDOR>();


                // 19.1) % UTILIZATION
                ElementoDOR oElementoDOR_19_1 = new ElementoDOR();
                oElementoDOR_19_1.Orden = 1;
                oElementoDOR_19_1.Padre = "";
                oElementoDOR_19_1.Nombre = "% UTILIZATION";
                oElementoDOR_19_1.Origen = "";

                oElementoDOR_19_1.Unidad = "%";
                oElementoDOR_19_1.ValorDia = "";
                oElementoDOR_19_1.ValorMes = "";
                oElementoDOR_19_1.ValorAno = "";


                //mes
                string cTag_19_1_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='21x.CRUSHER'");
                    if (oFilas.Count() > 0){
                        cTag_19_1_Mes = oFilas[0]["Utilization MTD"].ToString();
                    }                 
                }
                AFValue oAFValor_19_1_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_19_1_Mes, ldt_Date);
                if (oAFValor_19_1_Mes != null)
                {
                    if (oAFValor_19_1_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_19_1_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_19_1_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_19_1_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_19_1.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_19.Nombre = "CRUSHER KPI - " + oAFValor_19_1_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_19_1_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_19_1.ValorMes = oAFValor_19_1_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_19_1_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='21x.CRUSHER'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_19_1_Ano = oFilas[0]["Utilization YTD"].ToString();
                    }
                }
                AFValue oAFValor_19_1_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_19_1_Ano, ldt_Date);
                if (oAFValor_19_1_Ano != null)
                {
                    if (oAFValor_19_1_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_19_1_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_19_1_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_19_1_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_19_1.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_19_1.ValorAno = oAFValor_19_1_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_19.Elementos.Add(oElementoDOR_19_1);



                // 19.2) % RELIABILITY
                ElementoDOR oElementoDOR_19_2 = new ElementoDOR();
                oElementoDOR_19_2.Orden = 2;
                oElementoDOR_19_2.Padre = "";
                oElementoDOR_19_2.Nombre = "% RELIABILITY";
                oElementoDOR_19_2.Origen = "";

                oElementoDOR_19_2.Unidad = "%";
                oElementoDOR_19_2.ValorDia = "";
                oElementoDOR_19_2.ValorMes = "";
                oElementoDOR_19_2.ValorAno = "";


                //mes
                string cTag_19_2_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='21x.CRUSHER'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_19_2_Mes = oFilas[0]["Reliability MTD"].ToString();
                    }
                }
                AFValue oAFValor_19_2_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_19_2_Mes, ldt_Date);
                if (oAFValor_19_2_Mes != null)
                {
                    if (oAFValor_19_2_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_19_2_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_19_2_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_19_2_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_19_2.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_19.Nombre = "CRUSHER KPI - " + oAFValor_19_2_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_19_2_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_19_2.ValorMes = oAFValor_19_2_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_19_2_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='21x.CRUSHER'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_19_2_Ano = oFilas[0]["Reliability YTD"].ToString();
                    }
                }
                AFValue oAFValor_19_2_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_19_2_Ano, ldt_Date);
                if (oAFValor_19_2_Ano != null)
                {
                    if (oAFValor_19_2_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_19_2_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_19_2_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_19_2_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_19_2.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_19_2.ValorAno = oAFValor_19_2_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_19.Elementos.Add(oElementoDOR_19_2);



                // 19.3) % EFFICIENCY
                ElementoDOR oElementoDOR_19_3 = new ElementoDOR();
                oElementoDOR_19_3.Orden = 3;
                oElementoDOR_19_3.Padre = "";
                oElementoDOR_19_3.Nombre = "% EFFICIENCY";
                oElementoDOR_19_3.Origen = "";

                oElementoDOR_19_3.Unidad = "%";
                oElementoDOR_19_3.ValorDia = "";
                oElementoDOR_19_3.ValorMes = "";
                oElementoDOR_19_3.ValorAno = "";


                //mes
                string cTag_19_3_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='21x.CRUSHER'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_19_3_Mes = oFilas[0]["Efficiency MTD"].ToString();
                    }
                }
                AFValue oAFValor_19_3_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_19_3_Mes, ldt_Date);
                if (oAFValor_19_3_Mes != null)
                {
                    if (oAFValor_19_3_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_19_3_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_19_3_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_19_3_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_19_3.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_19.Nombre = "CRUSHER KPI - " + oAFValor_19_3_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_19_3_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_19_3.ValorMes = oAFValor_19_3_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_19_3_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='21x.CRUSHER'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_19_3_Ano = oFilas[0]["Efficiency YTD"].ToString();
                    }
                }
                AFValue oAFValor_19_3_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_19_3_Ano, ldt_Date);
                if (oAFValor_19_3_Ano != null)
                {
                    if (oAFValor_19_3_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_19_3_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_19_3_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_19_3_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_19_3.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_19_3.ValorAno = oAFValor_19_3_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_19.Elementos.Add(oElementoDOR_19_3);

                oBloquesDOR.Add(oBloqueDOR_19);



                //Funciones.CapturarMensaje("PASO 21");



                // 20.) RAW MILL KPI - MAI
                BloqueDOR oBloqueDOR_20 = new BloqueDOR();
                oBloqueDOR_20.Nombre = "RAW MILL KPI";
                oBloqueDOR_20.Orden = 15;
                oBloqueDOR_20.CssClass = "col-6";
                oBloqueDOR_20.EsUsagePorc = false;
                oBloqueDOR_20.Elementos = new List<ElementoDOR>();


                // 20.1) % UTILIZATION
                ElementoDOR oElementoDOR_20_1 = new ElementoDOR();
                oElementoDOR_20_1.Orden = 1;
                oElementoDOR_20_1.Padre = "";
                oElementoDOR_20_1.Nombre = "% UTILIZATION";
                oElementoDOR_20_1.Origen = "";

                oElementoDOR_20_1.Unidad = "%";
                oElementoDOR_20_1.ValorDia = "";
                oElementoDOR_20_1.ValorMes = "";
                oElementoDOR_20_1.ValorAno = "";


                //mes
                string cTag_20_1_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='32X.RAW MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_20_1_Mes = oFilas[0]["Utilization MTD"].ToString();
                    }
                }
                AFValue oAFValor_20_1_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_20_1_Mes, ldt_Date);
                if (oAFValor_20_1_Mes != null)
                {
                    if (oAFValor_20_1_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_20_1_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_20_1_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_20_1_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_20_1.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_20.Nombre = "RAW MILL KPI - " + oAFValor_20_1_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_20_1_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_20_1.ValorMes = oAFValor_20_1_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_20_1_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='32X.RAW MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_20_1_Ano = oFilas[0]["Utilization YTD"].ToString();
                    }
                }
                AFValue oAFValor_20_1_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_20_1_Ano, ldt_Date);
                if (oAFValor_20_1_Ano != null)
                {
                    if (oAFValor_20_1_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_20_1_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_20_1_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_20_1_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_20_1.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_20_1.ValorAno = oAFValor_20_1_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_20.Elementos.Add(oElementoDOR_20_1);



                // 20.2) % RELIABILITY
                ElementoDOR oElementoDOR_20_2 = new ElementoDOR();
                oElementoDOR_20_2.Orden = 2;
                oElementoDOR_20_2.Padre = "";
                oElementoDOR_20_2.Nombre = "% RELIABILITY";
                oElementoDOR_20_2.Origen = "";

                oElementoDOR_20_2.Unidad = "%";
                oElementoDOR_20_2.ValorDia = "";
                oElementoDOR_20_2.ValorMes = "";
                oElementoDOR_20_2.ValorAno = "";


                //mes
                string cTag_20_2_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='32X.RAW MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_20_2_Mes = oFilas[0]["Reliability MTD"].ToString();
                    }
                }
                AFValue oAFValor_20_2_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_20_2_Mes, ldt_Date);
                if (oAFValor_20_2_Mes != null)
                {
                    if (oAFValor_20_2_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_20_2_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_20_2_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_20_2_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_20_2.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_20.Nombre = "RAW MILL KPI - " + oAFValor_20_2_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_20_2_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_20_2.ValorMes = oAFValor_20_2_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_20_2_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='32X.RAW MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_20_2_Ano = oFilas[0]["Reliability YTD"].ToString();
                    }
                }
                AFValue oAFValor_20_2_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_20_2_Ano, ldt_Date);
                if (oAFValor_20_2_Ano != null)
                {
                    if (oAFValor_20_2_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_20_2_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_20_2_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_20_2_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_20_2.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_20_2.ValorAno = oAFValor_20_2_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_20.Elementos.Add(oElementoDOR_20_2);



                // 19.3) % EFFICIENCY
                ElementoDOR oElementoDOR_20_3 = new ElementoDOR();
                oElementoDOR_20_3.Orden = 3;
                oElementoDOR_20_3.Padre = "";
                oElementoDOR_20_3.Nombre = "% EFFICIENCY";
                oElementoDOR_20_3.Origen = "";

                oElementoDOR_20_3.Unidad = "%";
                oElementoDOR_20_3.ValorDia = "";
                oElementoDOR_20_3.ValorMes = "";
                oElementoDOR_20_3.ValorAno = "";


                //mes
                string cTag_20_3_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='32X.RAW MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_20_3_Mes = oFilas[0]["Efficiency MTD"].ToString();
                    }
                }
                AFValue oAFValor_20_3_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_20_3_Mes, ldt_Date);
                if (oAFValor_20_3_Mes != null)
                {
                    if (oAFValor_20_3_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_20_3_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_20_3_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_20_3_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_20_3.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_20.Nombre = "RAW MILL KPI - " + oAFValor_20_3_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_20_3_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_20_3.ValorMes = oAFValor_20_3_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_20_3_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='32X.RAW MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_20_3_Ano = oFilas[0]["Efficiency YTD"].ToString();
                    }
                }
                AFValue oAFValor_20_3_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_20_3_Ano, ldt_Date);
                if (oAFValor_20_3_Ano != null)
                {
                    if (oAFValor_20_3_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_20_3_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_20_3_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_20_3_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_20_3.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_20_3.ValorAno = oAFValor_20_3_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_20.Elementos.Add(oElementoDOR_20_3);

                oBloquesDOR.Add(oBloqueDOR_20);



                //Funciones.CapturarMensaje("PASO 22");

                // 21.) COAL MILL KPI - MAI
                BloqueDOR oBloqueDOR_21 = new BloqueDOR();
                oBloqueDOR_21.Nombre = "COAL MILL KPI";
                oBloqueDOR_21.Orden = 16;
                oBloqueDOR_21.CssClass = "col-6";
                oBloqueDOR_21.EsUsagePorc = false;
                oBloqueDOR_21.Elementos = new List<ElementoDOR>();


                // 21.1) % UTILIZATION
                ElementoDOR oElementoDOR_21_1 = new ElementoDOR();
                oElementoDOR_21_1.Orden = 1;
                oElementoDOR_21_1.Padre = "";
                oElementoDOR_21_1.Nombre = "% UTILIZATION";
                oElementoDOR_21_1.Origen = "";

                oElementoDOR_21_1.Unidad = "%";
                oElementoDOR_21_1.ValorDia = "";
                oElementoDOR_21_1.ValorMes = "";
                oElementoDOR_21_1.ValorAno = "";


                //mes
                string cTag_21_1_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='52X.COAL MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_21_1_Mes = oFilas[0]["Utilization MTD"].ToString();
                    }
                }
                AFValue oAFValor_21_1_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_21_1_Mes, ldt_Date);
                if (oAFValor_21_1_Mes != null)
                {
                    if (oAFValor_21_1_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_21_1_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_21_1_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_21_1_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_21_1.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_21.Nombre = "COAL MILL KPI - " + oAFValor_21_1_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_21_1_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_21_1.ValorMes = oAFValor_21_1_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_21_1_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='52X.COAL MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_21_1_Ano = oFilas[0]["Utilization YTD"].ToString();
                    }
                }
                AFValue oAFValor_21_1_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_21_1_Ano, ldt_Date);
                if (oAFValor_21_1_Ano != null)
                {
                    if (oAFValor_21_1_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_21_1_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_21_1_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_21_1_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_21_1.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_21_1.ValorAno = oAFValor_21_1_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_21.Elementos.Add(oElementoDOR_21_1);



                // 21.2) % RELIABILITY
                ElementoDOR oElementoDOR_21_2 = new ElementoDOR();
                oElementoDOR_21_2.Orden = 2;
                oElementoDOR_21_2.Padre = "";
                oElementoDOR_21_2.Nombre = "% RELIABILITY";
                oElementoDOR_21_2.Origen = "";

                oElementoDOR_21_2.Unidad = "%";
                oElementoDOR_21_2.ValorDia = "";
                oElementoDOR_21_2.ValorMes = "";
                oElementoDOR_21_2.ValorAno = "";


                //mes
                string cTag_21_2_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='52X.COAL MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_21_2_Mes = oFilas[0]["Reliability MTD"].ToString();
                    }
                }
                AFValue oAFValor_21_2_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_21_2_Mes, ldt_Date);
                if (oAFValor_21_2_Mes != null)
                {
                    if (oAFValor_21_2_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_21_2_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_21_2_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_21_2_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_21_2.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_21.Nombre = "COAL MILL KPI - " + oAFValor_21_2_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_21_2_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_21_2.ValorMes = oAFValor_21_2_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_21_2_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='52X.COAL MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_21_2_Ano = oFilas[0]["Reliability YTD"].ToString();
                    }
                }
                AFValue oAFValor_21_2_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_21_2_Ano, ldt_Date);
                if (oAFValor_21_2_Ano != null)
                {
                    if (oAFValor_21_2_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_21_2_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_21_2_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_21_2_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_21_2.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_21_2.ValorAno = oAFValor_21_2_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_21.Elementos.Add(oElementoDOR_21_2);



                // 21.3) % EFFICIENCY
                ElementoDOR oElementoDOR_21_3 = new ElementoDOR();
                oElementoDOR_21_3.Orden = 3;
                oElementoDOR_21_3.Padre = "";
                oElementoDOR_21_3.Nombre = "% EFFICIENCY";
                oElementoDOR_21_3.Origen = "";

                oElementoDOR_21_3.Unidad = "%";
                oElementoDOR_21_3.ValorDia = "";
                oElementoDOR_21_3.ValorMes = "";
                oElementoDOR_21_3.ValorAno = "";


                //mes
                string cTag_21_3_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='52X.COAL MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_21_3_Mes = oFilas[0]["Efficiency MTD"].ToString();
                    }
                }
                AFValue oAFValor_21_3_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_21_3_Mes, ldt_Date);
                if (oAFValor_21_3_Mes != null)
                {
                    if (oAFValor_21_3_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_21_3_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_21_3_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_21_3_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_21_3.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_21.Nombre = "COAL MILL KPI - " + oAFValor_21_3_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_21_3_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_21_3.ValorMes = oAFValor_21_3_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_21_3_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='52X.COAL MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_21_3_Ano = oFilas[0]["Efficiency YTD"].ToString();
                    }
                }
                AFValue oAFValor_21_3_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_21_3_Ano, ldt_Date);
                if (oAFValor_21_3_Ano != null)
                {
                    if (oAFValor_21_3_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_21_3_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_21_3_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_21_3_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_21_3.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_21_3.ValorAno = oAFValor_21_3_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_21.Elementos.Add(oElementoDOR_21_3);

                oBloquesDOR.Add(oBloqueDOR_21);







                //Funciones.CapturarMensaje("PASO 23");


                // 22.) KILN KPI - MAI
                BloqueDOR oBloqueDOR_22 = new BloqueDOR();
                oBloqueDOR_22.Nombre = "KILN KPI";
                oBloqueDOR_22.Orden = 17;
                oBloqueDOR_22.CssClass = "col-6";
                oBloqueDOR_22.EsUsagePorc = false;
                oBloqueDOR_22.Elementos = new List<ElementoDOR>();


                // 22.1) % UTILIZATION
                ElementoDOR oElementoDOR_22_1 = new ElementoDOR();
                oElementoDOR_22_1.Orden = 1;
                oElementoDOR_22_1.Padre = "";
                oElementoDOR_22_1.Nombre = "% UTILIZATION";
                oElementoDOR_22_1.Origen = "";

                oElementoDOR_22_1.Unidad = "%";
                oElementoDOR_22_1.ValorDia = "";
                oElementoDOR_22_1.ValorMes = "";
                oElementoDOR_22_1.ValorAno = "";


                //mes
                string cTag_22_1_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='41X.KILN'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_22_1_Mes = oFilas[0]["Utilization MTD"].ToString();
                    }
                }
                AFValue oAFValor_22_1_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_22_1_Mes, ldt_Date);
                if (oAFValor_22_1_Mes != null)
                {
                    if (oAFValor_22_1_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_22_1_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_22_1_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_22_1_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_22_1.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_22.Nombre = "KILN KPI - " + oAFValor_22_1_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_22_1_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_22_1.ValorMes = oAFValor_22_1_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_22_1_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='41X.KILN'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_22_1_Ano = oFilas[0]["Utilization YTD"].ToString();
                    }
                }
                AFValue oAFValor_22_1_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_22_1_Ano, ldt_Date);
                if (oAFValor_22_1_Ano != null)
                {
                    if (oAFValor_22_1_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_22_1_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_22_1_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_22_1_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_22_1.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_22_1.ValorAno = oAFValor_22_1_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_22.Elementos.Add(oElementoDOR_22_1);



                // 22.2) % RELIABILITY
                ElementoDOR oElementoDOR_22_2 = new ElementoDOR();
                oElementoDOR_22_2.Orden = 2;
                oElementoDOR_22_2.Padre = "";
                oElementoDOR_22_2.Nombre = "% RELIABILITY";
                oElementoDOR_22_2.Origen = "";

                oElementoDOR_22_2.Unidad = "%";
                oElementoDOR_22_2.ValorDia = "";
                oElementoDOR_22_2.ValorMes = "";
                oElementoDOR_22_2.ValorAno = "";


                //mes
                string cTag_22_2_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='41X.KILN'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_22_2_Mes = oFilas[0]["Reliability MTD"].ToString();
                    }
                }
                AFValue oAFValor_22_2_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_22_2_Mes, ldt_Date);
                if (oAFValor_22_2_Mes != null)
                {
                    if (oAFValor_22_2_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_22_2_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_22_2_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_22_2_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_22_2.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_22.Nombre = "KILN KPI - " + oAFValor_22_2_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_22_2_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_22_2.ValorMes = oAFValor_22_2_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_22_2_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='41X.KILN'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_22_2_Ano = oFilas[0]["Reliability YTD"].ToString();
                    }
                }
                AFValue oAFValor_22_2_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_22_2_Ano, ldt_Date);
                if (oAFValor_22_2_Ano != null)
                {
                    if (oAFValor_22_2_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_22_2_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_22_2_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_22_2_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_22_2.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_22_2.ValorAno = oAFValor_22_2_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_22.Elementos.Add(oElementoDOR_22_2);



                // 22.3) % EFFICIENCY
                ElementoDOR oElementoDOR_22_3 = new ElementoDOR();
                oElementoDOR_22_3.Orden = 3;
                oElementoDOR_22_3.Padre = "";
                oElementoDOR_22_3.Nombre = "% EFFICIENCY";
                oElementoDOR_22_3.Origen = "";

                oElementoDOR_22_3.Unidad = "%";
                oElementoDOR_22_3.ValorDia = "";
                oElementoDOR_22_3.ValorMes = "";
                oElementoDOR_22_3.ValorAno = "";


                //mes
                string cTag_22_3_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='41X.KILN'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_22_3_Mes = oFilas[0]["Efficiency MTD"].ToString();
                    }
                }
                AFValue oAFValor_22_3_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_22_3_Mes, ldt_Date);
                if (oAFValor_22_3_Mes != null)
                {
                    if (oAFValor_22_3_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_22_3_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_22_3_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_22_3_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_22_3.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_22.Nombre = "KILN KPI - " + oAFValor_22_3_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_22_3_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_22_3.ValorMes = oAFValor_22_3_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_22_3_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='41X.KILN'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_22_3_Ano = oFilas[0]["Efficiency YTD"].ToString();
                    }
                }
                AFValue oAFValor_22_3_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_22_3_Ano, ldt_Date);
                if (oAFValor_22_3_Ano != null)
                {
                    if (oAFValor_22_3_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_22_3_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_22_3_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_22_3_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_22_3.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_22_3.ValorAno = oAFValor_22_3_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_22.Elementos.Add(oElementoDOR_22_3);

                oBloquesDOR.Add(oBloqueDOR_22);




                //Funciones.CapturarMensaje("PASO 24");


                // 23.) CEMENT MILL KPI -MA
                BloqueDOR oBloqueDOR_23 = new BloqueDOR();
                oBloqueDOR_23.Nombre = "CEMENT MILL KPI";
                oBloqueDOR_23.Orden = 18;
                oBloqueDOR_23.CssClass = "col-6";
                oBloqueDOR_23.EsUsagePorc = false;
                oBloqueDOR_23.Elementos = new List<ElementoDOR>();


                // 23.1) % UTILIZATION
                ElementoDOR oElementoDOR_23_1 = new ElementoDOR();
                oElementoDOR_23_1.Orden = 1;
                oElementoDOR_23_1.Padre = "";
                oElementoDOR_23_1.Nombre = "% UTILIZATION";
                oElementoDOR_23_1.Origen = "";

                oElementoDOR_23_1.Unidad = "%";
                oElementoDOR_23_1.ValorDia = "";
                oElementoDOR_23_1.ValorMes = "";
                oElementoDOR_23_1.ValorAno = "";


                //mes
                string cTag_23_1_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='62X.FINISH MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_23_1_Mes = oFilas[0]["Utilization MTD"].ToString();
                    }
                }
                AFValue oAFValor_23_1_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_23_1_Mes, ldt_Date);
                if (oAFValor_23_1_Mes != null)
                {
                    if (oAFValor_23_1_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_23_1_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_23_1_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_23_1_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_23_1.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_23.Nombre = "CEMENT MILL KPI - " + oAFValor_23_1_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_23_1_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_23_1.ValorMes = oAFValor_23_1_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_23_1_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='62X.FINISH MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_23_1_Ano = oFilas[0]["Utilization YTD"].ToString();
                    }
                }
                AFValue oAFValor_23_1_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_23_1_Ano, ldt_Date);
                if (oAFValor_23_1_Ano != null)
                {
                    if (oAFValor_23_1_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_23_1_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_23_1_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_23_1_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_23_1.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_23_1.ValorAno = oAFValor_23_1_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_23.Elementos.Add(oElementoDOR_23_1);



                // 23.2) % RELIABILITY
                ElementoDOR oElementoDOR_23_2 = new ElementoDOR();
                oElementoDOR_23_2.Orden = 2;
                oElementoDOR_23_2.Padre = "";
                oElementoDOR_23_2.Nombre = "% RELIABILITY";
                oElementoDOR_23_2.Origen = "";

                oElementoDOR_23_2.Unidad = "%";
                oElementoDOR_23_2.ValorDia = "";
                oElementoDOR_23_2.ValorMes = "";
                oElementoDOR_23_2.ValorAno = "";


                //mes
                string cTag_23_2_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='62X.FINISH MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_23_2_Mes = oFilas[0]["Reliability MTD"].ToString();
                    }
                }
                AFValue oAFValor_23_2_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_23_2_Mes, ldt_Date);
                if (oAFValor_23_2_Mes != null)
                {
                    if (oAFValor_23_2_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_23_2_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_23_2_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_23_2_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_23_2.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_23.Nombre = "CEMENT MILL KPI - " + oAFValor_23_2_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_23_2_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_23_2.ValorMes = oAFValor_23_2_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_23_2_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='62X.FINISH MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_23_2_Ano = oFilas[0]["Reliability YTD"].ToString();
                    }
                }
                AFValue oAFValor_23_2_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_23_2_Ano, ldt_Date);
                if (oAFValor_23_2_Ano != null)
                {
                    if (oAFValor_23_2_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_23_2_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_23_2_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_23_2_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_23_2.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_23_2.ValorAno = oAFValor_23_2_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_23.Elementos.Add(oElementoDOR_23_2);



                // 22.3) % EFFICIENCY
                ElementoDOR oElementoDOR_23_3 = new ElementoDOR();
                oElementoDOR_23_3.Orden = 3;
                oElementoDOR_23_3.Padre = "";
                oElementoDOR_23_3.Nombre = "% EFFICIENCY";
                oElementoDOR_23_3.Origen = "";

                oElementoDOR_23_3.Unidad = "%";
                oElementoDOR_23_3.ValorDia = "";
                oElementoDOR_23_3.ValorMes = "";
                oElementoDOR_23_3.ValorAno = "";


                //mes
                string cTag_23_3_Mes = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='62X.FINISH MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_23_3_Mes = oFilas[0]["Efficiency MTD"].ToString();
                    }
                }
                AFValue oAFValor_23_3_Mes = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_23_3_Mes, ldt_Date);
                if (oAFValor_23_3_Mes != null)
                {
                    if (oAFValor_23_3_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_23_3_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_23_3_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_23_3_Mes.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_23_3.ValorMes = "";
                    }
                    else
                    {
                        oBloqueDOR_23.Nombre = "CEMENT MILL KPI - " + oAFValor_23_3_Mes.Timestamp.LocalTime.ToString("MMMM") + " " + oAFValor_23_3_Mes.Timestamp.LocalTime.Year.ToString();
                        oElementoDOR_23_3.ValorMes = oAFValor_23_3_Mes.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                //año
                string cTag_23_3_Ano = "";
                if (dtTagsIndicadores != null)
                {
                    DataRow[] oFilas = dtTagsIndicadores.Select("Equipment='62X.FINISH MILL'");
                    if (oFilas.Count() > 0)
                    {
                        cTag_23_3_Ano = oFilas[0]["Efficiency YTD"].ToString();
                    }
                }
                AFValue oAFValor_23_3_Ano = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_23_3_Ano, ldt_Date);
                if (oAFValor_23_3_Ano != null)
                {
                    if (oAFValor_23_3_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_23_3_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_23_3_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_23_3_Ano.Value.GetType().BaseType.Name == "Exception")
                    {
                        oElementoDOR_23_3.ValorAno = "";
                    }
                    else
                    {
                        oElementoDOR_23_3.ValorAno = oAFValor_23_3_Ano.ValueAsDouble().ToString("###,###,##0.00");
                    }
                }
                

                oBloqueDOR_23.Elementos.Add(oElementoDOR_23_3);

                oBloquesDOR.Add(oBloqueDOR_23);





                //Funciones.CapturarMensaje("PASO 25");




                //ordenamos los bloques
                List<BloqueDOR> oBloquesDOROrdenados = oBloquesDOR.OrderBy(x => x.Orden).ToList();

                //quitamos decimales con cero
                oBloquesDOROrdenados = QuitarDecimalesCeroEnDOR(oBloquesDOROrdenados);

                //redondeamos a entero el bloque STOCK REPORT
                BloqueDOR oBloqueStocks = oBloquesDOROrdenados.FirstOrDefault(x => x.Nombre == "STOCK REPORT");
                if (oBloqueStocks != null)
                {
                    foreach (ElementoDOR oElemento in oBloqueStocks.Elementos)
                    {
                        if (oElemento.ValorDia != null)
                        {
                            double nValor = 0;
                            if (Double.TryParse(oElemento.ValorDia, out nValor))
                            {
                                nValor = Math.Round(nValor, 0, MidpointRounding.AwayFromZero);
                                oElemento.ValorDia = nValor.ToString("###,###,##0");
                            }                           
                        }

                        if (oElemento.ValorMes != null)
                        {
                            double nValor = 0;
                            if (Double.TryParse(oElemento.ValorMes, out nValor))
                            {
                                nValor = Math.Round(nValor, 0, MidpointRounding.AwayFromZero);
                                oElemento.ValorMes = nValor.ToString("###,###,##0");
                            }  
                        }

                        if (oElemento.ValorAno != null)
                        {
                            double nValor = 0;
                            if (Double.TryParse(oElemento.ValorAno, out nValor))
                            {
                                nValor = Math.Round(nValor, 0, MidpointRounding.AwayFromZero);
                                oElemento.ValorAno = nValor.ToString("###,###,##0");
                            }  
                        }

                        if (oElemento.ValorDia2 != null)
                        {
                            double nValor = 0;
                            if (Double.TryParse(oElemento.ValorDia2, out nValor))
                            {
                                nValor = Math.Round(nValor, 0, MidpointRounding.AwayFromZero);
                                oElemento.ValorDia2 = nValor.ToString("###,###,##0");
                            }  
                        }

                        if (oElemento.ValorMes2 != null)
                        {
                            double nValor = 0;
                            if (Double.TryParse(oElemento.ValorMes2, out nValor))
                            {
                                nValor = Math.Round(nValor, 0, MidpointRounding.AwayFromZero);
                                oElemento.ValorMes2 = nValor.ToString("###,###,##0");
                            }  
                        }

                        if (oElemento.ValorAno2 != null)
                        {
                            double nValor = 0;
                            if (Double.TryParse(oElemento.ValorAno2, out nValor))
                            {
                                nValor = Math.Round(nValor, 0, MidpointRounding.AwayFromZero);
                                oElemento.ValorAno2 = nValor.ToString("###,###,##0");
                            }  
                        }

                        if (oElemento.ValorDia3 != null)
                        {
                            double nValor = 0;
                            if (Double.TryParse(oElemento.ValorDia3, out nValor))
                            {
                                nValor = Math.Round(nValor, 0, MidpointRounding.AwayFromZero);
                                oElemento.ValorDia3 = nValor.ToString("###,###,##0");
                            }  
                        }

                        if (oElemento.ValorMes3 != null)
                        {
                            double nValor = 0;
                            if (Double.TryParse(oElemento.ValorMes3, out nValor))
                            {
                                nValor = Math.Round(nValor, 0, MidpointRounding.AwayFromZero);
                                oElemento.ValorMes3 = nValor.ToString("###,###,##0");
                            }  
                        }

                        if (oElemento.ValorDia4 != null)
                        {
                            double nValor = 0;
                            if (Double.TryParse(oElemento.ValorDia4, out nValor))
                            {
                                nValor = Math.Round(nValor, 0, MidpointRounding.AwayFromZero);
                                oElemento.ValorDia4 = nValor.ToString("###,###,##0");
                            }  
                        }                 
                    }
                }

                //Funciones.CapturarMensaje("PASO 26");

                return oBloquesDOROrdenados;

                    

            }
            catch (Exception ex){
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerDOR", "wsUNACEMPI", false);
                return new List<BloqueDOR>();
            }
        }


        public List<DependenciaDOR> ListarDependenciasDOR()
        {
            List<DependenciaDOR> oDependencias = new List<DependenciaDOR>();
            DependenciaDOR oDependencia = new DependenciaDOR();

            try
            {
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                string cDatabase = WebConfigurationManager.AppSettings["database"];
                
                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];

                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];

                DataTable dt = new DataTable();
                AFTable lo_Table;
                lo_Table = lo_Database.Tables["DependenciasDOR"];
                dt = lo_Table.Table;

                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        oDependencia = new DependenciaDOR();
                        oDependencia.Codigo = dt.Rows[i]["COD_DEPENDENCIA"].ToString();
                        oDependencia.Descripcion = dt.Rows[i]["DSC_DEPENDENCIA"].ToString();
                        oDependencias.Add(oDependencia);
                    }
                }

                return oDependencias;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDependenciasDOR", "wsUNACEMPI", false);
                return new List<DependenciaDOR>();
            }

            
        }


        public List<FactorFormulacion> ListarFactoresDeFormulacion(string fecha, string dependencia)
        {
            List<FactorFormulacion> oFactores = new List<FactorFormulacion>();
            FactorFormulacion oFactor = new FactorFormulacion();

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarFactoresDeFormulacion", "wsUNACEMPI", false);
                return new List<FactorFormulacion>();
            }

            try
            {
                String cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                String cDatabase = WebConfigurationManager.AppSettings["database"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                AFDatabase oDB = oPI.Databases[cDatabase];

                var oSearch = new AFElementSearch(oDB, "Buscar", @"Root:'' TemplateName:='Factor Input'");
                IEnumerable<AFElement> oElementos = oSearch.FindElements(fullLoad: true);

                foreach (AFElement oAFElement in oElementos)
                {
                    oFactor = new FactorFormulacion();
                    oFactor.Nombre = oAFElement.Name;
                    oFactor.Titulo = oAFElement.Attributes["Title RD"].GetValue().ToString();
                    oFactor.Dependencia = oAFElement.Attributes["Dependencia"].GetValue().ToString();
                    oFactor.Fecha = fecha;
                    oFactor.Valor = "";

                    oFactor.Ruta = oAFElement.GetPath();
                    oFactor.Ruta = oFactor.Ruta.Replace(@"\\" + cServidorPIAF + @"\" + cDatabase + @"\", "");
            
                    string cTag = "";
                    if (oAFElement.Attributes["Factor"].DataReference != null)
                    {
                        cTag = oAFElement.Attributes["Factor"].DataReference.ToString();
                        cTag = cTag.Substring(cTag.LastIndexOf(@"\") + 1);
                    }
                    oFactor.Tag = cTag;
                    oFactor.Rounding = oAFElement.Attributes["Rounding"].GetValue().ValueAsInt32();

                    oFactores.Add(oFactor);
                }


                IEnumerable<AFAttribute> attributes = oElementos.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList = new AFAttributeList(attributes);

                IEnumerable<AFAttribute> attributesFiltered = attributeList.Where(a => a.Name.ToUpper() == "Factor".ToUpper());
                AFAttributeList attributeListFiltered = new AFAttributeList(attributesFiltered);

                AFListData oData = attributeListFiltered.Data;

                // Results should be sent back for 100 tags in each page.
                PIPagingConfiguration config = new PIPagingConfiguration(PIPageType.TagCount, 100);
                config.OperationTimeoutOverride = new TimeSpan(2, 0, 0);

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempo = new AFTime(ldt_Date.ToUniversalTime());

                //traemos los datos
                IEnumerable<AFValue> listResults = oData.RecordedValue(oTiempo, AFRetrievalMode.AtOrBefore);

                List<AFValue> oLista = listResults.ToList();

              


                //AFTime oTiempoIni = new AFTime(ldt_Date.ToUniversalTime());
                //AFTime oTiempoFin = new AFTime(ldt_Date.AddSeconds(-1).ToUniversalTime());
                //AFTimeRange oTiempoRango = new AFTimeRange(oTiempoIni, oTiempoFin);

                ////traemos los datos
                //IEnumerable<AFValues> listResults = oData.RecordedValues(oTiempoRango, AFBoundaryType.Inside, null, false, config);

                //foreach (AFValues oAFValores in listResults)
                //{
                //    foreach (AFValue oAFValor in oAFValores)
                //    {
                //        try
                //        {
                //            Funciones.CapturarMensaje(oAFValor.Value.ToString());

                //            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                //                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                //                oAFValor.Value.GetType().BaseType.Name == "SystemException")
                //            {
                //                continue;
                //            }

                //            FactorFormulacion oFactorTemp = oFactores.FirstOrDefault(x => x.Nombre == oAFValor.Attribute.Element.Name);
                //            if (oFactorTemp != null)
                //            {
                //                oFactorTemp.Valor = oAFValor.ValueAsDouble().ToString("###,###,##0.00");
                //            }
                //        }
                //        catch (Exception exz)
                //        {
                //            Funciones.CapturarError(exz, "Operaciones.svc - ListarFactoresDeFormulacion", "wsUNACEMPI", false);
                //        }
                //    }
                //}




                foreach (AFValue oAFValor in oLista)
                {
                    try
                    {
                        //Funciones.CapturarMensaje(oAFValor.Value.ToString());

                        if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                            oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                            oAFValor.Value.GetType().BaseType.Name == "SystemException")
                        {
                            continue;
                        }

                        FactorFormulacion oFactorTemp = oFactores.FirstOrDefault(x => x.Nombre == oAFValor.Attribute.Element.Name);
                        if (oFactorTemp != null)
                        {
                            int nRounding = oAFValor.Attribute.Element.Attributes["Rounding"].GetValue().ValueAsInt32();
                            string cCeros = "";
                            if (nRounding > 0)
                            {
                                cCeros = "." + new StringBuilder(nRounding).Insert(0, "0", nRounding).ToString();
                            }
                            oFactorTemp.Valor = oAFValor.ValueAsDouble().ToString("###,###,##0" + cCeros);
                        }
                    }
                    catch (Exception exz)
                    {
                        Funciones.CapturarError(exz, "Operaciones.svc - ListarFactoresDeFormulacion", "wsUNACEMPI", false);
                    }

                }


                //filtramos por dependencia
                List<FactorFormulacion> oFactoresFiltrados = new List<FactorFormulacion>();
                if (dependencia=="")
                {
                    return oFactores;
                }
                else {
                    oFactoresFiltrados = oFactores.Where(x => x.Dependencia == dependencia).ToList();
                    return oFactoresFiltrados;
                }

                
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarFactoresDeFormulacion", "wsUNACEMPI", false);
                return oFactores;
            }
        }


        public Resultado ActualizarFactorDeFormulacion(EntradaActualizarFactorDeFormulacion oEntradaActualizarFactorDeFormulacion)
        {
            DateTime ldt_Date;
            Resultado oResultado = new Resultado();

            String cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
            string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
            string cDatabase = WebConfigurationManager.AppSettings["database"];

            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(oEntradaActualizarFactorDeFormulacion.Fecha.Substring(0, 4)),
                                        Convert.ToInt32(oEntradaActualizarFactorDeFormulacion.Fecha.Substring(5, 2)),
                                        Convert.ToInt32(oEntradaActualizarFactorDeFormulacion.Fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ActualizarFactorDeFormulacion", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                double nValorFactor = Math.Round(Convert.ToDouble(oEntradaActualizarFactorDeFormulacion.Valor), oEntradaActualizarFactorDeFormulacion.Rounding, MidpointRounding.AwayFromZero);

                bool rpta = ModPIExtFunctions.Write_Value_PI(cServidorPIData, oEntradaActualizarFactorDeFormulacion.Tag, ldt_Date, nValorFactor, true);

                if (rpta)
                {

                    //ejecutamos analisis "Complement" en caso tuviera el elemento
                    DateTime dFechaIni;
                    dFechaIni = ldt_Date;

                    DateTime dFechaFin;
                    dFechaFin = DateTime.Now;            

                    PISystems oPIAF = new PISystems();
                    PISystem oPI = oPIAF[cServidorPIAF];
                    
                    oPI.Connect();

                    AFDatabase oDB = oPI.Databases[cDatabase];

                    AFAnalysisService aAnalysisService = null;
                    IEnumerable<AFAnalysis> elemAnalyses = null;
                    List<AFAnalysis> foundAnalyses = new List<AFAnalysis>();
                    Object response = null;

                    aAnalysisService = oPI.AnalysisService;
                    string user_analysisfilter = "Complement";  //nombre de analisis

                    AFTime oTiempoIni = new AFTime(dFechaIni.ToUniversalTime());
                    AFTime oTiempoFin = new AFTime(dFechaFin.ToUniversalTime());
                    AFTimeRange backfillPeriod = new AFTimeRange(oTiempoIni, oTiempoFin);

                    List<string> rutas = new List<string>();
                    rutas.Add(oEntradaActualizarFactorDeFormulacion.RutaElemento);
                    AFKeyedResults<string, AFElement> oResultados = AFElement.FindElementsByPath(rutas, oDB);

                    if (oResultados.Count > 0)
                    {
                        AFElement oElementoTemp = oResultados[oEntradaActualizarFactorDeFormulacion.RutaElemento];

                        String analysisfilter = "Target:=\"" + oElementoTemp.GetPath(oDB) + "\" Name:=\"" + user_analysisfilter + "\"";
                        AFAnalysisSearch analysisSearch = new AFAnalysisSearch(oDB, "analysisSearch", AFAnalysisSearch.ParseQuery(analysisfilter));

                        elemAnalyses = analysisSearch.FindAnalyses(0, true).ToList();
                        foundAnalyses.AddRange(elemAnalyses);

                        foreach (var analysis_n in foundAnalyses)
                        {
                            //response = aAnalysisService.QueueCalculation(new List<AFAnalysis> { analysis_n }, backfillPeriod, AFAnalysisService.CalculationMode.FillDataGaps);
                            response = aAnalysisService.QueueCalculation(new List<AFAnalysis> { analysis_n }, backfillPeriod, AFAnalysisService.CalculationMode.DeleteExistingData);
                        }
                    }
                    




                    return new Resultado(0, "Operación Exitosa");
                }
                else
                {
                    return new Resultado(-1, "No se pudo registrar el valor " + oEntradaActualizarFactorDeFormulacion.Valor + " para el tag " + oEntradaActualizarFactorDeFormulacion.Tag);
                }
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ActualizarFactorDeFormulacion", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public List<MasterData> ListarMasterData()
        {
            List<MasterData> oDatos = new List<MasterData>();
            MasterData oDato = new MasterData();

            string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
            string cDatabase = WebConfigurationManager.AppSettings["database"];

            PISystems oPIAF = new PISystems();
            PISystem oPI = oPIAF[cServidorPIAF];

            try
            {
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];

                DataTable dt = new DataTable();
                AFTable AFdt;
                AFdt = lo_Database.Tables["MasterData"];
                dt = AFdt.Table;

                //string cFiltro;
                //cFiltro = "proceso = '" + proceso + "'";
                //DataRow[] rows;
                //rows = dt.Select(cFiltro);

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        oDato = new MasterData();
                        oDato.Name = row["name"].ToString();
                        oDato.Title = row["title"].ToString();
                        oDatos.Add(oDato);
                    }
                }

                return oDatos;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarMasterData", "wsUNACEMPI", false);
                return new List<MasterData>();
            }
        }


        public List<MasterData> ListarMasterDataRD()
        {
            List<MasterData> oDatos = new List<MasterData>();
            MasterData oDato = new MasterData();

            string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
            string cDatabase = WebConfigurationManager.AppSettings["database"];

            PISystems oPIAF = new PISystems();
            PISystem oPI = oPIAF[cServidorPIAF];

            try
            {
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];

                DataTable dt = new DataTable();
                AFTable AFdt;
                AFdt = lo_Database.Tables["MasterData RD"];
                dt = AFdt.Table;

                //string cFiltro;
                //cFiltro = "proceso = '" + proceso + "'";
                //DataRow[] rows;
                //rows = dt.Select(cFiltro);

                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        oDato = new MasterData();
                        oDato.Name = row["name"].ToString();
                        oDato.Title = row["title"].ToString();
                        oDatos.Add(oDato);
                    }
                }

                return oDatos;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarMasterDataRD", "wsUNACEMPI", false);
                return new List<MasterData>();
            }
        }


        public List<FactorFormulacion> ListarFactoresDeFormulacionEnRangoFecha(string fechaini, string fechafin)
        {
            List<FactorFormulacion> oFactores = new List<FactorFormulacion>();
            FactorFormulacion oFactor = new FactorFormulacion();

            DateTime ldt_Date_Ini;
            try
            {
                ldt_Date_Ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarFactoresDeFormulacionEnRangoFecha", "wsUNACEMPI", false);
                return new List<FactorFormulacion>();
            }

            DateTime ldt_Date_Fin;
            try
            {
                ldt_Date_Fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarFactoresDeFormulacionEnRangoFecha", "wsUNACEMPI", false);
                return new List<FactorFormulacion>();
            }

            try
            {
                String cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                String cDatabase = WebConfigurationManager.AppSettings["database"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                AFDatabase oDB = oPI.Databases[cDatabase];

                var oSearch = new AFElementSearch(oDB, "Buscar", @"Root:'' TemplateName:='Factor Input'");
                IEnumerable<AFElement> oElementos = oSearch.FindElements(fullLoad: true);

                IEnumerable<AFAttribute> attributes = oElementos.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList = new AFAttributeList(attributes);

                IEnumerable<AFAttribute> attributesFiltered = attributeList.Where(a => a.Name.ToUpper() == "Factor".ToUpper());
                AFAttributeList attributeListFiltered = new AFAttributeList(attributesFiltered);

                AFListData oData = attributeListFiltered.Data;

                // Results should be sent back for 100 tags in each page.
                PIPagingConfiguration config = new PIPagingConfiguration(PIPageType.TagCount, 100);
                config.OperationTimeoutOverride = new TimeSpan(2, 0, 0);

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempoIni = new AFTime(ldt_Date_Ini.ToUniversalTime());
                AFTime oTiempoFin = new AFTime(ldt_Date_Fin.AddDays(1).AddSeconds(-1).ToUniversalTime());
                AFTimeRange oTiempoRango = new AFTimeRange(oTiempoIni, oTiempoFin);


                //traemos los datos
                IEnumerable<AFValues> listResults = oData.RecordedValues(oTiempoRango, AFBoundaryType.Outside, null, false, config);

                foreach (AFValues oAFValores in listResults)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                            oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                            oAFValor.Value.GetType().BaseType.Name == "SystemException")
                        {
                            continue;
                        }

                        oFactor = new FactorFormulacion();
                        oFactor.Nombre = oAFValor.Attribute.Element.Name;
                        oFactor.Titulo = oAFValor.Attribute.Element.Attributes["Title RD"].GetValue().ToString();
                        oFactor.Dependencia = oAFValor.Attribute.Element.Attributes["Dependencia"].GetValue().ToString();
                        oFactor.Fecha = oAFValor.Timestamp.LocalTime.ToString("yyyy-MM-dd");

                        int nRounding = oAFValor.Attribute.Element.Attributes["Rounding"].GetValue().ValueAsInt32();
                        oFactor.Rounding = nRounding;
                                           
                        string cCeros = "";
                        if (nRounding > 0)
                        {
                            cCeros = "." + new StringBuilder(nRounding).Insert(0, "0", nRounding).ToString();
                        }
                        oFactor.Valor = oAFValor.ValueAsDouble().ToString("###,###,##0" + cCeros);

                        oFactores.Add(oFactor);
                    }
                }

                List<FactorFormulacion> oFactoresOrdenados = oFactores.OrderBy(x => x.Nombre).ThenByDescending(x => x.Fecha).ToList();

                return oFactoresOrdenados;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarFactoresDeFormulacion", "wsUNACEMPI", false);
                return oFactores;
            }
        }


        public FAC ObtenerFAC_old(string fecha)
        {
            FAC oFAC = new FAC();
            oFAC.Cabeceras =  new List<CabeceraFAC>();
            oFAC.Elementos = new List<ElementoFAC>();

            List<ElementoFAC> oElementosFAC = new List<ElementoFAC>();
            ElementoFAC oElementoFAC = new ElementoFAC();

            List<CabeceraFAC> oCabecerasFAC = new List<CabeceraFAC>();
            CabeceraFAC oCabeceraFAC = new CabeceraFAC();

            //string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFAC", "wsUNACEMPI", false);
                return oFAC;
            }

            try
            {
                DateTime dFechaIni = new DateTime(DateTime.Now.Year, 1, 1);
                //List<Formulacion> oFormulaciones = ListarDeltasDeFormulacion("*", dFechaIni.ToString("yyyy-MM-dd"), fecha, "");
                List<Formulacion> oFormulaciones = ListarDeltasDeFormulacionParaReportesFinales("*", dFechaIni.ToString("yyyy-MM-dd"), fecha, "");
                List<FactorFormulacion> oFactores = ListarFactoresDeFormulacionEnRangoFecha(dFechaIni.ToString("yyyy-MM-dd"), fecha);

                //solo se muestran las fechas del mes actual
                DateTime dFechaIniMes = ldt_Date.AddDays(-(ldt_Date.Day-1));
                DateTime dFechaTemp = dFechaIniMes;
                int i = 1;

                while (dFechaTemp <= ldt_Date)
                {
                    oElementoFAC = new ElementoFAC();
                    oElementoFAC.Fecha = dFechaTemp.ToString("yyyy-MM-dd");

                    FactorFormulacion oFactor = null;
                    Formulacion oFormulacion = null;


                    //41X.LHV.Pulv.Fuel.Btu
                    oElementoFAC.LHV_Pulv_Fuel_Btu = "";
                    oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.Pulv.Fuel.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                    //oFactor = oFactores.FirstOrDefault(x => x.Nombre == "322.Factor1" && Convert.ToDateTime(x.Fecha) <= dFechaTemp); 
                    if (i == 1)
                    {
                        //traemos cabecera
                        oCabeceraFAC = new CabeceraFAC();                    
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 1;
                        oCabeceraFAC.Titulo = "";
                        
                        if (oFactor != null)
                        {
                            oCabeceraFAC.Titulo = oFactor.Titulo;
                            oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFactor != null)
                        {
                            oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                        }
                    }
                    


                    //41X.LHV.NaturalGas.Btu
                    oElementoFAC.LHV_NaturalGas_Btu = "";
                    oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.NaturalGas.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                    if (i == 1)
                    {
                        //traemos cabecera
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 2;
                        oCabeceraFAC.Titulo = "";

                        if (oFactor != null)
                        {
                            oCabeceraFAC.Titulo = oFactor.Titulo;
                            oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFactor != null)
                        {
                            oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                        }
                    }
                


                    //41X.CLISI2
                    oElementoFAC._41X_CLISI2_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI2");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 3;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);                 
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }
                    


                    //41X.CLISI3
                    oElementoFAC._41X_CLISI3_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI3");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 4;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }
                    


                    //41X.CLISI100
                    oElementoFAC._41X_CLISI100_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI100");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 5;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }
                    


                    //41X.CLISI10
                    oElementoFAC._41X_CLISI10_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI10");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 6;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI10_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI10_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }
                    


                    //41X.CLISI55
                    oElementoFAC._41X_CLISI55_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI55");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 7;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }
                    


                    //41X.CLISI5
                    oElementoFAC._41X_CLISI5_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI5");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 8;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI5_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI5_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }
                   


                    //41X.CLIS12
                    oElementoFAC._41X_CLIS12_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 9;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLIS12_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLIS12_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }
                    


                    //SUMARIZADO DEL MES: 41X.CLIS12
                    oElementoFAC.Clinker_Production_MTD = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (oFormulacion != null)
                    {
                        List<Delta> oDeltas = oFormulacion.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= dFechaIniMes && Convert.ToDateTime(x.Fecha) <= dFechaTemp && x.Valor.Trim() != "").ToList();
                        decimal nSuma = oDeltas.Sum(x => Convert.ToDecimal(x.Valor.Replace(",","")));
                        oElementoFAC.Clinker_Production_MTD = nSuma.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 2;
                        oCabeceraFAC.Orden = 10;
                        oCabeceraFAC.Titulo = "CLINKER PRODUCTION";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL AÑO: 41X.CLIS12
                    oElementoFAC.Clinker_Production_YTD = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (oFormulacion != null)
                    {
                        List<Delta> oDeltas = oFormulacion.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= dFechaIni && Convert.ToDateTime(x.Fecha) <= dFechaTemp && x.Valor.Trim() != "").ToList();
                        decimal nSuma = oDeltas.Sum(x => Convert.ToDecimal(x.Valor.Replace(",", "")));
                        oElementoFAC.Clinker_Production_YTD = nSuma.ToString("###,###,###");
                    }


                    //DIARIO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_Today = "";
                    if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" && oElementoFAC._41X_CLISI2_Total.Trim() != "" && oElementoFAC._41X_CLISI3_Total.Trim()!="" &&
                        oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" && oElementoFAC._41X_CLISI100_Total.Trim() != "" && oElementoFAC._41X_CLISI55_Total.Trim() != "")
                    {
                        double nValor_LHV_Pulv_Fuel_Btu = Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                        double nValor_41X_CLISI2_Total = Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                        double nValor_41X_CLISI3_Total = Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                        double nValor_LHV_NaturalGas_Btu = Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                        double nValor_41X_CLISI100_Total = Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                        double nValor_41X_CLISI55_Total = Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));

                        //double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 6) +
                        //                nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI55_Total) / Math.Pow(10, 6);

                        
                        Funciones.CapturarMensaje("Fecha: " + dFechaTemp.ToString("yyyy-MM-dd"));
                        Funciones.CapturarMensaje("LHV_Pulv_Fuel_Btu: " + nValor_LHV_Pulv_Fuel_Btu.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI2_Total: " + nValor_41X_CLISI2_Total.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI3_Total: " + nValor_41X_CLISI3_Total.ToString());
                        Funciones.CapturarMensaje("nValor_LHV_NaturalGas_Btu: " + nValor_LHV_NaturalGas_Btu.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI100_Total: " + nValor_41X_CLISI100_Total.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI55_Total: " + nValor_41X_CLISI55_Total.ToString());

                        double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000  +
                                         nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI55_Total)) / Math.Pow(10, 6);

                        Funciones.CapturarMensaje("nValor: " + nValor.ToString());

                        oElementoFAC.Process_MMBTU_Today = nValor.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 11;
                        oCabeceraFAC.Titulo = "PROCESS MMBTU";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    

                    //SUMARIZADO DEL MES: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_MTD = Obtener_Process_MMBTU(oFormulaciones, oFactores, dFechaIniMes, dFechaTemp);

                    //SUMARIZADO DEL AÑO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_YTD = Obtener_Process_MMBTU(oFormulaciones, oFactores, dFechaIni, dFechaTemp);


                    ////DIARIO:  LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    ////         LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    //oElementoFAC.Total_MMBTU_Today = "";
                    //if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" && oElementoFAC._41X_CLISI2_Total.Trim() != "" && oElementoFAC._41X_CLISI3_Total.Trim() != "" &&
                    //    oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" && oElementoFAC._41X_CLISI100_Total.Trim() != "" && oElementoFAC._41X_CLISI10_Total.Trim() != "" &&
                    //    oElementoFAC._41X_CLISI55_Total.Trim() != "" && oElementoFAC._41X_CLISI5_Total.Trim() != "")
                    //{
                    //    double nValor_LHV_Pulv_Fuel_Btu = Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                    //    double nValor_41X_CLISI2_Total = Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI3_Total = Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                    //    double nValor_LHV_NaturalGas_Btu = Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                    //    double nValor_41X_CLISI100_Total = Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI10_Total = Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI55_Total = Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI5_Total = Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                    //    //double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 5) +
                    //    //                nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total) / Math.Pow(10, 5);

                    //    double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000  +
                    //                    nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total)) / Math.Pow(10, 6);

                    //    oElementoFAC.Total_MMBTU_Today = nValor.ToString("###,###,###.00");
                    //}


                    //DIARIO:  LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //         LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_Today = "";
                    if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" || oElementoFAC._41X_CLISI2_Total.Trim() != "" || oElementoFAC._41X_CLISI3_Total.Trim() != "" ||
                        oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" || oElementoFAC._41X_CLISI100_Total.Trim() != "" || oElementoFAC._41X_CLISI10_Total.Trim() != "" ||
                        oElementoFAC._41X_CLISI55_Total.Trim() != "" || oElementoFAC._41X_CLISI5_Total.Trim() != "")
                    {
                        double nValor_LHV_Pulv_Fuel_Btu = oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                        double nValor_41X_CLISI2_Total = oElementoFAC._41X_CLISI2_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                        double nValor_41X_CLISI3_Total = oElementoFAC._41X_CLISI3_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                        double nValor_LHV_NaturalGas_Btu = oElementoFAC.LHV_NaturalGas_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                        double nValor_41X_CLISI100_Total = oElementoFAC._41X_CLISI100_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                        double nValor_41X_CLISI10_Total = oElementoFAC._41X_CLISI10_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                        double nValor_41X_CLISI55_Total = oElementoFAC._41X_CLISI55_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                        double nValor_41X_CLISI5_Total = oElementoFAC._41X_CLISI5_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                        double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 +
                                        nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total)) / Math.Pow(10, 6);

                        oElementoFAC.Total_MMBTU_Today = nValor.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 12;
                        oCabeceraFAC.Titulo = "TOTAL MMBTU";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL MES: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //                    LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_MTD = Obtener_Total_MMBTU(oFormulaciones, oFactores, dFechaIniMes, dFechaTemp);

                    //SUMARIZADO DEL AÑO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //                    LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_YTD = Obtener_Total_MMBTU(oFormulaciones, oFactores, dFechaIni, dFechaTemp);


                    //DIARIO: Process_MMBTU_Today/41X.CLIS12
                    oElementoFAC.Process_MMBTU_Ton_Today = "";
                    if (oElementoFAC.Process_MMBTU_Today.Trim() != "" && oElementoFAC._41X_CLIS12_Total.Trim() != "")
                    {
                        double nValor_Process_MMBTU_Today= Convert.ToDouble(oElementoFAC.Process_MMBTU_Today.Replace(",", ""));
                        double nValor_41X_CLIS12_Total = Convert.ToDouble(oElementoFAC._41X_CLIS12_Total.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_41X_CLIS12_Total != 0)
                        {
                            nValor = nValor_Process_MMBTU_Today / nValor_41X_CLIS12_Total;
                        }
                        
                        oElementoFAC.Process_MMBTU_Ton_Today = nValor.ToString("###,###,###.00");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 13;
                        oCabeceraFAC.Titulo = "PROCESS MMBTU/TON";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //MENSUAL: Process_MMBTU_MTD/Clinker_Production_MTD
                    oElementoFAC.Process_MMBTU_Ton_MTD = "";
                    if (oElementoFAC.Process_MMBTU_MTD.Trim() != "" && oElementoFAC.Clinker_Production_MTD.Trim() != "")
                    {
                        double nValor_Process_MMBTU_MTD = Convert.ToDouble(oElementoFAC.Process_MMBTU_MTD.Replace(",", ""));
                        double nValor_Clinker_Production_MTD = Convert.ToDouble(oElementoFAC.Clinker_Production_MTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_MTD != 0)
                        {
                            nValor = nValor_Process_MMBTU_MTD / nValor_Clinker_Production_MTD;
                        }

                        oElementoFAC.Process_MMBTU_Ton_MTD = nValor.ToString("###,###,###.00");
                    }


                    //ANUAL: Process_MMBTU_YTD/Clinker_Production_YTD
                    oElementoFAC.Process_MMBTU_Ton_YTD = "";
                    if (oElementoFAC.Process_MMBTU_YTD.Trim() != "" && oElementoFAC.Clinker_Production_YTD.Trim() != "")
                    {
                        double nValor_Process_MMBTU_YTD = Convert.ToDouble(oElementoFAC.Process_MMBTU_YTD.Replace(",", ""));
                        double nValor_Clinker_Production_YTD = Convert.ToDouble(oElementoFAC.Clinker_Production_YTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_YTD != 0)
                        {
                            nValor = nValor_Process_MMBTU_YTD / nValor_Clinker_Production_YTD;
                        }

                        oElementoFAC.Process_MMBTU_Ton_YTD = nValor.ToString("###,###,###.00");
                    }

                    //DIARIO: Total_MMBTU_Today/41X.CLIS12
                    oElementoFAC.Total_MMBTU_Ton_Today = "";
                    if (oElementoFAC.Total_MMBTU_Today.Trim() != "" && oElementoFAC._41X_CLIS12_Total.Trim() != "")
                    {
                        double nValor_Total_MMBTU_Today = Convert.ToDouble(oElementoFAC.Total_MMBTU_Today.Replace(",", ""));
                        double nValor_41X_CLIS12_Total = Convert.ToDouble(oElementoFAC._41X_CLIS12_Total.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_41X_CLIS12_Total != 0)
                        {
                            nValor = nValor_Total_MMBTU_Today / nValor_41X_CLIS12_Total;
                        }

                        oElementoFAC.Total_MMBTU_Ton_Today = nValor.ToString("###,###,###.00");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 14;
                        oCabeceraFAC.Titulo = "TOTAL MMBTU/TON";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }

                    //MENSUAL: Total_MMBTU_MTD/Clinker_Production_MTD
                    oElementoFAC.Total_MMBTU_Ton_MTD = "";
                    if (oElementoFAC.Total_MMBTU_MTD.Trim() != "" && oElementoFAC.Clinker_Production_MTD.Trim() != "")
                    {
                        double nValor_Total_MMBTU_MTD = Convert.ToDouble(oElementoFAC.Total_MMBTU_MTD.Replace(",", ""));
                        double nValor_Clinker_Production_MTD = Convert.ToDouble(oElementoFAC.Clinker_Production_MTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_MTD != 0)
                        {
                            nValor = nValor_Total_MMBTU_MTD / nValor_Clinker_Production_MTD;
                        }

                        oElementoFAC.Total_MMBTU_Ton_MTD = nValor.ToString("###,###,###.00");
                    }

                    //ANUAL: Total_MMBTU_YTD/Clinker_Production_YTD
                    oElementoFAC.Total_MMBTU_Ton_YTD = "";
                    if (oElementoFAC.Total_MMBTU_YTD.Trim() != "" && oElementoFAC.Clinker_Production_YTD.Trim() != "")
                    {
                        double nValor_Total_MMBTU_YTD = Convert.ToDouble(oElementoFAC.Total_MMBTU_YTD.Replace(",", ""));
                        double nValor_Clinker_Production_YTD = Convert.ToDouble(oElementoFAC.Clinker_Production_YTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_YTD != 0)
                        {
                            nValor = nValor_Total_MMBTU_YTD / nValor_Clinker_Production_YTD;
                        }

                        oElementoFAC.Total_MMBTU_Ton_YTD = nValor.ToString("###,###,###.00");
                    }



                    oElementosFAC.Add(oElementoFAC);
                    dFechaTemp = dFechaTemp.AddDays(1);
                    i = i + 1;
                }

                oFAC.Cabeceras = oCabecerasFAC.OrderBy(x => x.Orden).ToList();
                oFAC.Elementos = oElementosFAC;
                return oFAC;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFAC", "wsUNACEMPI", false);
                oFAC = new FAC();
                oFAC.Cabeceras = new List<CabeceraFAC>();
                oFAC.Elementos = new List<ElementoFAC>();
                return oFAC;
            }

        }


        public FAC ObtenerFAC(string fecha)
        {
            FAC oFAC = new FAC();
            oFAC.Cabeceras = new List<CabeceraFAC>();
            oFAC.Elementos = new List<ElementoFAC>();

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFAC", "wsUNACEMPI", false);
                return oFAC;
            }

            try 
            {
                DateTime dFechaIniMes = ldt_Date.AddDays(-(ldt_Date.Day - 1));
                oFAC = ObtenerFACEnRangoFechaDeMes(dFechaIniMes.ToString("yyyy-MM-dd"), fecha);
                return oFAC;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFAC", "wsUNACEMPI", false);
                oFAC = new FAC();
                oFAC.Cabeceras = new List<CabeceraFAC>();
                oFAC.Elementos = new List<ElementoFAC>();
                return oFAC;
            }

        }


        public List<Formulacion> ListarDeltasDeFormulacionOriginales(string template, string fechaini, string fechafin, string maquina)
        {
            List<Formulacion> oFormulaciones = new List<Formulacion>();
            Formulacion oFormulacion = new Formulacion();
            Delta oDelta = new Delta();

            //string cDominio = WebConfigurationManager.AppSettings["dominio"];
            //string cUsuario = WebConfigurationManager.AppSettings["usuario"];
            //string cPassword = WebConfigurationManager.AppSettings["password"];

            DateTime ldt_Date_Ini;
            try
            {
                ldt_Date_Ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDeltasDeFormulacionOriginales", "wsUNACEMPI", false);
                return new List<Formulacion>();
            }

            DateTime ldt_Date_Fin;
            try
            {
                ldt_Date_Fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDeltasDeFormulacionOriginales", "wsUNACEMPI", false);
                return new List<Formulacion>();
            }

            try
            {
                String cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                String cDatabase = WebConfigurationManager.AppSettings["database"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];

                //NetworkCredential oCredencial = new NetworkCredential(cUsuario, cPassword, cDominio);
                //oPI.Connect(oCredencial);
                oPI.Connect();

                AFDatabase oDB = oPI.Databases[cDatabase];

                string cRutaMaquina = "";
                if (maquina.Trim() != "")
                {

                    //buscamos elemento maquina
                    var oSearchMaquina = new AFElementSearch(oDB, "BuscarMaquina", @"Root:'' Name:='" + maquina.Trim() + "' TemplateName:='Equipment'");
                    foreach (AFElement oMaquina in oSearchMaquina.FindElements(fullLoad: true))
                    {
                        cRutaMaquina = oMaquina.GetPath();
                        cRutaMaquina = cRutaMaquina.Replace(@"\\" + cServidorPIAF + @"\" + cDatabase + @"\", "");
                        break;
                    }

                    //cRutaMaquina = @"DOR\" + maquina;
                    //cRutaMaquina =  maquina;
                }

                var oSearch = new AFElementSearch(oDB, "Buscar", @"Root:'" + cRutaMaquina + "' TemplateName:='Counter Formulation'");
                IEnumerable<AFElement> oElementosProductos = oSearch.FindElements(fullLoad: true);

                //creamos los elementos formulacion aun sin los deltas
                foreach (AFElement oAFElement in oElementosProductos)
                {
                    if (template == "*" || oAFElement.Attributes[template].GetValue().ValueAsInt32() == 1)
                    {
                        string cTagContador = "";
                        if (oAFElement.Attributes["Contador"].DataReference != null)
                        {
                            cTagContador = oAFElement.Attributes["Contador"].DataReference.ToString();
                            cTagContador = cTagContador.Substring(cTagContador.LastIndexOf(@"\") + 1);
                        }

                        string cTagDelta = "";
                        if (oAFElement.Attributes["DeltaRawData"].DataReference != null)
                        {
                            cTagDelta = oAFElement.Attributes["DeltaRawData"].DataReference.ToString();
                            cTagDelta = cTagDelta.Substring(cTagDelta.LastIndexOf(@"\") + 1);
                        }

                        string cTagDeltaManual = "";
                        if (oAFElement.Attributes["DeltaManualDataEntry"].DataReference != null)
                        {
                            cTagDeltaManual = oAFElement.Attributes["DeltaManualDataEntry"].DataReference.ToString();
                            cTagDeltaManual = cTagDeltaManual.Substring(cTagDeltaManual.LastIndexOf(@"\") + 1);
                        }

                        oFormulacion = new Formulacion();
                        oFormulacion.EsFactor = "N";
                        oFormulacion.Nombre = oAFElement.Name;
                        oFormulacion.TagContador = cTagContador;
                        oFormulacion.TagDelta = cTagDelta;
                        oFormulacion.TagDeltaManual = cTagDeltaManual;
                        oFormulacion.Factor = oAFElement.Attributes["Factor"].GetValue().ValueAsDouble();
                        oFormulacion.Titulo = oAFElement.Attributes["Title RD"].GetValue().ToString();
                        oFormulacion.Orden = oAFElement.Attributes["Order"].GetValue().ValueAsInt32();
                     
                        oFormulacion.OrdenExport = 0;
                        if (template == "*")
                        {
                            oFormulacion.OrdenExport = oAFElement.Attributes["Order Export"].GetValue().ValueAsInt32();
                        }
                        else
                        {
                            if (oAFElement.Attributes["Order Export " + template] != null)
                            {
                                oFormulacion.OrdenExport = oAFElement.Attributes["Order Export " + template].GetValue().ValueAsInt32();
                            }
                        }

                        oFormulacion.Rounding = oAFElement.Attributes["Rounding"].GetValue().ValueAsInt32();
                        oFormulacion.Deltas = new List<Delta>();
                        oFormulaciones.Add(oFormulacion);
                    }
                }


                //OBTENEMOS LOS VALORES DELTAS ORIGINALES

                IEnumerable<AFAttribute> attributes = oElementosProductos.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList = new AFAttributeList(attributes);

                IEnumerable<AFAttribute> attributesFiltered = attributeList.Where(a => a.Name.ToUpper() == "DeltaRawData".ToUpper());
                AFAttributeList attributeListFiltered = new AFAttributeList(attributesFiltered);

                AFListData oData = attributeListFiltered.Data;

                // Results should be sent back for 100 tags in each page.
                PIPagingConfiguration config = new PIPagingConfiguration(PIPageType.TagCount, 100);
                config.OperationTimeoutOverride = new TimeSpan(2, 0, 0);

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempoIni = new AFTime(ldt_Date_Ini.ToUniversalTime());
                AFTime oTiempoFin = new AFTime(ldt_Date_Fin.ToUniversalTime());
                AFTimeRange oTiempoRango = new AFTimeRange(oTiempoIni, oTiempoFin);


                //traemos los datos
                IEnumerable<AFValues> listResults = oData.RecordedValues(oTiempoRango, AFBoundaryType.Inside, null, false, config);

                foreach (AFValues oAFValores in listResults)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {

                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException")
                            {
                                continue;
                            }

                            oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == oAFValor.Attribute.Element.Name);

                            if (oFormulacion != null)
                            {
                                oDelta = new Delta();
                                oDelta.Fecha = oAFValor.Timestamp.LocalTime.ToString("yyyy-MM-dd");
                                oDelta.Modificado = "N";
                                oDelta.Factor = oFormulacion.Factor;

                                int nRounding = oAFValor.Attribute.Element.Attributes["Rounding"].GetValue().ValueAsInt32();
                                string cCeros = "";
                                if (nRounding > 0)
                                {
                                    cCeros = "." + new StringBuilder(nRounding).Insert(0, "0", nRounding).ToString();
                                }
                                oDelta.Valor = Math.Round(oAFValor.ValueAsDouble(), 2, MidpointRounding.AwayFromZero).ToString("###,###,##0" + cCeros);

                                oFormulacion.Deltas.Add(oDelta);
                            }
                        }
                        catch (Exception ex2)
                        {
                            continue;
                        }

                    }
                }

                //validamos si cada formulacion tiene deltas para todas las fechas del rango, si no le agregamos
                DateTime ldt_Date_Temp = ldt_Date_Ini;
                while (ldt_Date_Temp <= ldt_Date_Fin)
                {
                    foreach (Formulacion oFormulacionTemp in oFormulaciones)
                    {
                        string cFechaTemp = ldt_Date_Temp.ToString("yyyy-MM-dd");
                        Delta oDeltaTemp = oFormulacionTemp.Deltas.FirstOrDefault(x => x.Fecha == cFechaTemp);
                        if (oDeltaTemp == null)
                        {
                            oDeltaTemp = new Delta();
                            oDeltaTemp.Fecha = cFechaTemp;
                            oDeltaTemp.Valor = "";
                            oDeltaTemp.Modificado = "N";
                            oDeltaTemp.Factor = oFormulacionTemp.Factor;
                            oFormulacionTemp.Deltas.Add(oDeltaTemp);
                        }
                    }

                    ldt_Date_Temp = ldt_Date_Temp.AddDays(1);
                }

                //ordenamos los deltas de cada formulacion por la fecha
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    oFormulacionTemp.Deltas = oFormulacionTemp.Deltas.OrderBy(x => x.Fecha).ToList();
                }


                //OBTENEMOS LOS FACTORES 
                var oSearchFactores = new AFElementSearch(oDB, "Buscar", @"Root:'' TemplateName:='Factor Input'");
                IEnumerable<AFElement> oElementosFactores = oSearchFactores.FindElements(fullLoad: true);

                //creamos los elementos factores
                foreach (AFElement oAFElement in oElementosFactores)
                {
                    if (template == "*" || oAFElement.Attributes[template].GetValue().ValueAsInt32() == 1)
                    {
                        string cTagFactor = "";
                        if (oAFElement.Attributes["Factor"].DataReference != null)
                        {
                            cTagFactor = oAFElement.Attributes["Factor"].DataReference.ToString();
                            cTagFactor = cTagFactor.Substring(cTagFactor.LastIndexOf(@"\") + 1);
                        }

                        oFormulacion = new Formulacion();
                        oFormulacion.EsFactor = "S";
                        oFormulacion.Nombre = oAFElement.Name;
                        oFormulacion.TagContador = cTagFactor;
                        oFormulacion.TagDelta = "";
                        oFormulacion.TagDeltaManual = "";
                        oFormulacion.Factor = 1;
                        oFormulacion.Titulo = oAFElement.Attributes["Title RD"].GetValue().ToString();
                        oFormulacion.Orden = oAFElement.Attributes["Order"].GetValue().ValueAsInt32();

                        oFormulacion.OrdenExport = 0;
                        if (template == "*")
                        {
                            oFormulacion.OrdenExport = oAFElement.Attributes["Order Export"].GetValue().ValueAsInt32();
                        }
                        else
                        {
                            if (oAFElement.Attributes["Order Export " + template] != null)
                            {
                                oFormulacion.OrdenExport = oAFElement.Attributes["Order Export " + template].GetValue().ValueAsInt32();
                            }
                        }

                        oFormulacion.Rounding = oAFElement.Attributes["Rounding"].GetValue().ValueAsInt32();
                        oFormulacion.Deltas = new List<Delta>();
                        oFormulaciones.Add(oFormulacion);
                    }
                }


                //OBTENEMOS LOS VALORES DE LOS FACTORES
                IEnumerable<AFAttribute> attributesFactores = oElementosFactores.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeListFactores = new AFAttributeList(attributesFactores);

                IEnumerable<AFAttribute> attributesFilteredFactores = attributeListFactores.Where(a => a.Name.ToUpper() == "Factor".ToUpper());
                AFAttributeList attributeListFilteredFactores = new AFAttributeList(attributesFilteredFactores);

                AFListData oDataFactores = attributeListFilteredFactores.Data;

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                //traemos los datos
                IEnumerable<AFValues> listResultsFactores = oDataFactores.RecordedValues(oTiempoRango, AFBoundaryType.Outside, null, false, config);

                foreach (AFValues oAFValores in listResultsFactores)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {
                            if (oAFValor.Attribute.Element.Name == "322.Factor1")
                            {
                                int s = 0;
                            }
                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException")
                            {
                                continue;
                            }

                            oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == oAFValor.Attribute.Element.Name);

                            if (oFormulacion != null)
                            {
                                oDelta = new Delta();
                                oDelta.Fecha = oAFValor.Timestamp.LocalTime.ToString("yyyy-MM-dd");
                                oDelta.Modificado = "N";
                                oDelta.Factor = 1;

                                int nRounding = oAFValor.Attribute.Element.Attributes["Rounding"].GetValue().ValueAsInt32();
                                string cCeros = "";
                                if (nRounding > 0)
                                {
                                    cCeros = "." + new StringBuilder(nRounding).Insert(0, "0", nRounding).ToString();
                                }
                                oDelta.Valor = Math.Round(oAFValor.ValueAsDouble(), 2, MidpointRounding.AwayFromZero).ToString("###,###,##0" + cCeros);

                                oFormulacion.Deltas.Add(oDelta);
                            }
                        }
                        catch (Exception ex2)
                        {
                            continue;
                        }

                    }
                }

                //validamos si cada formulacion de factores tiene deltas para todas las fechas del rango, si no le agregamos
                ldt_Date_Temp = ldt_Date_Ini;
                while (ldt_Date_Temp <= ldt_Date_Fin)
                {
                    foreach (Formulacion oFormulacionTemp in oFormulaciones)
                    {
                        if (oFormulacionTemp.EsFactor == "S")
                        {
                            string cFechaTemp = ldt_Date_Temp.ToString("yyyy-MM-dd");
                            Delta oDeltaTemp = oFormulacionTemp.Deltas.FirstOrDefault(x => x.Fecha == cFechaTemp);
                            if (oDeltaTemp == null)
                            {
                                oDeltaTemp = new Delta();
                                oDeltaTemp.Fecha = cFechaTemp;
                                oDeltaTemp.Valor = "";
                                oDeltaTemp.Modificado = "N";
                                oDeltaTemp.Factor = oFormulacionTemp.Factor;
                                oFormulacionTemp.Deltas.Add(oDeltaTemp);
                            }
                        }
                    }

                    ldt_Date_Temp = ldt_Date_Temp.AddDays(1);
                }

                //ordenamos los deltas de cada formulacion de factors por la fecha
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    if (oFormulacionTemp.EsFactor == "S")
                    {
                        oFormulacionTemp.Deltas = oFormulacionTemp.Deltas.OrderBy(x => x.Fecha).ToList();
                    }
                }

                //agreagamos los valores a factores que tienen valor vacio
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    if (oFormulacionTemp.EsFactor == "S")
                    {
                        string cValorUltimo = "";
                        foreach (Delta oDeltaTemp in oFormulacionTemp.Deltas)
                        {
                            if (oDeltaTemp.Valor == "")
                            {
                                oDeltaTemp.Valor = cValorUltimo;
                            }
                            else
                            {
                                cValorUltimo = oDeltaTemp.Valor;
                            }
                        }
                    }
                }

                //filtramos los deltas de factores para que solo contengan datos en el rango de fecha solicitado
                foreach (Formulacion oFormulacionTemp in oFormulaciones)
                {
                    if (oFormulacionTemp.EsFactor == "S")
                    {
                        oFormulacionTemp.Deltas = oFormulacionTemp.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= ldt_Date_Ini && Convert.ToDateTime(x.Fecha) <= ldt_Date_Fin).ToList();
                    }
                }



                //ordenamos las formulaciones en general
                List<Formulacion> oFormulacionesOrdenadas = oFormulaciones.OrderBy(x => x.Orden).ToList();


                return oFormulacionesOrdenadas;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarDeltasDeFormulacionOriginales", "wsUNACEMPI", false);
                return new List<Formulacion>();
            }
        }


        public Resultado GenerarRDPDrakeEnRangoFechas(string fechaini, string fechafin)
        {
            Resultado oResultado = new Resultado();
            oResultado.codigo = 0;

            DateTime ldt_Date_ini;
            try
            {
                ldt_Date_ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - GenerarRDPDrakeEnRangoFechas", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            DateTime ldt_Date_fin;
            try
            {
                ldt_Date_fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - GenerarRDPDrakeEnRangoFechas", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            if (ldt_Date_ini > ldt_Date_fin)
            {
                return new Resultado(-1, "The start date cannot be greater than the end date");
            }

            DateTime ldt_Date_temp = ldt_Date_ini;
            while (ldt_Date_temp <= ldt_Date_fin)
            {
                try
                {
                    common.Resultado oResultadoItem = RPD.CalcularDeltasDrake(ldt_Date_temp);

                    if (oResultadoItem.nCodigo != 0)
                    {
                        oResultado.codigo = -1;
                        oResultado.descripcion = oResultado.descripcion + "* " + ldt_Date_temp.ToString("yyyy-MM-dd") + ": Error processing the day. " + oResultadoItem.cDescripcion + "\n";                      
                    }
                    else
                    {
                        oResultado.descripcion = oResultado.descripcion + "* " + ldt_Date_temp.ToString("yyyy-MM-dd") + ": Processed the day successfully." + "\n";
                    }             
                }
                catch (Exception ex)
                {
                    oResultado.descripcion = oResultado.descripcion + "* " + ldt_Date_temp.ToString("yyyy-MM-dd") + ": Error processing the day. " + ex.Message + "\n";
                    Funciones.CapturarError(ex, "Operaciones.svc - GenerarRDPDrakeEnRangoFechas", "wsUNACEMPI", false);
                }

                ldt_Date_temp = ldt_Date_temp.AddDays(1);
            }

            return oResultado;

        }


        public Resultado RestaurarDelta(EntradaRestaurarDelta oEntradaRestaurarDelta)
        {
            DateTime ldt_Date;
            Resultado oResultado = new Resultado();

            String cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
            string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
            string cDatabase = WebConfigurationManager.AppSettings["database"];

            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(oEntradaRestaurarDelta.Fecha.Substring(0, 4)),
                                        Convert.ToInt32(oEntradaRestaurarDelta.Fecha.Substring(5, 2)),
                                        Convert.ToInt32(oEntradaRestaurarDelta.Fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RestaurarDelta", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                //elminamos valor del delta manual
                common.Resultado oResultadoRestaurar = ModPIExtFunctions.EliminarValorTag(cServidorPIData, oEntradaRestaurarDelta.TagDeltaManual, ldt_Date);
        
                if (oResultadoRestaurar.nCodigo != 0)
                {
                    return new Resultado(-1, oResultadoRestaurar.cDescripcion);
                }

                //copiamos valor del delta original al delta manual
                AFValue oAFValorOriginal = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, oEntradaRestaurarDelta.TagDeltaOriginal, ldt_Date);
                if (oAFValorOriginal != null)
                {
                    if (oAFValorOriginal.Value.GetType().Name == "AFEnumerationValue" ||
                        oAFValorOriginal.Value.GetType().BaseType.Name == "PIException" ||
                        oAFValorOriginal.Value.GetType().BaseType.Name == "SystemException")
                    {
                        return new Resultado(0, "Se elimino el valor del tag manual pero el valor del tag original devolvió una excepcion");
                    }

                    double nValor = oAFValorOriginal.ValueAsDouble();
                    ModPIExtFunctions.Write_Value_PI(cServidorPIData, oEntradaRestaurarDelta.TagDeltaManual, ldt_Date, nValor, true);
                }
                else
                {
                    return new Resultado(0, "Se elimino el valor del tag manual pero el valor del tag original devolvió un valor nulo");
                }

                return new Resultado(0, "Operacion Exitosa");
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RestaurarDelta", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

        }


        public List<BloqueDOR> ObtenerDOROriginal(string fecha)
        {
            List<BloqueDOR> oBloquesDOR = new List<BloqueDOR>();
            string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
            double sumaPorcentajes = 0;

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerDOROriginal", "wsUNACEMPI", false);
                return new List<BloqueDOR>();
            }

            try
            {
                //DateTime dFechaIni = new DateTime(DateTime.Now.Year, 1, 1);
                DateTime dFechaIni = new DateTime(ldt_Date.Year, 1, 1);
                List<Formulacion> oFormulaciones = ListarDeltasDeFormulacionOriginales("*", dFechaIni.ToString("yyyy-MM-dd"), fecha, "");

                FAC oFAC = ObtenerFACOriginalEnRangoFechaDeMes(fecha, fecha);



                // 1.) BLOQUE CRUSHER - LowLimestone
                BloqueDOR oBloqueDOR_1 = new BloqueDOR();
                oBloqueDOR_1.Nombre = "CRUSHER LowLimestone";
                oBloqueDOR_1.Orden = 1;
                oBloqueDOR_1.CssClass = "col-6";
                oBloqueDOR_1.EsUsagePorc = false;
                oBloqueDOR_1.Elementos = new List<ElementoDOR>();

                // 1.1) 21X.ALLSP2
                ElementoDOR oElementoDOR_1_1 = new ElementoDOR();
                oElementoDOR_1_1.Orden = 1;
                oElementoDOR_1_1.Padre = "21X.Crusher.LowLimestone";
                oElementoDOR_1_1.Nombre = "HOURS CRUSHING LOW";
                oElementoDOR_1_1.Origen = "21X.ALLSP2";
                //oElementoDOR_1_1.Origen = "411BL1WT1UM1";
                oElementoDOR_1_1.Unidad = "Hrs.";
                oElementoDOR_1_1 = CalcularElementoDOR(oElementoDOR_1_1, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_1);

                // 1.2) 21X.MGALLSP3
                ElementoDOR oElementoDOR_1_2 = new ElementoDOR();
                oElementoDOR_1_2.Orden = 2;
                oElementoDOR_1_2.Padre = "21X.Crusher.LowLimestone";
                oElementoDOR_1_2.Nombre = "MG STONE";
                oElementoDOR_1_2.Origen = "21X.MGALLSP3";
                //oElementoDOR_1_2.Origen = "5211BL1CNT1C";
                oElementoDOR_1_2.Unidad = "sty";
                oElementoDOR_1_2 = CalcularElementoDOR(oElementoDOR_1_2, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_2);

                // 1.3) 21X.ALLSP4
                ElementoDOR oElementoDOR_1_3 = new ElementoDOR();
                oElementoDOR_1_3.Orden = 3;
                oElementoDOR_1_3.Padre = "21X.Crusher.LowLimestone";
                oElementoDOR_1_3.Nombre = "LOW LIMESTONE";
                oElementoDOR_1_3.Origen = "21X.ALLSP4";
                //oElementoDOR_1_3.Origen = "411BL1WT1UM1";
                oElementoDOR_1_3.Unidad = "sT";
                oElementoDOR_1_3 = CalcularElementoDOR(oElementoDOR_1_3, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_3);


                // 1.4) 21x.ALLSP9.Total
                ElementoDOR oElementoDOR_1_4 = new ElementoDOR();
                oElementoDOR_1_4.Orden = 4;
                oElementoDOR_1_4.Padre = "";
                oElementoDOR_1_4.Nombre = "TOTAL LOW LIMESTONE CRUSHED";
                oElementoDOR_1_4.Origen = "21x.ALLSP9.Total";
                oElementoDOR_1_4.Unidad = "sT";
                oElementoDOR_1_4 = CalcularElementoDOR(oElementoDOR_1_4, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_4);


                //// 1.4) 21X.ALLSP4 + 21X.MGALLSP3
                //ElementoDOR oElementoDOR_1_4 = new ElementoDOR();
                //oElementoDOR_1_4.Orden = 4;
                //oElementoDOR_1_4.Padre = "";
                //oElementoDOR_1_4.Nombre = "TOTAL LOW LIMESTONE CRUSHED";
                //oElementoDOR_1_4.Origen = "21X.ALLSP4 + 21X.MGALLSP3";
                //oElementoDOR_1_4.Unidad = "sT";

                //oElementoDOR_1_4.ValorDia = "";
                //if (!(oElementoDOR_1_3.ValorDia.Trim()=="" && oElementoDOR_1_2.ValorDia.Trim()=="")){
                //    double nValorDia = (oElementoDOR_1_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorDia.Trim().Replace(",", "")));
                //    oElementoDOR_1_4.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_4.ValorMes = "";
                //if (!(oElementoDOR_1_3.ValorMes.Trim() == "" && oElementoDOR_1_2.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorMes.Trim().Replace(",", "")));
                //    oElementoDOR_1_4.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_4.ValorAno = "";
                //if (!(oElementoDOR_1_3.ValorAno.Trim() == "" && oElementoDOR_1_2.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorAno.Trim().Replace(",", "")));
                //    oElementoDOR_1_4.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                //oBloqueDOR_1.Elementos.Add(oElementoDOR_1_4);


                oBloquesDOR.Add(oBloqueDOR_1);





                // 14.) BLOQUE CRUSHER LowLimestone USAGE %
                BloqueDOR oBloqueDOR_14 = new BloqueDOR();
                oBloqueDOR_14.Nombre = "CRUSHER LowLimestone USAGE %";
                oBloqueDOR_14.Orden = 1;
                oBloqueDOR_14.CssClass = "col-6";
                oBloqueDOR_14.EsUsagePorc = true;
                oBloqueDOR_14.Elementos = new List<ElementoDOR>();

                // 14.1) (MG STONE / TOTAL LOW LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_14_1 = new ElementoDOR();
                oElementoDOR_14_1.Orden = 1;
                oElementoDOR_14_1.Padre = "";
                oElementoDOR_14_1.Nombre = "MG STONE";
                oElementoDOR_14_1.Origen = "(MG STONE / TOTAL LOW LIMESTONE CRUSHED) * 100";
                oElementoDOR_14_1.Unidad = "";

                oElementoDOR_14_1.ValorDia = "";
                if (!(oElementoDOR_1_2.ValorDia.Trim() == "" && oElementoDOR_1_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_14_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_14_1.ValorMes = "";
                if (!(oElementoDOR_1_2.ValorMes.Trim() == "" && oElementoDOR_1_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_14_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_14_1.ValorAno = "";
                if (!(oElementoDOR_1_2.ValorAno.Trim() == "" && oElementoDOR_1_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_14_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_14.Elementos.Add(oElementoDOR_14_1);


                // 14.2) (LOW LIMESTONE / TOTAL LOW LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_14_2 = new ElementoDOR();
                oElementoDOR_14_2.Orden = 1;
                oElementoDOR_14_2.Padre = "";
                oElementoDOR_14_2.Nombre = "LOW LIMESTONE";
                oElementoDOR_14_2.Origen = "(LOW LIMESTONE / TOTAL LOW LIMESTONE CRUSHED) * 100";
                oElementoDOR_14_2.Unidad = "";

                oElementoDOR_14_2.ValorDia = "";
                if (!(oElementoDOR_1_3.ValorDia.Trim() == "" && oElementoDOR_1_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_14_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_14_2.ValorMes = "";
                if (!(oElementoDOR_1_3.ValorMes.Trim() == "" && oElementoDOR_1_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_14_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_14_2.ValorAno = "";
                if (!(oElementoDOR_1_3.ValorAno.Trim() == "" && oElementoDOR_1_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_14_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_14.Elementos.Add(oElementoDOR_14_2);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_14_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_14_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_2.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_2.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_3.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_3.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_4.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_14.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_14_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_14_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_2.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_2.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_3.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_3.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_4.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_14.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_14_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_14_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_14_2.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_2.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_3.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_3.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_4.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_14.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                oBloquesDOR.Add(oBloqueDOR_14);



                // 12.) BLOQUE CRUSHER - HighLimestone
                BloqueDOR oBloqueDOR_12 = new BloqueDOR();
                oBloqueDOR_12.Nombre = "CRUSHER HighLimestone";
                oBloqueDOR_12.Orden = 1;
                oBloqueDOR_12.CssClass = "col-6";
                oBloqueDOR_12.EsUsagePorc = false;
                oBloqueDOR_12.Elementos = new List<ElementoDOR>();

                // 1.5) 21X.LIMSP2
                ElementoDOR oElementoDOR_1_5 = new ElementoDOR();
                oElementoDOR_1_5.Orden = 5;
                oElementoDOR_1_5.Padre = "21X.Crusher.HighLimestone";
                oElementoDOR_1_5.Nombre = "HOURS CRUSHING HIGH";
                oElementoDOR_1_5.Origen = "21X.LIMSP2";
                oElementoDOR_1_5.Unidad = "Hrs.";
                oElementoDOR_1_5 = CalcularElementoDOR(oElementoDOR_1_5, oFormulaciones, ldt_Date);
                oBloqueDOR_12.Elementos.Add(oElementoDOR_1_5);

                // 1.6) 21X.LIMSP4
                ElementoDOR oElementoDOR_1_6 = new ElementoDOR();
                oElementoDOR_1_6.Orden = 6;
                oElementoDOR_1_6.Padre = "21X.Crusher.HighLimestone";
                oElementoDOR_1_6.Nombre = "HIGH LIMESTONE";
                oElementoDOR_1_6.Origen = "21X.LIMSP4";
                oElementoDOR_1_6.Unidad = "sT";
                oElementoDOR_1_6 = CalcularElementoDOR(oElementoDOR_1_6, oFormulaciones, ldt_Date);
                oBloqueDOR_12.Elementos.Add(oElementoDOR_1_6);

                // 1.7) 21X.Filter Cake
                ElementoDOR oElementoDOR_1_7 = new ElementoDOR();
                oElementoDOR_1_7.Orden = 7;
                oElementoDOR_1_7.Padre = "21X.Crusher.HighLimestone";
                oElementoDOR_1_7.Nombre = "FILTER CAKE USED IN HIGH LIMESTONE";
                oElementoDOR_1_7.Origen = "21X.Filter Cake";
                oElementoDOR_1_7.Unidad = "sT";
                oElementoDOR_1_7 = CalcularElementoDOR(oElementoDOR_1_7, oFormulaciones, ldt_Date);
                oBloqueDOR_12.Elementos.Add(oElementoDOR_1_7);

                // 1.8) 21X.LIMSP9.Total
                ElementoDOR oElementoDOR_1_8 = new ElementoDOR();
                oElementoDOR_1_8.Orden = 8;
                oElementoDOR_1_8.Padre = "";
                oElementoDOR_1_8.Nombre = "TOTAL HIGH LIMESTONE CRUSHED";
                oElementoDOR_1_8.Origen = "21X.LIMSP9.Total";
                oElementoDOR_1_8.Unidad = "sT";
                oElementoDOR_1_8 = CalcularElementoDOR(oElementoDOR_1_8, oFormulaciones, ldt_Date);
                oBloqueDOR_12.Elementos.Add(oElementoDOR_1_8);

                //// 1.8) 21X.LIMSP4 + 21X.Filter Cake
                //ElementoDOR oElementoDOR_1_8= new ElementoDOR();
                //oElementoDOR_1_8.Orden = 8;
                //oElementoDOR_1_8.Padre = "";
                //oElementoDOR_1_8.Nombre = "TOTAL HIGH LIMESTONE CRUSHED";
                //oElementoDOR_1_8.Origen = "21X.LIMSP4 + 21X.Filter Cake ";
                //oElementoDOR_1_8.Unidad = "sT";

                //oElementoDOR_1_8.ValorDia = "";
                //if (!(oElementoDOR_1_6.ValorDia.Trim() == "" && oElementoDOR_1_7.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = (oElementoDOR_1_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorDia.Trim().Replace(",", "")));
                //    oElementoDOR_1_8.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_8.ValorMes = "";
                //if (!(oElementoDOR_1_6.ValorMes.Trim() == "" && oElementoDOR_1_7.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorMes.Trim().Replace(",", "")));
                //    oElementoDOR_1_8.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_8.ValorAno = "";
                //if (!(oElementoDOR_1_6.ValorAno.Trim() == "" && oElementoDOR_1_7.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorAno.Trim().Replace(",", "")));
                //    oElementoDOR_1_8.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                //oBloqueDOR_12.Elementos.Add(oElementoDOR_1_8);

                oBloquesDOR.Add(oBloqueDOR_12);



                // 15.) BLOQUE CRUSHER HighLimestone USAGE %
                BloqueDOR oBloqueDOR_15 = new BloqueDOR();
                oBloqueDOR_15.Nombre = "CRUSHER HighLimestone USAGE %";
                oBloqueDOR_15.Orden = 1;
                oBloqueDOR_15.CssClass = "col-6";
                oBloqueDOR_15.EsUsagePorc = true;
                oBloqueDOR_15.Elementos = new List<ElementoDOR>();

                // 15.1) (HIGH LIMESTONE / TOTAL HIGH LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_15_1 = new ElementoDOR();
                oElementoDOR_15_1.Orden = 1;
                oElementoDOR_15_1.Padre = "";
                oElementoDOR_15_1.Nombre = "HIGH LIMESTONE";
                oElementoDOR_15_1.Origen = "(HIGH LIMESTONE / TOTAL HIGH LIMESTONE CRUSHED) * 100";
                oElementoDOR_15_1.Unidad = "";

                oElementoDOR_15_1.ValorDia = "";
                if (!(oElementoDOR_1_6.ValorDia.Trim() == "" && oElementoDOR_1_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_15_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_15_1.ValorMes = "";
                if (!(oElementoDOR_1_6.ValorMes.Trim() == "" && oElementoDOR_1_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_15_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_15_1.ValorAno = "";
                if (!(oElementoDOR_1_6.ValorAno.Trim() == "" && oElementoDOR_1_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_15_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_15.Elementos.Add(oElementoDOR_15_1);


                // 15.2) (FILTER CAKE USED IN HIGH LIMESTONE / TOTAL HIGH LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_15_2 = new ElementoDOR();
                oElementoDOR_15_2.Orden = 2;
                oElementoDOR_15_2.Padre = "";
                oElementoDOR_15_2.Nombre = "FILTER CAKE USED IN HIGH LIMESTONE";
                oElementoDOR_15_2.Origen = "(FILTER CAKE USED IN HIGH LIMESTONE / TOTAL HIGH LIMESTONE CRUSHED) * 100";
                oElementoDOR_15_2.Unidad = "";

                oElementoDOR_15_2.ValorDia = "";
                if (!(oElementoDOR_1_7.ValorDia.Trim() == "" && oElementoDOR_1_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_15_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_15_2.ValorMes = "";
                if (!(oElementoDOR_1_7.ValorMes.Trim() == "" && oElementoDOR_1_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_15_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_15_2.ValorAno = "";
                if (!(oElementoDOR_1_7.ValorAno.Trim() == "" && oElementoDOR_1_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_15_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_15.Elementos.Add(oElementoDOR_15_2);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_15_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_15_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_2.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_6.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_6.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_7.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_7.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_8.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_15.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_15_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_15_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_2.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_6.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_6.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_7.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_7.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_8.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_15.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_15_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_15_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_15_2.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_6.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_6.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_7.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_7.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_8.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_15.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                oBloquesDOR.Add(oBloqueDOR_15);




                // 13.) BLOQUE CRUSHER - MixLime
                BloqueDOR oBloqueDOR_13 = new BloqueDOR();
                oBloqueDOR_13.Nombre = "CRUSHER MixLime";
                oBloqueDOR_13.Orden = 1;
                oBloqueDOR_13.CssClass = "col-6";
                oBloqueDOR_13.EsUsagePorc = false;
                oBloqueDOR_13.Elementos = new List<ElementoDOR>();

                // 1.9) 21X.LIMSP8
                ElementoDOR oElementoDOR_1_9 = new ElementoDOR();
                oElementoDOR_1_9.Orden = 9;
                oElementoDOR_1_9.Padre = "21X.Crusher.MixLime";
                oElementoDOR_1_9.Nombre = "HOURS CRUSHING MIX STONE";
                oElementoDOR_1_9.Origen = "21X.LIMSP8";
                oElementoDOR_1_9.Unidad = "Hrs.";
                oElementoDOR_1_9 = CalcularElementoDOR(oElementoDOR_1_9, oFormulaciones, ldt_Date);
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_9);

                // 1.10) 21X.LIMSPMIX_C
                ElementoDOR oElementoDOR_1_10 = new ElementoDOR();
                oElementoDOR_1_10.Orden = 10;
                oElementoDOR_1_10.Padre = "21X.Crusher.MixLime";
                oElementoDOR_1_10.Nombre = "MIXED LIMESTONE  CRUSHED - C PILE";
                oElementoDOR_1_10.Origen = "21X.LIMSPMIX_C";
                oElementoDOR_1_10.Unidad = "sT";
                oElementoDOR_1_10 = CalcularElementoDOR(oElementoDOR_1_10, oFormulaciones, ldt_Date);
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_10);

                // 1.11) 21X.LIMSPMIX_D
                ElementoDOR oElementoDOR_1_11 = new ElementoDOR();
                oElementoDOR_1_11.Orden = 11;
                oElementoDOR_1_11.Padre = "21X.Crusher.MixLime";
                oElementoDOR_1_11.Nombre = "MIXED LIMESTONE  CRUSHED - D PILE";
                oElementoDOR_1_11.Origen = "21X.LIMSPMIX_D";
                oElementoDOR_1_11.Unidad = "sT";
                oElementoDOR_1_11 = CalcularElementoDOR(oElementoDOR_1_11, oFormulaciones, ldt_Date);
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_11);

                // 1.12) 21X.MIXFILTERCAKE
                ElementoDOR oElementoDOR_1_12 = new ElementoDOR();
                oElementoDOR_1_12.Orden = 12;
                oElementoDOR_1_12.Padre = "";
                oElementoDOR_1_12.Nombre = "FILTER CAKE USED IN MIX LIMESTONE";
                oElementoDOR_1_12.Origen = "21X.MIXFILTERCAKE";
                oElementoDOR_1_12.Unidad = "sT";
                oElementoDOR_1_12 = CalcularElementoDOR(oElementoDOR_1_12, oFormulaciones, ldt_Date);
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_12);

                //// 1.12) (21X.LIMSPMIX_C + 21X.LIMSPMIX_D) * FactorFilterCake
                //ElementoDOR oElementoDOR_1_12 = new ElementoDOR();
                //oElementoDOR_1_12.Orden = 12;
                //oElementoDOR_1_12.Padre = "";
                //oElementoDOR_1_12.Nombre = "FILTER CAKE USED IN MIX LIMESTONE";
                //oElementoDOR_1_12.Origen = "(21X.LIMSPMIX_C + 21X.LIMSPMIX_D) * FactorFilterCake";
                //oElementoDOR_1_12.Unidad = "sT";

                //double nFactorFilterCake = 0;
                //string cTag_FactorFilterCake = WebConfigurationManager.AppSettings["Tag_Factor_Filter_Cake"];
                //AFValue oAFValor_FactorFilterCake = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_FactorFilterCake, ldt_Date);
                //if (oAFValor_FactorFilterCake.Value.GetType().Name == "AFEnumerationValue" ||
                //    oAFValor_FactorFilterCake.Value.GetType().BaseType.Name == "PIException" ||
                //    oAFValor_FactorFilterCake.Value.GetType().BaseType.Name == "SystemException")
                //{
                //    nFactorFilterCake = 0;
                //}
                //else
                //{
                //    nFactorFilterCake = oAFValor_FactorFilterCake.ValueAsDouble();
                //}

                //oElementoDOR_1_12.ValorDia = "";
                //if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_11.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", "")));
                //    nValorDia = nValorDia * nFactorFilterCake;
                //    oElementoDOR_1_12.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_12.ValorMes = "";
                //if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_11.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", "")));
                //    nValorMes = nValorMes * nFactorFilterCake;
                //    oElementoDOR_1_12.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_12.ValorAno = "";
                //if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_11.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", "")));
                //    nValorAno = nValorAno * nFactorFilterCake;
                //    oElementoDOR_1_12.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                //oBloqueDOR_13.Elementos.Add(oElementoDOR_1_12);


                // 1.13) 21X.MXTOT9.Total
                ElementoDOR oElementoDOR_1_13 = new ElementoDOR();
                oElementoDOR_1_13.Orden = 13;
                oElementoDOR_1_13.Padre = "";
                oElementoDOR_1_13.Nombre = "TOTAL MIX LIMESTONE CRUSHED";
                oElementoDOR_1_13.Origen = "21X.MXTOT9.Total";
                oElementoDOR_1_13.Unidad = "sT";
                oElementoDOR_1_13 = CalcularElementoDOR(oElementoDOR_1_13, oFormulaciones, ldt_Date);
                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_13);


                //// 1.13) 21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (FILTER CAKE USED IN MIX LIMESTONE)
                //ElementoDOR oElementoDOR_1_13 = new ElementoDOR();
                //oElementoDOR_1_13.Orden = 13;
                //oElementoDOR_1_13.Padre = "";
                //oElementoDOR_1_13.Nombre = "TOTAL MIX LIMESTONE CRUSHED";
                //oElementoDOR_1_13.Origen = "21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (FILTER CAKE USED IN MIX LIMESTONE)";
                //oElementoDOR_1_13.Unidad = "sT";

                //oElementoDOR_1_13.ValorDia = "";
                //if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_11.ValorDia.Trim() == "" && oElementoDOR_1_12.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", "")));
                //    oElementoDOR_1_13.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_13.ValorMes = "";
                //if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_11.ValorMes.Trim() == "" && oElementoDOR_1_12.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", "")));
                //     oElementoDOR_1_13.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_13.ValorAno = "";
                //if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_11.ValorAno.Trim() == "" && oElementoDOR_1_12.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", "")));
                //    oElementoDOR_1_13.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                //oBloqueDOR_13.Elementos.Add(oElementoDOR_1_13);


                // 1.14) TOTAL LOW LIMESTONE CRUSHED + TOTAL HIGH LIMESTONE CRUSHED + TOTAL MIX LIMESTONE CRUSHED
                ElementoDOR oElementoDOR_1_14 = new ElementoDOR();
                oElementoDOR_1_14.Orden = 14;
                oElementoDOR_1_14.Padre = "";
                oElementoDOR_1_14.Nombre = "TOTAL LIMESTONE CRUSHED";
                oElementoDOR_1_14.Origen = "TOTAL LOW LIMESTONE CRUSHED + TOTAL HIGH LIMESTONE CRUSHED + TOTAL MIX LIMESTONE CRUSHED";
                oElementoDOR_1_14.Unidad = "sT";

                oElementoDOR_1_14.ValorDia = "";
                if (!(oElementoDOR_1_4.ValorDia.Trim() == "" && oElementoDOR_1_8.ValorDia.Trim() == "" && oElementoDOR_1_13.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", "")));
                    oElementoDOR_1_14.ValorDia = nValorDia.ToString("###,###,###.00");
                }

                oElementoDOR_1_14.ValorMes = "";
                if (!(oElementoDOR_1_4.ValorMes.Trim() == "" && oElementoDOR_1_8.ValorMes.Trim() == "" && oElementoDOR_1_13.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", "")));
                    oElementoDOR_1_14.ValorMes = nValorMes.ToString("###,###,###.00");
                }

                oElementoDOR_1_14.ValorAno = "";
                if (!(oElementoDOR_1_4.ValorAno.Trim() == "" && oElementoDOR_1_8.ValorAno.Trim() == "" && oElementoDOR_1_13.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", "")));
                    oElementoDOR_1_14.ValorAno = nValorAno.ToString("###,###,###.00");
                }

                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_14);


                //// 1.14) 21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (TOTAL LOW LIMESTONE CRUSHED) + (TOTAL HIGH LIMESTONE CRUSHED) + (FILTER CAKE USED IN MIX LIMESTONE)
                //ElementoDOR oElementoDOR_1_14 = new ElementoDOR();
                //oElementoDOR_1_14.Orden = 14;
                //oElementoDOR_1_14.Padre = "";
                //oElementoDOR_1_14.Nombre = "TOTAL LIMESTONE CRUSHED";
                //oElementoDOR_1_14.Origen = "21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (TOTAL LOW LIMESTONE CRUSHED) + (TOTAL HIGH LIMESTONE CRUSHED) + (FILTER CAKE USED IN MIX LIMESTONE)";
                //oElementoDOR_1_14.Unidad = "sT";

                //oElementoDOR_1_14.ValorDia = "";
                //if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_11.ValorDia.Trim() == "" && oElementoDOR_1_4.ValorDia.Trim() == "" && oElementoDOR_1_8.ValorDia.Trim() == "" && oElementoDOR_1_12.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", "")));
                //    oElementoDOR_1_14.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_14.ValorMes = "";
                //if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_11.ValorMes.Trim() == "" && oElementoDOR_1_4.ValorMes.Trim() == "" && oElementoDOR_1_8.ValorMes.Trim() == "" && oElementoDOR_1_12.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", "")));
                //    oElementoDOR_1_14.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_1_14.ValorAno = "";
                //if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_11.ValorAno.Trim() == "" && oElementoDOR_1_4.ValorAno.Trim() == "" && oElementoDOR_1_8.ValorAno.Trim() == "" && oElementoDOR_1_12.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))) +
                //                       (oElementoDOR_1_12.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", "")));
                //    oElementoDOR_1_14.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                //oBloqueDOR_13.Elementos.Add(oElementoDOR_1_14);



                // 1.15) (TOTAL LIMESTONE CRUSHED) / (21X.ALLSP2 + 21X.LIMSP2 + 21X.LIMSP8)
                ElementoDOR oElementoDOR_1_15 = new ElementoDOR();
                oElementoDOR_1_15.Orden = 15;
                oElementoDOR_1_15.Padre = "";
                oElementoDOR_1_15.Nombre = "PRODUCTION RATE";
                oElementoDOR_1_15.Origen = "(TOTAL LIMESTONE CRUSHED) / (21X.ALLSP2 + 21X.LIMSP2 + 21X.LIMSP8)";
                oElementoDOR_1_15.Unidad = "sT/Hrs.";

                oElementoDOR_1_15.ValorDia = "";
                if (!(oElementoDOR_1_14.ValorDia.Trim() == "" && oElementoDOR_1_1.ValorDia.Trim() == "" && oElementoDOR_1_5.ValorDia.Trim() == "" && oElementoDOR_1_9.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_1.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_5.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_9.ValorDia.Trim().Replace(",", "")));
                    if (nValorDia != 0)
                    {
                        nValorDia = (oElementoDOR_1_14.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_14.ValorDia.Trim().Replace(",", ""))) / nValorDia;
                        oElementoDOR_1_15.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_1_15.ValorMes = "";
                if (!(oElementoDOR_1_14.ValorMes.Trim() == "" && oElementoDOR_1_1.ValorMes.Trim() == "" && oElementoDOR_1_5.ValorDia.Trim() == "" && oElementoDOR_1_9.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_1.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_5.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_9.ValorMes.Trim().Replace(",", "")));
                    if (nValorMes != 0)
                    {
                        nValorMes = (oElementoDOR_1_14.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_14.ValorMes.Trim().Replace(",", ""))) / nValorMes;
                        oElementoDOR_1_15.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_1_15.ValorAno = "";
                if (!(oElementoDOR_1_14.ValorAno.Trim() == "" && oElementoDOR_1_1.ValorAno.Trim() == "" && oElementoDOR_1_5.ValorDia.Trim() == "" && oElementoDOR_1_9.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_1.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_5.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_9.ValorAno.Trim().Replace(",", "")));
                    if (nValorAno != 0)
                    {
                        nValorAno = (oElementoDOR_1_14.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_14.ValorAno.Trim().Replace(",", ""))) / nValorAno;
                        oElementoDOR_1_15.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_13.Elementos.Add(oElementoDOR_1_15);

                oBloquesDOR.Add(oBloqueDOR_13);



                // 16.) BLOQUE CRUSHER MixLime USAGE %
                BloqueDOR oBloqueDOR_16 = new BloqueDOR();
                oBloqueDOR_16.Nombre = "CRUSHER MixLime USAGE %";
                oBloqueDOR_16.Orden = 1;
                oBloqueDOR_16.CssClass = "col-6";
                oBloqueDOR_16.EsUsagePorc = true;
                oBloqueDOR_16.Elementos = new List<ElementoDOR>();

                // 16.1) (MIXED LIMESTONE  CRUSHED - C PILE / TOTAL MIX LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_16_1 = new ElementoDOR();
                oElementoDOR_16_1.Orden = 1;
                oElementoDOR_16_1.Padre = "";
                oElementoDOR_16_1.Nombre = "MIXED LIMESTONE  CRUSHED - C PILE";
                oElementoDOR_16_1.Origen = "(MIXED LIMESTONE  CRUSHED - C PILE / TOTAL MIX LIMESTONE CRUSHED) * 100";
                oElementoDOR_16_1.Unidad = "";

                oElementoDOR_16_1.ValorDia = "";
                if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_13.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_16_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_1.ValorMes = "";
                if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_13.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_16_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_1.ValorAno = "";
                if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_13.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_16_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_16.Elementos.Add(oElementoDOR_16_1);


                // 16.2) (MIXED LIMESTONE  CRUSHED - C PILE / TOTAL MIX LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_16_2 = new ElementoDOR();
                oElementoDOR_16_2.Orden = 2;
                oElementoDOR_16_2.Padre = "";
                oElementoDOR_16_2.Nombre = "MIXED LIMESTONE  CRUSHED - D PILE";
                oElementoDOR_16_2.Origen = "(MIXED LIMESTONE  CRUSHED - D PILE / TOTAL MIX LIMESTONE CRUSHED) * 100";
                oElementoDOR_16_2.Unidad = "";

                oElementoDOR_16_2.ValorDia = "";
                if (!(oElementoDOR_1_11.ValorDia.Trim() == "" && oElementoDOR_1_13.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_16_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_2.ValorMes = "";
                if (!(oElementoDOR_1_11.ValorMes.Trim() == "" && oElementoDOR_1_13.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_16_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_2.ValorAno = "";
                if (!(oElementoDOR_1_11.ValorAno.Trim() == "" && oElementoDOR_1_13.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_16_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_16.Elementos.Add(oElementoDOR_16_2);


                // 16.3) (FILTER CAKE USED IN MIX LIMESTONE / TOTAL MIX LIMESTONE CRUSHED) * 100
                ElementoDOR oElementoDOR_16_3 = new ElementoDOR();
                oElementoDOR_16_3.Orden = 3;
                oElementoDOR_16_3.Padre = "";
                oElementoDOR_16_3.Nombre = "FILTER CAKE USED IN MIX LIMESTONE";
                oElementoDOR_16_3.Origen = "(FILTER CAKE USED IN MIX LIMESTONE / TOTAL MIX LIMESTONE CRUSHED) * 100";
                oElementoDOR_16_3.Unidad = "";

                oElementoDOR_16_3.ValorDia = "";
                if (!(oElementoDOR_1_12.ValorDia.Trim() == "" && oElementoDOR_1_13.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_1_12.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_16_3.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_3.ValorMes = "";
                if (!(oElementoDOR_1_12.ValorMes.Trim() == "" && oElementoDOR_1_13.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_1_12.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_16_3.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_16_3.ValorAno = "";
                if (!(oElementoDOR_1_12.ValorAno.Trim() == "" && oElementoDOR_1_13.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_1_12.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_1_13.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_16_3.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_16.Elementos.Add(oElementoDOR_16_3);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_16_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_2.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_3.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_3.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_10.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_11.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_12.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_13.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_16.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 3).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_16_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_2.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_3.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_3.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_10.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_11.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_12.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_13.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_16.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 3).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_16_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_2.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_16_3.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_16_3.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_1_10.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_11.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_1_12.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_1_13.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_1_13.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_16.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 3).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                oBloquesDOR.Add(oBloqueDOR_16);



                // 2.) BLOQUE RAW MILL
                BloqueDOR oBloqueDOR_2 = new BloqueDOR();
                oBloqueDOR_2.Nombre = "RAW MILL";
                oBloqueDOR_2.Orden = 2;
                oBloqueDOR_2.CssClass = "col-6";
                oBloqueDOR_2.EsUsagePorc = false;
                oBloqueDOR_2.Elementos = new List<ElementoDOR>();

                // 2.1) 32X.ALLSI2
                ElementoDOR oElementoDOR_2_1 = new ElementoDOR();
                oElementoDOR_2_1.Orden = 1;
                oElementoDOR_2_1.Padre = "32X.Raw Mill";
                oElementoDOR_2_1.Nombre = "LOW LIMESTONE";
                oElementoDOR_2_1.Origen = "32X.ALLSI2";
                oElementoDOR_2_1.Unidad = "sT";
                oElementoDOR_2_1 = CalcularElementoDOR(oElementoDOR_2_1, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_1);

                // 2.2) 32X.LIMSI2
                ElementoDOR oElementoDOR_2_2 = new ElementoDOR();
                oElementoDOR_2_2.Orden = 2;
                oElementoDOR_2_2.Padre = "32X.Raw Mill";
                oElementoDOR_2_2.Nombre = "HIGH LIMESTONE";
                oElementoDOR_2_2.Origen = "32X.LIMSI2";
                oElementoDOR_2_2.Unidad = "sT";
                oElementoDOR_2_2 = CalcularElementoDOR(oElementoDOR_2_2, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_2);

                // 2.3) 32X.LIMIX2
                ElementoDOR oElementoDOR_2_3 = new ElementoDOR();
                oElementoDOR_2_3.Orden = 3;
                oElementoDOR_2_3.Padre = "32X.Raw Mill";
                oElementoDOR_2_3.Nombre = "MIX LIMESTONE";
                oElementoDOR_2_3.Origen = "32X.LIMIX2";
                oElementoDOR_2_3.Unidad = "sT";
                oElementoDOR_2_3 = CalcularElementoDOR(oElementoDOR_2_3, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_3);

                // 2.4) 32X.BAUSI2 * RMFactor1
                ElementoDOR oElementoDOR_2_4 = new ElementoDOR();
                oElementoDOR_2_4.Orden = 4;
                oElementoDOR_2_4.Padre = "32X.Raw Mill";
                oElementoDOR_2_4.Nombre = "ALUMINA";
                oElementoDOR_2_4.Origen = "32X.BAUSI2";
                oElementoDOR_2_4.Unidad = "sT";
                oElementoDOR_2_4 = CalcularElementoDOR(oElementoDOR_2_4, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_4);

                // 2.5) 32X.BAUX3 * (1-RMFactor1)
                ElementoDOR oElementoDOR_2_5 = new ElementoDOR();
                oElementoDOR_2_5.Orden = 5;
                oElementoDOR_2_5.Padre = "32X.Raw Mill";
                oElementoDOR_2_5.Nombre = "BAUXITE";
                oElementoDOR_2_5.Origen = "32X.BAUX3";
                oElementoDOR_2_5.Unidad = "sT";
                oElementoDOR_2_5 = CalcularElementoDOR(oElementoDOR_2_5, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_5);

                // 2.6) 32X.IROSICA2 * RMFactor 2
                ElementoDOR oElementoDOR_2_6 = new ElementoDOR();
                oElementoDOR_2_6.Orden = 6;
                oElementoDOR_2_6.Padre = "32X.Raw Mill";
                oElementoDOR_2_6.Nombre = "IRON ORE";
                oElementoDOR_2_6.Origen = "32X.IROSICA2";
                oElementoDOR_2_6.Unidad = "sT";
                oElementoDOR_2_6 = CalcularElementoDOR(oElementoDOR_2_6, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_6);

                // 2.7) 32X.IROSI2
                ElementoDOR oElementoDOR_2_7 = new ElementoDOR();
                oElementoDOR_2_7.Orden = 7;
                oElementoDOR_2_7.Padre = "32X.Raw Mill";
                oElementoDOR_2_7.Nombre = "HEMATITE";
                oElementoDOR_2_7.Origen = "32X.IROSI2";
                oElementoDOR_2_7.Unidad = "sT";
                oElementoDOR_2_7 = CalcularElementoDOR(oElementoDOR_2_7, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_7);

                // 2.8) 32X.MSCL4 * (1-RMFactor2)
                ElementoDOR oElementoDOR_2_8 = new ElementoDOR();
                oElementoDOR_2_8.Orden = 8;
                oElementoDOR_2_8.Padre = "32X.Raw Mill";
                oElementoDOR_2_8.Nombre = "MILL SCALE";
                oElementoDOR_2_8.Origen = "32X.MSCL4";
                oElementoDOR_2_8.Unidad = "sT";
                oElementoDOR_2_8 = CalcularElementoDOR(oElementoDOR_2_8, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_8);

                // 2.9) 32X.SANSI2
                ElementoDOR oElementoDOR_2_9 = new ElementoDOR();
                oElementoDOR_2_9.Orden = 9;
                oElementoDOR_2_9.Padre = "32X.Raw Mill";
                oElementoDOR_2_9.Nombre = "GYPSUM";
                oElementoDOR_2_9.Origen = "32X.SANSI2";
                oElementoDOR_2_9.Unidad = "sT";
                oElementoDOR_2_9 = CalcularElementoDOR(oElementoDOR_2_9, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_9);

                // 2.10) 32X.RAMSI4
                ElementoDOR oElementoDOR_2_10 = new ElementoDOR();
                oElementoDOR_2_10.Orden = 10;
                oElementoDOR_2_10.Padre = "32X.Raw Mill";
                oElementoDOR_2_10.Nombre = "RAW MEAL";
                oElementoDOR_2_10.Origen = "32X.RAMSI4";
                oElementoDOR_2_10.Unidad = "sT";
                oElementoDOR_2_10 = CalcularElementoDOR(oElementoDOR_2_10, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_10);

                // 2.11) 32X.RAMSI2
                ElementoDOR oElementoDOR_2_11 = new ElementoDOR();
                oElementoDOR_2_11.Orden = 11;
                oElementoDOR_2_11.Padre = "32X.Raw Mill";
                oElementoDOR_2_11.Nombre = "HOURS";
                oElementoDOR_2_11.Origen = "32X.RAMSI2";
                oElementoDOR_2_11.Unidad = "Hrs.";
                oElementoDOR_2_11 = CalcularElementoDOR(oElementoDOR_2_11, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_11);

                // 2.12) 32X.RAMSI4 / 32X.RAMSI2
                ElementoDOR oElementoDOR_2_12 = new ElementoDOR();
                oElementoDOR_2_12.Orden = 12;
                oElementoDOR_2_12.Padre = "";
                oElementoDOR_2_12.Nombre = "PRODUCTION RATE";
                oElementoDOR_2_12.Origen = "32X.RAMSI4 / 32X.RAMSI2";
                oElementoDOR_2_12.Unidad = "sT/Hrs.";

                oElementoDOR_2_12.ValorDia = "";
                if (!(oElementoDOR_2_10.ValorDia.Trim() == "" && oElementoDOR_2_11.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_2_12.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_2_12.ValorMes = "";
                if (!(oElementoDOR_2_10.ValorMes.Trim() == "" && oElementoDOR_2_11.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_2_12.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_2_12.ValorAno = "";
                if (!(oElementoDOR_2_10.ValorAno.Trim() == "" && oElementoDOR_2_11.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_2_12.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_12);

                oBloquesDOR.Add(oBloqueDOR_2);



                // 3.) BLOQUE COAL GRINDING
                BloqueDOR oBloqueDOR_3 = new BloqueDOR();
                oBloqueDOR_3.Nombre = "COAL GRINDING";
                oBloqueDOR_3.Orden = 4;
                oBloqueDOR_3.CssClass = "col-6";
                oBloqueDOR_3.EsUsagePorc = false;
                oBloqueDOR_3.Elementos = new List<ElementoDOR>();

                // 3.1) 52X.COASI3 x*(1- CMFactor1)
                ElementoDOR oElementoDOR_3_1 = new ElementoDOR();
                oElementoDOR_3_1.Orden = 1;
                oElementoDOR_3_1.Padre = "52X.Coal Mill";
                oElementoDOR_3_1.Nombre = "COAL BULK";
                //oElementoDOR_3_1.Origen = "52X.COASI3";
                oElementoDOR_3_1.Origen = "52X.COASI2C";
                oElementoDOR_3_1.Unidad = "sT";
                oElementoDOR_3_1 = CalcularElementoDOR(oElementoDOR_3_1, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_1);

                // 3.2) 52X.PCOKE2 * CMFactor1
                ElementoDOR oElementoDOR_3_2 = new ElementoDOR();
                oElementoDOR_3_2.Orden = 2;
                oElementoDOR_3_2.Padre = "52X.Coal Mill";
                oElementoDOR_3_2.Nombre = "PETCOKE BULK";
                //oElementoDOR_3_2.Origen = "52X.PCOKE2";
                oElementoDOR_3_2.Origen = "52X.COASI2P";
                oElementoDOR_3_2.Unidad = "sT";
                oElementoDOR_3_2 = CalcularElementoDOR(oElementoDOR_3_2, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_2);

                // 3.3) 52X.COASI2
                ElementoDOR oElementoDOR_3_3 = new ElementoDOR();
                oElementoDOR_3_3.Orden = 3;
                oElementoDOR_3_3.Padre = "52X.Coal Mill";
                oElementoDOR_3_3.Nombre = "PULVERIZED FUEL";
                oElementoDOR_3_3.Origen = "52X.COASI2";
                oElementoDOR_3_3.Unidad = "sT";
                oElementoDOR_3_3 = CalcularElementoDOR(oElementoDOR_3_3, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_3);

                // 3.4) 52X.PCOSI4
                ElementoDOR oElementoDOR_3_4 = new ElementoDOR();
                oElementoDOR_3_4.Orden = 4;
                oElementoDOR_3_4.Padre = "52X.Coal Mill";
                oElementoDOR_3_4.Nombre = "CO2";
                oElementoDOR_3_4.Origen = "52X.PCOSI4";
                oElementoDOR_3_4.Unidad = "MT";
                oElementoDOR_3_4 = CalcularElementoDOR(oElementoDOR_3_4, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_4);

                // 3.5) 52X.PCOSI2
                ElementoDOR oElementoDOR_3_5 = new ElementoDOR();
                oElementoDOR_3_5.Orden = 5;
                oElementoDOR_3_5.Padre = "52X.Coal Mill";
                oElementoDOR_3_5.Nombre = "HOURS";
                oElementoDOR_3_5.Origen = "52X.PCOSI2";
                oElementoDOR_3_5.Unidad = "Hrs.";
                oElementoDOR_3_5 = CalcularElementoDOR(oElementoDOR_3_5, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_5);

                // 3.6) 52X.COASI2 / 52X.PCOSI2
                ElementoDOR oElementoDOR_3_6 = new ElementoDOR();
                oElementoDOR_3_6.Orden = 6;
                oElementoDOR_3_6.Padre = "";
                oElementoDOR_3_6.Nombre = "PRODUCTION RATE";
                oElementoDOR_3_6.Origen = "52X.COASI2 / 52X.PCOSI2";
                oElementoDOR_3_6.Unidad = "sT/Hrs.";

                oElementoDOR_3_6.ValorDia = "";
                if (!(oElementoDOR_3_3.ValorDia.Trim() == "" && oElementoDOR_3_5.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_3_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_3_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_3_6.ValorMes = "";
                if (!(oElementoDOR_3_3.ValorMes.Trim() == "" && oElementoDOR_3_5.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_3_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_3_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_3_6.ValorAno = "";
                if (!(oElementoDOR_3_3.ValorAno.Trim() == "" && oElementoDOR_3_5.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_3_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_3_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_6);

                oBloquesDOR.Add(oBloqueDOR_3);



                // 4.) BLOQUE KILN
                BloqueDOR oBloqueDOR_4 = new BloqueDOR();
                oBloqueDOR_4.Nombre = "KILN";
                oBloqueDOR_4.Orden = 6;
                oBloqueDOR_4.CssClass = "col-12";
                oBloqueDOR_4.EsUsagePorc = false;
                oBloqueDOR_4.Elementos = new List<ElementoDOR>();

                // 4.1) 41X.CLISI4
                ElementoDOR oElementoDOR_4_1 = new ElementoDOR();
                oElementoDOR_4_1.Orden = 1;
                oElementoDOR_4_1.Padre = "41X.Kiln";
                oElementoDOR_4_1.Nombre = "AMMONIA";
                oElementoDOR_4_1.Origen = "41X.CLISI4";
                oElementoDOR_4_1.Unidad = "sT";
                oElementoDOR_4_1 = CalcularElementoDOR(oElementoDOR_4_1, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_1);

                // 4.2) 41X.CLIS15
                ElementoDOR oElementoDOR_4_2 = new ElementoDOR();
                oElementoDOR_4_2.Orden = 2;
                oElementoDOR_4_2.Padre = "41X.Kiln";
                oElementoDOR_4_2.Nombre = "ACTUAL KILN FEED";
                oElementoDOR_4_2.Origen = "41X.CLIS15";
                oElementoDOR_4_2.Unidad = "sT";
                oElementoDOR_4_2 = CalcularElementoDOR(oElementoDOR_4_2, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_2);

                // 4.3) 41X.CLISI1
                ElementoDOR oElementoDOR_4_3 = new ElementoDOR();
                oElementoDOR_4_3.Orden = 3;
                oElementoDOR_4_3.Padre = "41X.Kiln";
                oElementoDOR_4_3.Nombre = "RAW FEED";
                oElementoDOR_4_3.Origen = "41X.CLISI1";
                oElementoDOR_4_3.Unidad = "sT";
                oElementoDOR_4_3 = CalcularElementoDOR(oElementoDOR_4_3, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_3);

                // 4.4) 41X.CLIS12
                ElementoDOR oElementoDOR_4_4 = new ElementoDOR();
                oElementoDOR_4_4.Orden = 4;
                oElementoDOR_4_4.Padre = "41X.Kiln";
                oElementoDOR_4_4.Nombre = "CLINKER";
                oElementoDOR_4_4.Origen = "41X.CLIS12";
                oElementoDOR_4_4.Unidad = "sT";
                oElementoDOR_4_4 = CalcularElementoDOR(oElementoDOR_4_4, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_4);

                // 4.5) 41X.CLISI8
                ElementoDOR oElementoDOR_4_5 = new ElementoDOR();
                oElementoDOR_4_5.Orden = 5;
                oElementoDOR_4_5.Padre = "41X.Kiln";
                oElementoDOR_4_5.Nombre = "HOURS";
                oElementoDOR_4_5.Origen = "41X.CLISI8";
                oElementoDOR_4_5.Unidad = "Hrs.";
                oElementoDOR_4_5 = CalcularElementoDOR(oElementoDOR_4_5, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_5);

                // 4.6) 41X.CLIS12 / 41X.CLISI8
                ElementoDOR oElementoDOR_4_6 = new ElementoDOR();
                oElementoDOR_4_6.Orden = 6;
                oElementoDOR_4_6.Padre = "";
                oElementoDOR_4_6.Nombre = "PRODUCTION RATE";
                oElementoDOR_4_6.Origen = "41X.CLIS12 / 41X.CLISI8";
                oElementoDOR_4_6.Unidad = "sT/Hrs.";

                oElementoDOR_4_6.ValorDia = "";
                if (!(oElementoDOR_4_4.ValorDia.Trim() == "" && oElementoDOR_4_5.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_4_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_4_6.ValorMes = "";
                if (!(oElementoDOR_4_4.ValorMes.Trim() == "" && oElementoDOR_4_5.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_4_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_4_6.ValorAno = "";
                if (!(oElementoDOR_4_4.ValorAno.Trim() == "" && oElementoDOR_4_5.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_4_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_6);

                oBloquesDOR.Add(oBloqueDOR_4);




                // 5.) BLOQUE FUEL CONSUMPTIONS
                BloqueDOR oBloqueDOR_5 = new BloqueDOR();
                oBloqueDOR_5.Nombre = "FUEL CONSUMPTIONS";
                oBloqueDOR_5.Orden = 7;
                oBloqueDOR_5.CssClass = "col-12";
                oBloqueDOR_5.EsUsagePorc = false;
                oBloqueDOR_5.Elementos = new List<ElementoDOR>();

                // 5.1) 41X.CLISI2
                ElementoDOR oElementoDOR_5_1 = new ElementoDOR();
                oElementoDOR_5_1.Orden = 1;
                oElementoDOR_5_1.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_1.Nombre = "COAL/FUEL KILN";
                oElementoDOR_5_1.Origen = "41X.CLISI2";
                oElementoDOR_5_1.Unidad = "sT";
                oElementoDOR_5_1 = CalcularElementoDOR(oElementoDOR_5_1, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_1);

                // 5.2) 41X.CLISI3
                ElementoDOR oElementoDOR_5_2 = new ElementoDOR();
                oElementoDOR_5_2.Orden = 2;
                oElementoDOR_5_2.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_2.Nombre = "COAL/FUEL CALCINER";
                oElementoDOR_5_2.Origen = "41X.CLISI3";
                oElementoDOR_5_2.Unidad = "sT";
                oElementoDOR_5_2 = CalcularElementoDOR(oElementoDOR_5_2, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_2);

                // 5.3) 41X.CLISI10
                ElementoDOR oElementoDOR_5_3 = new ElementoDOR();
                oElementoDOR_5_3.Orden = 3;
                oElementoDOR_5_3.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_3.Nombre = "GAS CALCINER PREHEAT";
                oElementoDOR_5_3.Origen = "41X.CLISI10";
                oElementoDOR_5_3.Unidad = "CF";
                oElementoDOR_5_3 = CalcularElementoDOR(oElementoDOR_5_3, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_3);

                // 5.4) 41X.CLISI5
                ElementoDOR oElementoDOR_5_4 = new ElementoDOR();
                oElementoDOR_5_4.Orden = 4;
                oElementoDOR_5_4.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_4.Nombre = "GAS KILN PREHEAT";
                oElementoDOR_5_4.Origen = "41X.CLISI5";
                oElementoDOR_5_4.Unidad = "CF";
                oElementoDOR_5_4 = CalcularElementoDOR(oElementoDOR_5_4, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_4);

                // 5.5) 41X.CLISI100
                ElementoDOR oElementoDOR_5_5 = new ElementoDOR();
                oElementoDOR_5_5.Orden = 5;
                oElementoDOR_5_5.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_5.Nombre = "GAS CALCINER FEED ON";
                oElementoDOR_5_5.Origen = "41X.CLISI100";
                oElementoDOR_5_5.Unidad = "CF";
                oElementoDOR_5_5 = CalcularElementoDOR(oElementoDOR_5_5, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_5);

                // 5.6) 41X.CLISI55
                ElementoDOR oElementoDOR_5_6 = new ElementoDOR();
                oElementoDOR_5_6.Orden = 6;
                oElementoDOR_5_6.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_6.Nombre = "GAS KILN FEED ON";
                oElementoDOR_5_6.Origen = "41X.CLISI55";
                oElementoDOR_5_6.Unidad = "CF";
                oElementoDOR_5_6 = CalcularElementoDOR(oElementoDOR_5_6, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_6);

                // 5.7) VIENE DE TAG
                ElementoDOR oElementoDOR_5_7 = new ElementoDOR();
                oElementoDOR_5_7.Orden = 7;
                oElementoDOR_5_7.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_7.Nombre = "MMBtu coal/coke";
                oElementoDOR_5_7.Origen = "";
                oElementoDOR_5_7.Unidad = "";

                string cTag_5_7 = WebConfigurationManager.AppSettings["Tag_DOR_MMBtu_coal_coke"];
                string cValor_5_7 = "";
                AFValue oAFValor_5_7 = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_5_7, ldt_Date);
                if (oAFValor_5_7.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_5_7.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_5_7.Value.GetType().BaseType.Name == "SystemException")
                {
                    cValor_5_7 = "";
                }
                else
                {
                    cValor_5_7 = oAFValor_5_7.ValueAsDouble().ToString("###,###,##0.00");
                }

                oElementoDOR_5_7.ValorDia = cValor_5_7;

                double dValor_5_7_Mes = ModPIExtFunctions.ObtenerPromedio(cServidorPIData, ldt_Date.AddDays(-ldt_Date.Day + 1), ldt_Date, cTag_5_7, "");
                oElementoDOR_5_7.ValorMes = dValor_5_7_Mes.ToString("###,###,##0.00");

                double dValor_5_7_Ano = ModPIExtFunctions.ObtenerPromedio(cServidorPIData, new DateTime(ldt_Date.Year, 1, 1), ldt_Date, cTag_5_7, "");
                oElementoDOR_5_7.ValorAno = dValor_5_7_Ano.ToString("###,###,##0.00"); ;

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_7);

                // 5.8) VIENE DE TAG
                ElementoDOR oElementoDOR_5_8 = new ElementoDOR();
                oElementoDOR_5_8.Orden = 8;
                oElementoDOR_5_8.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_8.Nombre = "MMBtu gas";
                oElementoDOR_5_8.Origen = "";
                oElementoDOR_5_8.Unidad = "";

                string cTag_5_8 = WebConfigurationManager.AppSettings["Tag_DOR_MMBtu_gas"];
                string cValor_5_8 = "";
                AFValue oAFValor_5_8 = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_5_8, ldt_Date);
                if (oAFValor_5_8.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_5_8.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_5_8.Value.GetType().BaseType.Name == "SystemException")
                {
                    cValor_5_8 = "";
                }
                else
                {
                    cValor_5_8 = oAFValor_5_8.ValueAsDouble().ToString("###,###,##0.00");
                }

                oElementoDOR_5_8.ValorDia = cValor_5_8;

                double dValor_5_8_Mes = ModPIExtFunctions.ObtenerPromedio(cServidorPIData, ldt_Date.AddDays(-ldt_Date.Day + 1), ldt_Date, cTag_5_8, "");
                oElementoDOR_5_8.ValorMes = dValor_5_8_Mes.ToString("###,###,##0.00");

                double dValor_5_8_Ano = ModPIExtFunctions.ObtenerPromedio(cServidorPIData, new DateTime(ldt_Date.Year, 1, 1), ldt_Date, cTag_5_8, "");
                oElementoDOR_5_8.ValorAno = dValor_5_8_Ano.ToString("###,###,##0.00");

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_8);

                // 5.9) (MMBtu coal/coke) * (41X.CLISI2 + 41X.CLISI3) / 2000.00 / 41X.CLIS12
                ElementoDOR oElementoDOR_5_9 = new ElementoDOR();
                oElementoDOR_5_9.Orden = 9;
                oElementoDOR_5_9.Padre = "";
                oElementoDOR_5_9.Nombre = "MMBtu/ton of clinker coal";
                oElementoDOR_5_9.Origen = "(MMBtu coal/coke) * (41X.CLISI2 + 41X.CLISI3) / 2000.00 / 41X.CLIS12";
                oElementoDOR_5_9.Unidad = "";

                oElementoDOR_5_9.ValorDia = "";
                if (!(oElementoDOR_5_7.ValorDia.Trim() == "" && oElementoDOR_5_1.ValorDia.Trim() == "" && oElementoDOR_5_2.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = oElementoDOR_5_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_7.ValorDia.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_1.ValorDia.Trim().Replace(",", "")) +
                                                oElementoDOR_5_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_2.ValorDia.Trim().Replace(",", ""))
                                           ) / 2000.00;

                        nValorDia = nValorDia /
                                    (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));

                        oElementoDOR_5_9.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_9.ValorMes = "";
                if (!(oElementoDOR_5_7.ValorMes.Trim() == "" && oElementoDOR_5_1.ValorMes.Trim() == "" && oElementoDOR_5_2.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = oElementoDOR_5_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_7.ValorMes.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_1.ValorMes.Trim().Replace(",", "")) +
                                                oElementoDOR_5_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_2.ValorMes.Trim().Replace(",", ""))
                                           ) / 2000.00;

                        nValorMes = nValorMes /
                                    (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));

                        oElementoDOR_5_9.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_9.ValorAno = "";
                if (!(oElementoDOR_5_7.ValorAno.Trim() == "" && oElementoDOR_5_1.ValorAno.Trim() == "" && oElementoDOR_5_2.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = oElementoDOR_5_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_7.ValorAno.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_1.ValorAno.Trim().Replace(",", "")) +
                                                oElementoDOR_5_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_2.ValorAno.Trim().Replace(",", ""))
                                           ) / 2000.00;

                        nValorAno = nValorAno /
                                    (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));

                        oElementoDOR_5_9.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_9);


                // 5.10) (MMBtu gas) * (41X.CLISI100 + 41X.CLISI55) / 1000.00 / 41X.CLIS12
                ElementoDOR oElementoDOR_5_10 = new ElementoDOR();
                oElementoDOR_5_10.Orden = 10;
                oElementoDOR_5_10.Padre = "";
                oElementoDOR_5_10.Nombre = "MMBtu/ton of clinker gas";
                oElementoDOR_5_10.Origen = "(MMBtu gas) * (41X.CLISI100 + 41X.CLISI55) / 1000.00 / 41X.CLIS12";
                oElementoDOR_5_10.Unidad = "";

                oElementoDOR_5_10.ValorDia = "";
                if (!(oElementoDOR_5_8.ValorDia.Trim() == "" && oElementoDOR_5_5.ValorDia.Trim() == "" && oElementoDOR_5_6.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = oElementoDOR_5_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorDia.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_5.ValorDia.Trim().Replace(",", "")) +
                                                oElementoDOR_5_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_6.ValorDia.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorDia = nValorDia /
                                    (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));

                        oElementoDOR_5_10.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_10.ValorMes = "";
                if (!(oElementoDOR_5_8.ValorMes.Trim() == "" && oElementoDOR_5_5.ValorMes.Trim() == "" && oElementoDOR_5_6.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = oElementoDOR_5_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorMes.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_5.ValorMes.Trim().Replace(",", "")) +
                                                oElementoDOR_5_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_6.ValorMes.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorMes = nValorMes /
                                    (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));

                        oElementoDOR_5_10.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_10.ValorAno = "";
                if (!(oElementoDOR_5_8.ValorAno.Trim() == "" && oElementoDOR_5_5.ValorAno.Trim() == "" && oElementoDOR_5_6.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = oElementoDOR_5_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorAno.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_5.ValorAno.Trim().Replace(",", "")) +
                                                oElementoDOR_5_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_6.ValorAno.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorAno = nValorAno /
                                    (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));

                        oElementoDOR_5_10.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_10);


                // 5.11) (MMBtu gas) * (41X.CLISI10 + 41X.CLISI55) / 1000.00 / 41X.CLIS12
                ElementoDOR oElementoDOR_5_11 = new ElementoDOR();
                oElementoDOR_5_11.Orden = 11;
                oElementoDOR_5_11.Padre = "";
                oElementoDOR_5_11.Nombre = "MMBtu/ton of clinker gas - PREHEAT";
                oElementoDOR_5_11.Origen = "(MMBtu gas) * (41X.CLISI10 + 41X.CLISI55) / 1000.00 / 41X.CLIS12";
                oElementoDOR_5_11.Unidad = "";

                oElementoDOR_5_11.ValorDia = "";
                if (!(oElementoDOR_5_8.ValorDia.Trim() == "" && oElementoDOR_5_3.ValorDia.Trim() == "" && oElementoDOR_5_4.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = oElementoDOR_5_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorDia.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_3.ValorDia.Trim().Replace(",", "")) +
                                                oElementoDOR_5_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_4.ValorDia.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorDia = nValorDia /
                                    (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));

                        oElementoDOR_5_11.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_11.ValorMes = "";
                if (!(oElementoDOR_5_8.ValorMes.Trim() == "" && oElementoDOR_5_3.ValorMes.Trim() == "" && oElementoDOR_5_4.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = oElementoDOR_5_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorMes.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_3.ValorMes.Trim().Replace(",", "")) +
                                                oElementoDOR_5_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_4.ValorMes.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorMes = nValorMes /
                                    (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));

                        oElementoDOR_5_11.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_11.ValorAno = "";
                if (!(oElementoDOR_5_8.ValorAno.Trim() == "" && oElementoDOR_5_3.ValorAno.Trim() == "" && oElementoDOR_5_4.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = oElementoDOR_5_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorAno.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_3.ValorAno.Trim().Replace(",", "")) +
                                                oElementoDOR_5_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_4.ValorAno.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorAno = nValorAno /
                                    (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));

                        oElementoDOR_5_11.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_11);


                // 5.12) (MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas) + (MMBtu/ton of clinker gas - PREHEAT)
                ElementoDOR oElementoDOR_5_12 = new ElementoDOR();
                oElementoDOR_5_12.Orden = 12;
                oElementoDOR_5_12.Padre = "";
                oElementoDOR_5_12.Nombre = "SPECIFIC TOTAL HEAT CONSUMTION - TOTAL";
                oElementoDOR_5_12.Origen = "(MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas) + (MMBtu/ton of clinker gas - PREHEAT)";
                oElementoDOR_5_12.Unidad = "MMBTU/TON";

                oElementoDOR_5_12.ValorDia = "";
                oElementoDOR_5_12.ValorMes = "";
                oElementoDOR_5_12.ValorAno = "";
                if (oFAC.Elementos.Count > 0)
                {
                    oElementoDOR_5_12.ValorDia = oFAC.Elementos[0].Total_MMBTU_Ton_Today;
                    oElementoDOR_5_12.ValorMes = oFAC.Elementos[0].Total_MMBTU_Ton_MTD;
                    oElementoDOR_5_12.ValorAno = oFAC.Elementos[0].Total_MMBTU_Ton_YTD;
                }

                //oElementoDOR_5_12.ValorDia = "";
                //if (!(oElementoDOR_5_9.ValorDia.Trim() == "" && oElementoDOR_5_10.ValorDia.Trim() == "" && oElementoDOR_5_11.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = oElementoDOR_5_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorDia.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorDia.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_11.ValorDia.Trim().Replace(",", ""));

                //    oElementoDOR_5_12.ValorDia = nValorDia.ToString("###,###,###.00");               
                //}

                //oElementoDOR_5_12.ValorMes = "";
                //if (!(oElementoDOR_5_9.ValorMes.Trim() == "" && oElementoDOR_5_10.ValorMes.Trim() == "" && oElementoDOR_5_11.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = oElementoDOR_5_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorMes.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorMes.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_11.ValorMes.Trim().Replace(",", ""));

                //    oElementoDOR_5_12.ValorMes = nValorMes.ToString("###,###,###.00");               
                //}

                //oElementoDOR_5_12.ValorAno = "";
                //if (!(oElementoDOR_5_9.ValorAno.Trim() == "" && oElementoDOR_5_10.ValorAno.Trim() == "" && oElementoDOR_5_11.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = oElementoDOR_5_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorAno.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorAno.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_11.ValorAno.Trim().Replace(",", ""));

                //    oElementoDOR_5_12.ValorAno = nValorAno.ToString("###,###,###.00");               
                //}

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_12);




                // 5.13) (MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas)
                ElementoDOR oElementoDOR_5_13 = new ElementoDOR();
                oElementoDOR_5_13.Orden = 13;
                oElementoDOR_5_13.Padre = "";
                oElementoDOR_5_13.Nombre = "SPECIFIC HEAT CONSUMTION - Production";
                oElementoDOR_5_13.Origen = "(MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas)";
                oElementoDOR_5_13.Unidad = "MMBTU/TON";

                oElementoDOR_5_13.ValorDia = "";
                oElementoDOR_5_13.ValorMes = "";
                oElementoDOR_5_13.ValorAno = "";
                if (oFAC.Elementos.Count > 0)
                {
                    oElementoDOR_5_13.ValorDia = oFAC.Elementos[0].Process_MMBTU_Ton_Today;
                    oElementoDOR_5_13.ValorMes = oFAC.Elementos[0].Process_MMBTU_Ton_MTD;
                    oElementoDOR_5_13.ValorAno = oFAC.Elementos[0].Process_MMBTU_Ton_YTD;
                }

                //oElementoDOR_5_13.ValorDia = "";
                //if (!(oElementoDOR_5_9.ValorDia.Trim() == "" && oElementoDOR_5_10.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = oElementoDOR_5_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorDia.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorDia.Trim().Replace(",", ""));

                //    oElementoDOR_5_13.ValorDia = nValorDia.ToString("###,###,###.00");               
                //}

                //oElementoDOR_5_13.ValorMes = "";
                //if (!(oElementoDOR_5_9.ValorMes.Trim() == "" && oElementoDOR_5_10.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = oElementoDOR_5_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorMes.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorMes.Trim().Replace(",", ""));

                //    oElementoDOR_5_13.ValorMes = nValorMes.ToString("###,###,###.00");               
                //}

                //oElementoDOR_5_13.ValorAno = "";
                //if (!(oElementoDOR_5_9.ValorAno.Trim() == "" && oElementoDOR_5_10.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = oElementoDOR_5_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorAno.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorAno.Trim().Replace(",", ""));

                //    oElementoDOR_5_13.ValorAno = nValorAno.ToString("###,###,###.00");               
                //}

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_13);

                oBloqueDOR_5.Elementos.Remove(oElementoDOR_5_9);
                oBloqueDOR_5.Elementos.Remove(oElementoDOR_5_10);
                oBloqueDOR_5.Elementos.Remove(oElementoDOR_5_11);

                oBloquesDOR.Add(oBloqueDOR_5);




                // 6.) BLOQUE CEMENT GRINDING
                BloqueDOR oBloqueDOR_6 = new BloqueDOR();
                oBloqueDOR_6.Nombre = "CEMENT GRINDING";
                oBloqueDOR_6.Orden = 9;
                oBloqueDOR_6.CssClass = "col-6";
                oBloqueDOR_6.EsUsagePorc = false;
                oBloqueDOR_6.Elementos = new List<ElementoDOR>();

                // 6.1) 62X.CEMSI1
                ElementoDOR oElementoDOR_6_1 = new ElementoDOR();
                oElementoDOR_6_1.Orden = 1;
                oElementoDOR_6_1.Padre = "62X.Mill Roller";
                oElementoDOR_6_1.Nombre = "GRINDING AID";
                oElementoDOR_6_1.Origen = "62X.CEMSI1";
                oElementoDOR_6_1.Unidad = "LB";
                oElementoDOR_6_1 = CalcularElementoDOR(oElementoDOR_6_1, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_1);

                // 6.2) 62X.LIMSI6
                ElementoDOR oElementoDOR_6_2 = new ElementoDOR();
                oElementoDOR_6_2.Orden = 2;
                oElementoDOR_6_2.Padre = "62X.Mill Roller";
                oElementoDOR_6_2.Nombre = "HIGH LIMESTONE";
                oElementoDOR_6_2.Origen = "62X.LIMSI6";
                oElementoDOR_6_2.Unidad = "sT";
                oElementoDOR_6_2 = CalcularElementoDOR(oElementoDOR_6_2, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_2);

                // 6.3) 62X.GYPSI2
                ElementoDOR oElementoDOR_6_3 = new ElementoDOR();
                oElementoDOR_6_3.Orden = 3;
                oElementoDOR_6_3.Padre = "62X.Mill Roller";
                oElementoDOR_6_3.Nombre = "GYPSUM";
                oElementoDOR_6_3.Origen = "62X.GYPSI2";
                oElementoDOR_6_3.Unidad = "sT";
                oElementoDOR_6_3 = CalcularElementoDOR(oElementoDOR_6_3, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_3);

                // 6.4) 62X.CKDC1
                ElementoDOR oElementoDOR_6_4 = new ElementoDOR();
                oElementoDOR_6_4.Orden = 4;
                oElementoDOR_6_4.Padre = "62X.Mill Roller";
                oElementoDOR_6_4.Nombre = "CKD";
                oElementoDOR_6_4.Origen = "62X.CKDC1";
                oElementoDOR_6_4.Unidad = "sT";
                oElementoDOR_6_4 = CalcularElementoDOR(oElementoDOR_6_4, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_4);

                // 6.5) 62X.CLKBK20
                ElementoDOR oElementoDOR_6_5 = new ElementoDOR();
                oElementoDOR_6_5.Orden = 5;
                oElementoDOR_6_5.Padre = "62X.Mill Roller";
                oElementoDOR_6_5.Nombre = "CLINKER BK";
                oElementoDOR_6_5.Origen = "62X.CLKBK20";
                oElementoDOR_6_5.Unidad = "sT";
                oElementoDOR_6_5 = CalcularElementoDOR(oElementoDOR_6_5, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_5);

                // 6.6) 62X.TCLSIP
                ElementoDOR oElementoDOR_6_6 = new ElementoDOR();
                oElementoDOR_6_6.Orden = 6;
                oElementoDOR_6_6.Padre = "62X.Mill Roller";
                oElementoDOR_6_6.Nombre = "PAULDEN CLINKER";
                oElementoDOR_6_6.Origen = "62X.TCLSIP";
                oElementoDOR_6_6.Unidad = "sT";
                oElementoDOR_6_6 = CalcularElementoDOR(oElementoDOR_6_6, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_6);

                // 6.7) 62X.TCLSI1
                ElementoDOR oElementoDOR_6_7 = new ElementoDOR();
                oElementoDOR_6_7.Orden = 7;
                oElementoDOR_6_7.Padre = "62X.Mill Roller";
                oElementoDOR_6_7.Nombre = "CLINKER";
                oElementoDOR_6_7.Origen = "62X.TCLSI1";
                oElementoDOR_6_7.Unidad = "sT";
                oElementoDOR_6_7 = CalcularElementoDOR(oElementoDOR_6_7, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_7);

                // 6.8) 62X.TCLSI5
                ElementoDOR oElementoDOR_6_8 = new ElementoDOR();
                oElementoDOR_6_8.Orden = 8;
                oElementoDOR_6_8.Padre = "62X.Mill Roller";
                oElementoDOR_6_8.Nombre = "CEMENT";
                oElementoDOR_6_8.Origen = "62X.TCLSI5";
                oElementoDOR_6_8.Unidad = "sT";
                oElementoDOR_6_8 = CalcularElementoDOR(oElementoDOR_6_8, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_8);

                // 6.9) 62X.CEMENT BK
                ElementoDOR oElementoDOR_6_9 = new ElementoDOR();
                oElementoDOR_6_9.Orden = 9;
                oElementoDOR_6_9.Padre = "62X.Mill Ball";
                oElementoDOR_6_9.Nombre = "CEMENT BK -Prod";
                oElementoDOR_6_9.Origen = "62X.CEMENT BK";
                oElementoDOR_6_9.Unidad = "sT";
                oElementoDOR_6_9 = CalcularElementoDOR(oElementoDOR_6_9, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_9);

                // 6.10) 62X.CEMSI3
                ElementoDOR oElementoDOR_6_10 = new ElementoDOR();
                oElementoDOR_6_10.Orden = 10;
                oElementoDOR_6_10.Padre = "62X.Mill Roller";
                oElementoDOR_6_10.Nombre = "HOURS ROLLER PRESS";
                oElementoDOR_6_10.Origen = "62X.CEMSI3";
                oElementoDOR_6_10.Unidad = "Hrs.";
                oElementoDOR_6_10 = CalcularElementoDOR(oElementoDOR_6_10, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_10);

                // 6.11) 62X.CEMSI5
                ElementoDOR oElementoDOR_6_11 = new ElementoDOR();
                oElementoDOR_6_11.Orden = 11;
                oElementoDOR_6_11.Padre = "62X.Mill Ball";
                oElementoDOR_6_11.Nombre = "HOURS CEMENT GRINDING";
                oElementoDOR_6_11.Origen = "62X.CEMSI5";
                oElementoDOR_6_11.Unidad = "Hrs.";
                oElementoDOR_6_11 = CalcularElementoDOR(oElementoDOR_6_11, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_11);

                // 6.12) 62X.TCLSI5 / 62X.CEMSI3
                ElementoDOR oElementoDOR_6_12 = new ElementoDOR();
                oElementoDOR_6_12.Orden = 12;
                oElementoDOR_6_12.Padre = "";
                oElementoDOR_6_12.Nombre = "PRODUCTION RATE-RP";
                oElementoDOR_6_12.Origen = "62X.TCLSI5 / 62X.CEMSI3";
                oElementoDOR_6_12.Unidad = "sT/Hrs.";

                oElementoDOR_6_12.ValorDia = "";
                if (!(oElementoDOR_6_8.ValorDia.Trim() == "" && oElementoDOR_6_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_6_12.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_6_12.ValorMes = "";
                if (!(oElementoDOR_6_8.ValorMes.Trim() == "" && oElementoDOR_6_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_6_12.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_6_12.ValorAno = "";
                if (!(oElementoDOR_6_8.ValorAno.Trim() == "" && oElementoDOR_6_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_6_12.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_12);

                oBloquesDOR.Add(oBloqueDOR_6);



                // 7.) BLOQUE RAW MILL USAGE %
                BloqueDOR oBloqueDOR_7 = new BloqueDOR();
                oBloqueDOR_7.Nombre = "RAW MILL USAGE %";
                oBloqueDOR_7.Orden = 3;
                oBloqueDOR_7.CssClass = "col-6";
                oBloqueDOR_7.EsUsagePorc = true;
                oBloqueDOR_7.Elementos = new List<ElementoDOR>();

                // 7.1) (LOW LIMESTONE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_1 = new ElementoDOR();
                oElementoDOR_7_1.Orden = 1;
                oElementoDOR_7_1.Padre = "";
                oElementoDOR_7_1.Nombre = "LOW LIMESTONE";
                oElementoDOR_7_1.Origen = "(LOW LIMESTONE / RAW MEAL) * 100";
                oElementoDOR_7_1.Unidad = "";

                oElementoDOR_7_1.ValorDia = "";
                if (!(oElementoDOR_2_1.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_1.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_1.ValorMes = "";
                if (!(oElementoDOR_2_1.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_1.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_1.ValorAno = "";
                if (!(oElementoDOR_2_1.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_1.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_1);


                // 7.2) (ALUMINA / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_2 = new ElementoDOR();
                oElementoDOR_7_2.Orden = 2;
                oElementoDOR_7_2.Padre = "";
                oElementoDOR_7_2.Nombre = "ALUMINA";
                oElementoDOR_7_2.Origen = "(ALUMINA / RAW MEAL) * 100";
                oElementoDOR_7_2.Unidad = "";

                oElementoDOR_7_2.ValorDia = "";
                if (!(oElementoDOR_2_4.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_2.ValorMes = "";
                if (!(oElementoDOR_2_4.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_2.ValorAno = "";
                if (!(oElementoDOR_2_4.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_2);



                // 7.3) (BAUXITE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_3 = new ElementoDOR();
                oElementoDOR_7_3.Orden = 3;
                oElementoDOR_7_3.Padre = "";
                oElementoDOR_7_3.Nombre = "BAUXITE";
                oElementoDOR_7_3.Origen = "(BAUXITE / RAW MEAL) * 100";
                oElementoDOR_7_3.Unidad = "";

                oElementoDOR_7_3.ValorDia = "";
                if (!(oElementoDOR_2_5.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_5.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_3.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_3.ValorMes = "";
                if (!(oElementoDOR_2_5.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_5.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_3.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_3.ValorAno = "";
                if (!(oElementoDOR_2_5.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_5.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_3.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_3);


                // 7.4) (IRON ORE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_4 = new ElementoDOR();
                oElementoDOR_7_4.Orden = 4;
                oElementoDOR_7_4.Padre = "";
                oElementoDOR_7_4.Nombre = "IRON ORE";
                oElementoDOR_7_4.Origen = "(IRON ORE / RAW MEAL) * 100";
                oElementoDOR_7_4.Unidad = "";

                oElementoDOR_7_4.ValorDia = "";
                if (!(oElementoDOR_2_6.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_6.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_4.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_4.ValorMes = "";
                if (!(oElementoDOR_2_6.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_6.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_4.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_4.ValorAno = "";
                if (!(oElementoDOR_2_6.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_6.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_4.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_4);



                // 7.5) (HEMATITE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_5 = new ElementoDOR();
                oElementoDOR_7_5.Orden = 5;
                oElementoDOR_7_5.Padre = "";
                oElementoDOR_7_5.Nombre = "HEMATITE";
                oElementoDOR_7_5.Origen = "(HEMATITE / RAW MEAL) * 100";
                oElementoDOR_7_5.Unidad = "";

                oElementoDOR_7_5.ValorDia = "";
                if (!(oElementoDOR_2_7.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_7.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_5.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_5.ValorMes = "";
                if (!(oElementoDOR_2_7.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_7.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_5.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_5.ValorAno = "";
                if (!(oElementoDOR_2_7.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_7.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_5.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_5);



                // 7.6) (MILL SCALE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_6 = new ElementoDOR();
                oElementoDOR_7_6.Orden = 6;
                oElementoDOR_7_6.Padre = "";
                oElementoDOR_7_6.Nombre = "MILL SCALE";
                oElementoDOR_7_6.Origen = "(MILL SCALE / RAW MEAL) * 100";
                oElementoDOR_7_6.Unidad = "";

                oElementoDOR_7_6.ValorDia = "";
                if (!(oElementoDOR_2_8.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_8.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_6.ValorMes = "";
                if (!(oElementoDOR_2_8.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_8.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_6.ValorAno = "";
                if (!(oElementoDOR_2_8.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_8.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_6);




                // 7.7) (HIGH LIMESTONE/ RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_7 = new ElementoDOR();
                oElementoDOR_7_7.Orden = 7;
                oElementoDOR_7_7.Padre = "";
                oElementoDOR_7_7.Nombre = "HIGH LIMESTONE";
                oElementoDOR_7_7.Origen = "(HIGH LIMESTONE / RAW MEAL) * 100";
                oElementoDOR_7_7.Unidad = "";

                oElementoDOR_7_7.ValorDia = "";
                if (!(oElementoDOR_2_2.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_7.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_7.ValorMes = "";
                if (!(oElementoDOR_2_2.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_7.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_7.ValorAno = "";
                if (!(oElementoDOR_2_2.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_7.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_7);



                // 7.8) (MIX LIMESTONE/ RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_8 = new ElementoDOR();
                oElementoDOR_7_8.Orden = 8;
                oElementoDOR_7_8.Padre = "";
                oElementoDOR_7_8.Nombre = "MIX LIMESTONE";
                oElementoDOR_7_8.Origen = "(MIX LIMESTONE / RAW MEAL) * 100";
                oElementoDOR_7_8.Unidad = "";

                oElementoDOR_7_8.ValorDia = "";
                if (!(oElementoDOR_2_3.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_8.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_8.ValorMes = "";
                if (!(oElementoDOR_2_3.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_8.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_8.ValorAno = "";
                if (!(oElementoDOR_2_3.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_8.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_8);



                // 7.9) (GYPSUM/ RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_9 = new ElementoDOR();
                oElementoDOR_7_9.Orden = 9;
                oElementoDOR_7_9.Padre = "";
                oElementoDOR_7_9.Nombre = "GYPSUM";
                oElementoDOR_7_9.Origen = "(GYPSUM / RAW MEAL) * 100";
                oElementoDOR_7_9.Unidad = "";

                oElementoDOR_7_9.ValorDia = "";
                if (!(oElementoDOR_2_9.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_9.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_9.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_9.ValorMes = "";
                if (!(oElementoDOR_2_9.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_9.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_9.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_9.ValorAno = "";
                if (!(oElementoDOR_2_9.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_9.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_9.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_9);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_7_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_2.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_3.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_3.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_4.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_4.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_5.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_5.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_6.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_6.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_7.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_7.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_8.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_8.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_9.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_9.ValorDia.Trim().Replace(",", ""));
                }


                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_2_1.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_1.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_2.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_3.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_3.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_4.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_4.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_5.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_5.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_6.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_6.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_7.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_7.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_8.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_8.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_9.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_9.ValorDia.Trim().Replace(",", ""));
                    }


                    if (sumaComponentes == (oElementoDOR_2_10.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_7.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 9).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;
                if (oElementoDOR_7_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_2.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_3.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_3.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_4.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_4.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_5.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_5.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_6.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_6.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_7.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_7.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_8.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_8.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_9.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_9.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != 100)
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_2_1.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_1.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_2.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_3.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_3.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_4.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_4.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_5.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_5.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_6.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_6.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_7.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_7.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_8.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_8.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_9.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_9.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_2_10.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_7.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 9).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - ano
                sumaPorcentajes = 0;
                if (oElementoDOR_7_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_2.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_3.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_3.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_4.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_4.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_5.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_5.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_6.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_6.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_7.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_7.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_8.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_8.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_9.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_9.ValorAno.Trim().Replace(",", ""));
                }


                if (sumaPorcentajes != 100)
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;
                    if (oElementoDOR_2_1.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_1.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_2.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_3.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_3.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_4.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_4.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_5.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_5.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_6.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_6.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_7.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_7.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_8.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_8.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_9.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_9.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_2_10.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_7.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 9).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }



                oBloquesDOR.Add(oBloqueDOR_7);



                // 8.) COAL MILL USAGE %
                BloqueDOR oBloqueDOR_8 = new BloqueDOR();
                oBloqueDOR_8.Nombre = "COAL MILL USAGE %";
                oBloqueDOR_8.Orden = 5;
                oBloqueDOR_8.CssClass = "col-6";
                oBloqueDOR_8.EsUsagePorc = true;
                oBloqueDOR_8.Elementos = new List<ElementoDOR>();


                // 8.1) (COAL BULK / PULVERIZED FUEL) * 100
                ElementoDOR oElementoDOR_8_1 = new ElementoDOR();
                oElementoDOR_8_1.Orden = 1;
                oElementoDOR_8_1.Padre = "";
                oElementoDOR_8_1.Nombre = "COAL BULK";
                oElementoDOR_8_1.Origen = "(COAL BULK / PULVERIZED FUEL) * 100";
                oElementoDOR_8_1.Unidad = "";

                oElementoDOR_8_1.ValorDia = "";
                if (!(oElementoDOR_3_1.ValorDia.Trim() == "" && oElementoDOR_3_3.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_3_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_1.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_8_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_1.ValorMes = "";
                if (!(oElementoDOR_3_1.ValorMes.Trim() == "" && oElementoDOR_3_3.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_3_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_1.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_8_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_1.ValorAno = "";
                if (!(oElementoDOR_3_1.ValorAno.Trim() == "" && oElementoDOR_3_3.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_3_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_1.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_8_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_8.Elementos.Add(oElementoDOR_8_1);



                // 8.2) (PETCOKE BULK / PULVERIZED FUEL) * 100
                ElementoDOR oElementoDOR_8_2 = new ElementoDOR();
                oElementoDOR_8_2.Orden = 2;
                oElementoDOR_8_2.Padre = "";
                oElementoDOR_8_2.Nombre = "PETCOKE BULK";
                oElementoDOR_8_2.Origen = "(PETCOKE BULK / PULVERIZED FUEL) * 100";
                oElementoDOR_8_2.Unidad = "";

                oElementoDOR_8_2.ValorDia = "";
                if (!(oElementoDOR_3_2.ValorDia.Trim() == "" && oElementoDOR_3_3.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_3_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_8_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_2.ValorMes = "";
                if (!(oElementoDOR_3_2.ValorMes.Trim() == "" && oElementoDOR_3_3.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_3_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_8_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_2.ValorAno = "";
                if (!(oElementoDOR_3_2.ValorAno.Trim() == "" && oElementoDOR_3_3.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_3_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_8_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_8.Elementos.Add(oElementoDOR_8_2);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_8_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_8_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_2.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_3_1.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_1.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_3_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_2.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_3_3.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_8.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_8_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_8_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_2.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_3_1.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_1.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_3_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_2.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_3_3.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_8.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_8_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_8_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_2.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_3_1.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_1.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_3_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_2.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_3_3.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_8.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                oBloquesDOR.Add(oBloqueDOR_8);



                // 9.) MATERIAL USAGE %
                BloqueDOR oBloqueDOR_9 = new BloqueDOR();
                oBloqueDOR_9.Nombre = "MATERIAL USAGE %";
                oBloqueDOR_9.Orden = 10;
                oBloqueDOR_9.CssClass = "col-6";
                oBloqueDOR_9.EsUsagePorc = true;
                oBloqueDOR_9.Elementos = new List<ElementoDOR>();


                // 9.1) (GYPSUM / CEMENT) * 100
                ElementoDOR oElementoDOR_9_1 = new ElementoDOR();
                oElementoDOR_9_1.Orden = 1;
                oElementoDOR_9_1.Padre = "";
                oElementoDOR_9_1.Nombre = "GYPSUM";
                oElementoDOR_9_1.Origen = "(GYPSUM / CEMENT) * 100";
                oElementoDOR_9_1.Unidad = "";

                oElementoDOR_9_1.ValorDia = "";
                if (!(oElementoDOR_6_3.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_1.ValorMes = "";
                if (!(oElementoDOR_6_3.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_1.ValorAno = "";
                if (!(oElementoDOR_6_3.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_1);



                // 9.2) (CLINKER PAULDEN / CEMENT) * 100
                ElementoDOR oElementoDOR_9_2 = new ElementoDOR();
                oElementoDOR_9_2.Orden = 2;
                oElementoDOR_9_2.Padre = "";
                oElementoDOR_9_2.Nombre = "CLINKER PAULDEN";
                oElementoDOR_9_2.Origen = "(CLINKER PAULDEN / CEMENT) * 100";
                oElementoDOR_9_2.Unidad = "";

                oElementoDOR_9_2.ValorDia = "";
                if (!(oElementoDOR_6_6.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_6.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_2.ValorMes = "";
                if (!(oElementoDOR_6_6.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_6.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_2.ValorAno = "";
                if (!(oElementoDOR_6_6.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_6.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_2);



                // 9.3) (CKD / CEMENT) * 100
                ElementoDOR oElementoDOR_9_3 = new ElementoDOR();
                oElementoDOR_9_3.Orden = 3;
                oElementoDOR_9_3.Padre = "";
                oElementoDOR_9_3.Nombre = "CKD";
                oElementoDOR_9_3.Origen = "(CKD / CEMENT) * 100";
                oElementoDOR_9_3.Unidad = "";

                oElementoDOR_9_3.ValorDia = "";
                if (!(oElementoDOR_6_4.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_3.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_3.ValorMes = "";
                if (!(oElementoDOR_6_4.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_3.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_3.ValorAno = "";
                if (!(oElementoDOR_6_4.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_3.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_3);



                // 9.4) (CLINKER BKR / CEMENT) * 100
                ElementoDOR oElementoDOR_9_4 = new ElementoDOR();
                oElementoDOR_9_4.Orden = 4;
                oElementoDOR_9_4.Padre = "";
                oElementoDOR_9_4.Nombre = "CLINKER BKR";
                oElementoDOR_9_4.Origen = "(CLINKER BKR / CEMENT) * 100";
                oElementoDOR_9_4.Unidad = "";

                oElementoDOR_9_4.ValorDia = "";
                if (!(oElementoDOR_6_5.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_5.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_4.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_4.ValorMes = "";
                if (!(oElementoDOR_6_5.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_5.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_4.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_4.ValorAno = "";
                if (!(oElementoDOR_6_5.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_5.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_4.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_4);



                // 9.5) (CLINKER / CEMENT) * 100
                ElementoDOR oElementoDOR_9_5 = new ElementoDOR();
                oElementoDOR_9_5.Orden = 5;
                oElementoDOR_9_5.Padre = "";
                oElementoDOR_9_5.Nombre = "CLINKER";
                oElementoDOR_9_5.Origen = "(CLINKER / CEMENT) * 100";
                oElementoDOR_9_5.Unidad = "";

                oElementoDOR_9_5.ValorDia = "";
                if (!(oElementoDOR_6_7.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_7.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_5.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_5.ValorMes = "";
                if (!(oElementoDOR_6_7.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_7.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_5.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_5.ValorAno = "";
                if (!(oElementoDOR_6_7.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_7.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_5.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_5);



                // 9.6) (HIGH LIMESTONE / CEMENT) * 100
                ElementoDOR oElementoDOR_9_6 = new ElementoDOR();
                oElementoDOR_9_6.Orden = 6;
                oElementoDOR_9_6.Padre = "";
                oElementoDOR_9_6.Nombre = "HIGH LIMESTONE";
                oElementoDOR_9_6.Origen = "(HIGH LIMESTONE / CEMENT) * 100";
                oElementoDOR_9_6.Unidad = "";

                oElementoDOR_9_6.ValorDia = "";
                if (!(oElementoDOR_6_2.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_6.ValorMes = "";
                if (!(oElementoDOR_6_2.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_6.ValorAno = "";
                if (!(oElementoDOR_6_2.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_6);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_9_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_2.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_3.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_3.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_4.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_4.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_5.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_5.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_6.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_6.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_6_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_2.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_3.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_3.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_4.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_4.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_5.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_5.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_6.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_6.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_7.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_7.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_6_8.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_9.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 6).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_9_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_2.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_3.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_3.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_4.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_4.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_5.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_5.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_6.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_6.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_6_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_2.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_3.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_3.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_4.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_4.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_5.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_5.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_6.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_6.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_7.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_7.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_6_8.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_9.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 6).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_9_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_2.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_3.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_3.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_4.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_4.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_5.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_5.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_6.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_6.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_6_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_2.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_3.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_3.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_4.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_4.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_5.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_5.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_6.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_6.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_7.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_7.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_6_8.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_9.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 6).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                oBloquesDOR.Add(oBloqueDOR_9);


                // 10.) RATIOS
                BloqueDOR oBloqueDOR_10 = new BloqueDOR();
                oBloqueDOR_10.Nombre = "RATIOS";
                oBloqueDOR_10.Orden = 11;
                oBloqueDOR_10.CssClass = "col-12";
                oBloqueDOR_10.EsUsagePorc = false;
                oBloqueDOR_10.Elementos = new List<ElementoDOR>();


                // 10.1) (RAW FEED / CLINKER)
                ElementoDOR oElementoDOR_10_1 = new ElementoDOR();
                oElementoDOR_10_1.Orden = 1;
                oElementoDOR_10_1.Padre = "";
                oElementoDOR_10_1.Nombre = "RATIO 1";
                oElementoDOR_10_1.Origen = "(RAW FEED / CLINKER)";
                oElementoDOR_10_1.Unidad = "";

                oElementoDOR_10_1.ValorDia = "";
                if (!(oElementoDOR_4_3.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_4_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_10_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_1.ValorMes = "";
                if (!(oElementoDOR_4_3.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_4_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_10_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_1.ValorAno = "";
                if (!(oElementoDOR_4_3.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_4_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_10_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_10.Elementos.Add(oElementoDOR_10_1);



                // 10.2) (CLINKER / ACTUAL KILN FEED)
                ElementoDOR oElementoDOR_10_2 = new ElementoDOR();
                oElementoDOR_10_2.Orden = 2;
                oElementoDOR_10_2.Padre = "";
                oElementoDOR_10_2.Nombre = "RATIO 2";
                oElementoDOR_10_2.Origen = "(CLINKER / ACTUAL KILN FEED)";
                oElementoDOR_10_2.Unidad = "";

                oElementoDOR_10_2.ValorDia = "";
                if (!(oElementoDOR_4_4.ValorDia.Trim() == "" && oElementoDOR_4_2.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_10_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_2.ValorMes = "";
                if (!(oElementoDOR_4_4.ValorMes.Trim() == "" && oElementoDOR_4_2.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_10_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_2.ValorAno = "";
                if (!(oElementoDOR_4_4.ValorAno.Trim() == "" && oElementoDOR_4_2.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_10_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_10.Elementos.Add(oElementoDOR_10_2);

                oBloquesDOR.Add(oBloqueDOR_10);


                // 11.) EQUIVALENCIES
                BloqueDOR oBloqueDOR_11 = new BloqueDOR();
                oBloqueDOR_11.Nombre = "EQUIVALENCIES";
                oBloqueDOR_11.Orden = 8;
                oBloqueDOR_11.CssClass = "col-12";
                oBloqueDOR_11.EsUsagePorc = false;
                oBloqueDOR_11.Elementos = new List<ElementoDOR>();


                // 11.1) MMBtu coal/coke
                ElementoDOR oElementoDOR_11_1 = new ElementoDOR();
                oElementoDOR_11_1.Orden = 1;
                oElementoDOR_11_1.Padre = "";
                oElementoDOR_11_1.Nombre = "EQUIVALENCE 1";
                oElementoDOR_11_1.Origen = "MMBtu coal/coke";

                oElementoDOR_11_1.Unidad = "BTU/LB";
                oElementoDOR_11_1.ValorDia = oElementoDOR_5_7.ValorDia;
                oElementoDOR_11_1.ValorMes = oElementoDOR_5_7.ValorMes;
                oElementoDOR_11_1.ValorAno = oElementoDOR_5_7.ValorAno;

                oElementoDOR_11_1.Unidad2 = "KILOCAL/KG";

                oElementoDOR_11_1.ValorDia2 = "";
                if (!(oElementoDOR_11_1.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_11_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_1.ValorDia.Trim().Replace(",", ""))) / 1.79998;
                    oElementoDOR_11_1.ValorDia2 = nValorDia.ToString("###,###,##0.00");
                }

                oElementoDOR_11_1.ValorMes2 = "";
                if (!(oElementoDOR_11_1.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_11_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_1.ValorMes.Trim().Replace(",", ""))) / 1.79998;
                    oElementoDOR_11_1.ValorMes2 = nValorMes.ToString("###,###,##0.00");
                }

                oElementoDOR_11_1.ValorAno2 = "";
                if (!(oElementoDOR_11_1.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_11_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_1.ValorAno.Trim().Replace(",", ""))) / 1.79998;
                    oElementoDOR_11_1.ValorAno2 = nValorAno.ToString("###,###,##0.00");
                }

                oBloqueDOR_11.Elementos.Add(oElementoDOR_11_1);



                // 11.2) MMBtu gas
                ElementoDOR oElementoDOR_11_2 = new ElementoDOR();
                oElementoDOR_11_2.Orden = 2;
                oElementoDOR_11_2.Padre = "";
                oElementoDOR_11_2.Nombre = "EQUIVALENCE 2";
                oElementoDOR_11_2.Origen = "MMBtu gas";

                oElementoDOR_11_2.Unidad = "BTU/CF";
                oElementoDOR_11_2.ValorDia = oElementoDOR_5_8.ValorDia;
                oElementoDOR_11_2.ValorMes = oElementoDOR_5_8.ValorMes;
                oElementoDOR_11_2.ValorAno = oElementoDOR_5_8.ValorAno;

                oElementoDOR_11_2.Unidad2 = "KILOCAL/M3";

                oElementoDOR_11_2.ValorDia2 = "";
                if (!(oElementoDOR_11_2.ValorDia.Trim() == ""))
                {
                    double nValorDia = ((oElementoDOR_11_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_2.ValorDia.Trim().Replace(",", ""))) / 3.96825) / 0.02832;
                    oElementoDOR_11_2.ValorDia2 = nValorDia.ToString("###,###,##0.00");
                }

                oElementoDOR_11_2.ValorMes2 = "";
                if (!(oElementoDOR_11_2.ValorMes.Trim() == ""))
                {
                    double nValorMes = ((oElementoDOR_11_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_2.ValorMes.Trim().Replace(",", ""))) / 3.96825) / 0.02832;
                    oElementoDOR_11_2.ValorMes2 = nValorMes.ToString("###,###,##0.00");
                }

                oElementoDOR_11_2.ValorAno2 = "";
                if (!(oElementoDOR_11_2.ValorAno.Trim() == ""))
                {
                    double nValorAno = ((oElementoDOR_11_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_2.ValorAno.Trim().Replace(",", ""))) / 3.96825) / 0.02832;
                    oElementoDOR_11_2.ValorAno2 = nValorAno.ToString("###,###,##0.00");
                }

                oBloqueDOR_11.Elementos.Add(oElementoDOR_11_2);


                oBloquesDOR.Add(oBloqueDOR_11);



                // 17.) DISPATCH
                BloqueDOR oBloqueDOR_17 = new BloqueDOR();
                oBloqueDOR_17.Nombre = "DISPATCH";
                oBloqueDOR_17.Orden = 17;
                oBloqueDOR_17.CssClass = "col-12";
                oBloqueDOR_17.EsUsagePorc = false;
                oBloqueDOR_17.Elementos = new List<ElementoDOR>();


                // 17.1) CLINKER
                ElementoDOR oElementoDOR_17_1 = new ElementoDOR();
                oElementoDOR_17_1.Orden = 1;
                oElementoDOR_17_1.Padre = "";
                oElementoDOR_17_1.Nombre = "CLINKER";
                oElementoDOR_17_1.Origen = "";

                oElementoDOR_17_1.Unidad = "sT";
                oElementoDOR_17_1.ValorDia = "";
                oElementoDOR_17_1.ValorMes = "";
                oElementoDOR_17_1.ValorAno = "";

                oBloqueDOR_17.Elementos.Add(oElementoDOR_17_1);


                // 17.2) CEMENT dispatch by truck
                ElementoDOR oElementoDOR_17_2 = new ElementoDOR();
                oElementoDOR_17_2.Orden = 2;
                oElementoDOR_17_2.Padre = "";
                oElementoDOR_17_2.Nombre = "CEMENT dispatch by truck";
                oElementoDOR_17_2.Origen = "";
                oElementoDOR_17_2.Unidad = "sT";

                string cTag_17_2_Dia = WebConfigurationManager.AppSettings["Tag_Drake_Dispatch"];
                string cValor_17_2_Dia = "";
                AFValue oAFValor_17_2_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_17_2_Dia, ldt_Date);
                if (oAFValor_17_2_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_17_2_Dia.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_17_2_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_17_2_Dia.Value.GetType().BaseType.Name == "Exception")
                {
                    cValor_17_2_Dia = "";
                }
                else
                {
                    cValor_17_2_Dia = oAFValor_17_2_Dia.ValueAsDouble().ToString("###,###,##0.00");
                }

                string cTag_17_2_Mes = WebConfigurationManager.AppSettings["Tag_Drake_Dispatch_MTD"];
                string cValor_17_2_Mes = "";
                //DateTime ldt_Date_Mes = new DateTime(ldt_Date.Year, ldt_Date.Month, 1);
                AFValue oAFValor_17_2_Mes = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_17_2_Mes, ldt_Date);
                if (oAFValor_17_2_Mes.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_17_2_Mes.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_17_2_Mes.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_17_2_Mes.Value.GetType().BaseType.Name == "Exception")
                {
                    cValor_17_2_Mes = "";
                }
                else
                {
                    cValor_17_2_Mes = oAFValor_17_2_Mes.ValueAsDouble().ToString("###,###,##0.00");
                }

                string cTag_17_2_Ano = WebConfigurationManager.AppSettings["Tag_Drake_Dispatch_YTD"];
                string cValor_17_2_Ano = "";
                //DateTime ldt_Date_Ano = new DateTime(ldt_Date.Year, 1, 1);
                AFValue oAFValor_17_2_Ano = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag_17_2_Ano, ldt_Date);
                if (oAFValor_17_2_Ano.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_17_2_Ano.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_17_2_Ano.Value.GetType().BaseType.Name == "SystemException" ||
                    oAFValor_17_2_Ano.Value.GetType().BaseType.Name == "Exception")
                {
                    cValor_17_2_Ano = "";
                }
                else
                {
                    cValor_17_2_Ano = oAFValor_17_2_Ano.ValueAsDouble().ToString("###,###,##0.00");
                }

                oElementoDOR_17_2.ValorDia = cValor_17_2_Dia;
                oElementoDOR_17_2.ValorMes = cValor_17_2_Mes;
                oElementoDOR_17_2.ValorAno = cValor_17_2_Ano;

                oBloqueDOR_17.Elementos.Add(oElementoDOR_17_2);


                // 17.3) CEMENT dispatch by train
                ElementoDOR oElementoDOR_17_3 = new ElementoDOR();
                oElementoDOR_17_3.Orden = 3;
                oElementoDOR_17_3.Padre = "";
                oElementoDOR_17_3.Nombre = "CEMENT dispatch by train";
                oElementoDOR_17_3.Origen = "";

                oElementoDOR_17_3.Unidad = "sT";
                oElementoDOR_17_3.ValorDia = "";
                oElementoDOR_17_3.ValorMes = "";
                oElementoDOR_17_3.ValorAno = "";

                oBloqueDOR_17.Elementos.Add(oElementoDOR_17_3);


                // 17.4) CEMENT BRKD
                ElementoDOR oElementoDOR_17_4 = new ElementoDOR();
                oElementoDOR_17_4.Orden = 4;
                oElementoDOR_17_4.Padre = "";
                oElementoDOR_17_4.Nombre = "CEMENT BRKD";
                oElementoDOR_17_4.Origen = "";

                oElementoDOR_17_4.Unidad = "sT";
                oElementoDOR_17_4.ValorDia = "";
                oElementoDOR_17_4.ValorMes = "";
                oElementoDOR_17_4.ValorAno = "";

                oBloqueDOR_17.Elementos.Add(oElementoDOR_17_4);


                oBloquesDOR.Add(oBloqueDOR_17);




                List<BloqueDOR> oBloquesDOROrdenados = oBloquesDOR.OrderBy(x => x.Orden).ToList();

                oBloquesDOROrdenados = QuitarDecimalesCeroEnDOR(oBloquesDOROrdenados);

                return oBloquesDOROrdenados;



            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerDOROriginal", "wsUNACEMPI", false);
                return new List<BloqueDOR>();
            }
        }


        public List<BloqueDOR> ObtenerDOROriginal_old(string fecha)
        {
            List<BloqueDOR> oBloquesDOR = new List<BloqueDOR>();
            string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
            double sumaPorcentajes = 0;

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerDOROriginal", "wsUNACEMPI", false);
                return new List<BloqueDOR>();
            }

            try
            {
                DateTime dFechaIni = new DateTime(DateTime.Now.Year, 1, 1);
                List<Formulacion> oFormulaciones = ListarDeltasDeFormulacionOriginales("*", dFechaIni.ToString("yyyy-MM-dd"), fecha, "");

                FAC oFAC = ObtenerFACOriginalEnRangoFechaDeMes(fecha, fecha);



                // 1.) BLOQUE CRUSHER
                BloqueDOR oBloqueDOR_1 = new BloqueDOR();
                oBloqueDOR_1.Nombre = "CRUSHER";
                oBloqueDOR_1.Orden = 1;
                oBloqueDOR_1.CssClass = "col-12";
                oBloqueDOR_1.EsUsagePorc = false;
                oBloqueDOR_1.Elementos = new List<ElementoDOR>();

                // 1.1) 21X.ALLSP2
                ElementoDOR oElementoDOR_1_1 = new ElementoDOR();
                oElementoDOR_1_1.Orden = 1;
                oElementoDOR_1_1.Padre = "21X.Crusher.LowLimestone";
                oElementoDOR_1_1.Nombre = "HOURS CRUSHING LOW";
                oElementoDOR_1_1.Origen = "21X.ALLSP2";
                //oElementoDOR_1_1.Origen = "411BL1WT1UM1";
                oElementoDOR_1_1.Unidad = "Hrs.";
                oElementoDOR_1_1 = CalcularElementoDOR(oElementoDOR_1_1, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_1);

                // 1.2) 21X.MGALLSP3
                ElementoDOR oElementoDOR_1_2 = new ElementoDOR();
                oElementoDOR_1_2.Orden = 2;
                oElementoDOR_1_2.Padre = "21X.Crusher.LowLimestone";
                oElementoDOR_1_2.Nombre = "MG STONE";
                oElementoDOR_1_2.Origen = "21X.MGALLSP3";
                //oElementoDOR_1_2.Origen = "5211BL1CNT1C";
                oElementoDOR_1_2.Unidad = "sty";
                oElementoDOR_1_2 = CalcularElementoDOR(oElementoDOR_1_2, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_2);

                // 1.3) 21X.ALLSP4
                ElementoDOR oElementoDOR_1_3 = new ElementoDOR();
                oElementoDOR_1_3.Orden = 3;
                oElementoDOR_1_3.Padre = "21X.Crusher.LowLimestone";
                oElementoDOR_1_3.Nombre = "LOW LIMESTONE";
                oElementoDOR_1_3.Origen = "21X.ALLSP4";
                //oElementoDOR_1_3.Origen = "411BL1WT1UM1";
                oElementoDOR_1_3.Unidad = "sT";
                oElementoDOR_1_3 = CalcularElementoDOR(oElementoDOR_1_3, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_3);


                // 1.4) 21X.ALLSP4 + 21X.MGALLSP3
                ElementoDOR oElementoDOR_1_4 = new ElementoDOR();
                oElementoDOR_1_4.Orden = 4;
                oElementoDOR_1_4.Padre = "";
                oElementoDOR_1_4.Nombre = "TOTAL LOW LIMESTONE CRUSHED";
                oElementoDOR_1_4.Origen = "21X.ALLSP4 + 21X.MGALLSP3";
                oElementoDOR_1_4.Unidad = "sT";

                oElementoDOR_1_4.ValorDia = "";
                if (!(oElementoDOR_1_3.ValorDia.Trim() == "" && oElementoDOR_1_2.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorDia.Trim().Replace(",", "")));
                    oElementoDOR_1_4.ValorDia = nValorDia.ToString("###,###,###.00");
                }

                oElementoDOR_1_4.ValorMes = "";
                if (!(oElementoDOR_1_3.ValorMes.Trim() == "" && oElementoDOR_1_2.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorMes.Trim().Replace(",", "")));
                    oElementoDOR_1_4.ValorMes = nValorMes.ToString("###,###,###.00");
                }

                oElementoDOR_1_4.ValorAno = "";
                if (!(oElementoDOR_1_3.ValorAno.Trim() == "" && oElementoDOR_1_2.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_3.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_2.ValorAno.Trim().Replace(",", "")));
                    oElementoDOR_1_4.ValorAno = nValorAno.ToString("###,###,###.00");
                }

                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_4);


                // 1.5) 21X.LIMSP2
                ElementoDOR oElementoDOR_1_5 = new ElementoDOR();
                oElementoDOR_1_5.Orden = 5;
                oElementoDOR_1_5.Padre = "21X.Crusher.HighLimestone";
                oElementoDOR_1_5.Nombre = "HOURS CRUSHING HIGH";
                oElementoDOR_1_5.Origen = "21X.LIMSP2";
                oElementoDOR_1_5.Unidad = "Hrs.";
                oElementoDOR_1_5 = CalcularElementoDOR(oElementoDOR_1_5, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_5);

                // 1.6) 21X.LIMSP4
                ElementoDOR oElementoDOR_1_6 = new ElementoDOR();
                oElementoDOR_1_6.Orden = 6;
                oElementoDOR_1_6.Padre = "21X.Crusher.HighLimestone";
                oElementoDOR_1_6.Nombre = "HIGH LIMESTONE";
                oElementoDOR_1_6.Origen = "21X.LIMSP4";
                oElementoDOR_1_6.Unidad = "sT";
                oElementoDOR_1_6 = CalcularElementoDOR(oElementoDOR_1_6, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_6);

                // 1.7) 21X.Filter Cake
                ElementoDOR oElementoDOR_1_7 = new ElementoDOR();
                oElementoDOR_1_7.Orden = 7;
                oElementoDOR_1_7.Padre = "21X.Crusher.HighLimestone";
                oElementoDOR_1_7.Nombre = "FILTER CAKE USED IN HIGH LIMESTONE";
                oElementoDOR_1_7.Origen = "21X.Filter Cake";
                oElementoDOR_1_7.Unidad = "sT";
                oElementoDOR_1_7 = CalcularElementoDOR(oElementoDOR_1_7, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_7);

                // 1.8) 21X.LIMSP4 + 21X.Filter Cake
                ElementoDOR oElementoDOR_1_8 = new ElementoDOR();
                oElementoDOR_1_8.Orden = 8;
                oElementoDOR_1_8.Padre = "";
                oElementoDOR_1_8.Nombre = "TOTAL HIGH LIMESTONE CRUSHED";
                oElementoDOR_1_8.Origen = "21X.LIMSP4 + 21X.Filter Cake ";
                oElementoDOR_1_8.Unidad = "sT";

                oElementoDOR_1_8.ValorDia = "";
                if (!(oElementoDOR_1_6.ValorDia.Trim() == "" && oElementoDOR_1_7.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorDia.Trim().Replace(",", "")));
                    oElementoDOR_1_8.ValorDia = nValorDia.ToString("###,###,###.00");
                }

                oElementoDOR_1_8.ValorMes = "";
                if (!(oElementoDOR_1_6.ValorMes.Trim() == "" && oElementoDOR_1_7.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorMes.Trim().Replace(",", "")));
                    oElementoDOR_1_8.ValorMes = nValorMes.ToString("###,###,###.00");
                }

                oElementoDOR_1_8.ValorAno = "";
                if (!(oElementoDOR_1_6.ValorAno.Trim() == "" && oElementoDOR_1_7.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_6.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_7.ValorAno.Trim().Replace(",", "")));
                    oElementoDOR_1_8.ValorAno = nValorAno.ToString("###,###,###.00");
                }

                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_8);


                // 1.9) 21X.LIMSP8
                ElementoDOR oElementoDOR_1_9 = new ElementoDOR();
                oElementoDOR_1_9.Orden = 9;
                oElementoDOR_1_9.Padre = "21X.Crusher.MixLime";
                oElementoDOR_1_9.Nombre = "HOURS CRUSHING MIX STONE";
                oElementoDOR_1_9.Origen = "21X.LIMSP8";
                oElementoDOR_1_9.Unidad = "Hrs.";
                oElementoDOR_1_9 = CalcularElementoDOR(oElementoDOR_1_9, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_9);

                // 1.10) 21X.LIMSPMIX_C
                ElementoDOR oElementoDOR_1_10 = new ElementoDOR();
                oElementoDOR_1_10.Orden = 10;
                oElementoDOR_1_10.Padre = "21X.Crusher.MixLime";
                oElementoDOR_1_10.Nombre = "MIXED LIMESTONE  CRUSHED - C PILE";
                oElementoDOR_1_10.Origen = "21X.LIMSPMIX_C";
                oElementoDOR_1_10.Unidad = "sT";
                oElementoDOR_1_10 = CalcularElementoDOR(oElementoDOR_1_10, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_10);

                // 1.11) 21X.LIMSPMIX_D
                ElementoDOR oElementoDOR_1_11 = new ElementoDOR();
                oElementoDOR_1_11.Orden = 11;
                oElementoDOR_1_11.Padre = "21X.Crusher.MixLime";
                oElementoDOR_1_11.Nombre = "MIXED LIMESTONE  CRUSHED - D PILE";
                oElementoDOR_1_11.Origen = "21X.LIMSPMIX_D";
                oElementoDOR_1_11.Unidad = "sT";
                oElementoDOR_1_11 = CalcularElementoDOR(oElementoDOR_1_11, oFormulaciones, ldt_Date);
                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_11);

                // 1.12) (21X.LIMSPMIX_C + 21X.LIMSPMIX_D) * FactorFilterCake
                ElementoDOR oElementoDOR_1_12 = new ElementoDOR();
                oElementoDOR_1_12.Orden = 12;
                oElementoDOR_1_12.Padre = "";
                oElementoDOR_1_12.Nombre = "FILTER CAKE USED IN MIX LIMESTONE";
                oElementoDOR_1_12.Origen = "(21X.LIMSPMIX_C + 21X.LIMSPMIX_D) * FactorFilterCake";
                oElementoDOR_1_12.Unidad = "sT";

                double nFactorFilterCake = 0;
                string cTag_FactorFilterCake = WebConfigurationManager.AppSettings["Tag_Factor_Filter_Cake"];
                AFValue oAFValor_FactorFilterCake = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_FactorFilterCake, ldt_Date);
                if (oAFValor_FactorFilterCake.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_FactorFilterCake.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_FactorFilterCake.Value.GetType().BaseType.Name == "SystemException")
                {
                    nFactorFilterCake = 0;
                }
                else
                {
                    nFactorFilterCake = oAFValor_FactorFilterCake.ValueAsDouble();
                }

                oElementoDOR_1_12.ValorDia = "";
                if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_11.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", "")));
                    nValorDia = nValorDia * nFactorFilterCake;
                    oElementoDOR_1_12.ValorDia = nValorDia.ToString("###,###,###.00");
                }

                oElementoDOR_1_12.ValorMes = "";
                if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_11.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", "")));
                    nValorMes = nValorMes * nFactorFilterCake;
                    oElementoDOR_1_12.ValorMes = nValorMes.ToString("###,###,###.00");
                }

                oElementoDOR_1_12.ValorAno = "";
                if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_11.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", "")));
                    nValorAno = nValorAno * nFactorFilterCake;
                    oElementoDOR_1_12.ValorAno = nValorAno.ToString("###,###,###.00");
                }

                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_12);


                // 1.13) 21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (FILTER CAKE USED IN MIX LIMESTONE)
                ElementoDOR oElementoDOR_1_13 = new ElementoDOR();
                oElementoDOR_1_13.Orden = 13;
                oElementoDOR_1_13.Padre = "";
                oElementoDOR_1_13.Nombre = "TOTAL MIX LIMESTONE CRUSHED";
                oElementoDOR_1_13.Origen = "21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (FILTER CAKE USED IN MIX LIMESTONE)";
                oElementoDOR_1_13.Unidad = "sT";

                oElementoDOR_1_13.ValorDia = "";
                if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_11.ValorDia.Trim() == "" && oElementoDOR_1_12.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_12.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", "")));
                    oElementoDOR_1_13.ValorDia = nValorDia.ToString("###,###,###.00");
                }

                oElementoDOR_1_13.ValorMes = "";
                if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_11.ValorMes.Trim() == "" && oElementoDOR_1_12.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_12.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", "")));
                    oElementoDOR_1_13.ValorMes = nValorMes.ToString("###,###,###.00");
                }

                oElementoDOR_1_13.ValorAno = "";
                if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_11.ValorAno.Trim() == "" && oElementoDOR_1_12.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_12.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", "")));
                    oElementoDOR_1_13.ValorAno = nValorAno.ToString("###,###,###.00");
                }

                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_13);


                // 1.14) 21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (TOTAL LOW LIMESTONE CRUSHED) + (TOTAL HIGH LIMESTONE CRUSHED) + (FILTER CAKE USED IN MIX LIMESTONE)
                ElementoDOR oElementoDOR_1_14 = new ElementoDOR();
                oElementoDOR_1_14.Orden = 14;
                oElementoDOR_1_14.Padre = "";
                oElementoDOR_1_14.Nombre = "TOTAL LIMESTONE CRUSHED";
                oElementoDOR_1_14.Origen = "21X.LIMSPMIX_C + 21X.LIMSPMIX_D + (TOTAL LOW LIMESTONE CRUSHED) + (TOTAL HIGH LIMESTONE CRUSHED) + (FILTER CAKE USED IN MIX LIMESTONE)";
                oElementoDOR_1_14.Unidad = "sT";

                oElementoDOR_1_14.ValorDia = "";
                if (!(oElementoDOR_1_10.ValorDia.Trim() == "" && oElementoDOR_1_11.ValorDia.Trim() == "" && oElementoDOR_1_4.ValorDia.Trim() == "" && oElementoDOR_1_8.ValorDia.Trim() == "" && oElementoDOR_1_12.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_12.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorDia.Trim().Replace(",", "")));
                    oElementoDOR_1_14.ValorDia = nValorDia.ToString("###,###,###.00");
                }

                oElementoDOR_1_14.ValorMes = "";
                if (!(oElementoDOR_1_10.ValorMes.Trim() == "" && oElementoDOR_1_11.ValorMes.Trim() == "" && oElementoDOR_1_4.ValorMes.Trim() == "" && oElementoDOR_1_8.ValorMes.Trim() == "" && oElementoDOR_1_12.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_12.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorMes.Trim().Replace(",", "")));
                    oElementoDOR_1_14.ValorMes = nValorMes.ToString("###,###,###.00");
                }

                oElementoDOR_1_14.ValorAno = "";
                if (!(oElementoDOR_1_10.ValorAno.Trim() == "" && oElementoDOR_1_11.ValorAno.Trim() == "" && oElementoDOR_1_4.ValorAno.Trim() == "" && oElementoDOR_1_8.ValorAno.Trim() == "" && oElementoDOR_1_12.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_10.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_11.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_4.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_8.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_12.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_12.ValorAno.Trim().Replace(",", "")));
                    oElementoDOR_1_14.ValorAno = nValorAno.ToString("###,###,###.00");
                }

                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_14);



                // 1.15) (TOTAL LIMESTONE CRUSHED) / (21X.ALLSP2 + 21X.LIMSP2 + 21X.LIMSP8)
                ElementoDOR oElementoDOR_1_15 = new ElementoDOR();
                oElementoDOR_1_15.Orden = 15;
                oElementoDOR_1_15.Padre = "";
                oElementoDOR_1_15.Nombre = "PRODUCTION RATE";
                oElementoDOR_1_15.Origen = "(TOTAL LIMESTONE CRUSHED) / (21X.ALLSP2 + 21X.LIMSP2 + 21X.LIMSP8)";
                oElementoDOR_1_15.Unidad = "sT/Hrs.";

                oElementoDOR_1_15.ValorDia = "";
                if (!(oElementoDOR_1_14.ValorDia.Trim() == "" && oElementoDOR_1_1.ValorDia.Trim() == "" && oElementoDOR_1_5.ValorDia.Trim() == "" && oElementoDOR_1_9.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_1_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_1.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_5.ValorDia.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_9.ValorDia.Trim().Replace(",", "")));
                    if (nValorDia != 0)
                    {
                        nValorDia = (oElementoDOR_1_14.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_14.ValorDia.Trim().Replace(",", ""))) / nValorDia;
                        oElementoDOR_1_15.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_1_15.ValorMes = "";
                if (!(oElementoDOR_1_14.ValorMes.Trim() == "" && oElementoDOR_1_1.ValorMes.Trim() == "" && oElementoDOR_1_5.ValorDia.Trim() == "" && oElementoDOR_1_9.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_1_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_1.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_5.ValorMes.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_9.ValorMes.Trim().Replace(",", "")));
                    if (nValorMes != 0)
                    {
                        nValorMes = (oElementoDOR_1_14.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_14.ValorMes.Trim().Replace(",", ""))) / nValorMes;
                        oElementoDOR_1_15.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_1_15.ValorAno = "";
                if (!(oElementoDOR_1_14.ValorAno.Trim() == "" && oElementoDOR_1_1.ValorAno.Trim() == "" && oElementoDOR_1_5.ValorDia.Trim() == "" && oElementoDOR_1_9.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_1_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_1.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_5.ValorAno.Trim().Replace(",", ""))) +
                                       (oElementoDOR_1_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_9.ValorAno.Trim().Replace(",", "")));
                    if (nValorAno != 0)
                    {
                        nValorAno = (oElementoDOR_1_14.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_1_14.ValorAno.Trim().Replace(",", ""))) / nValorAno;
                        oElementoDOR_1_15.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_1.Elementos.Add(oElementoDOR_1_15);

                oBloquesDOR.Add(oBloqueDOR_1);





                // 2.) BLOQUE RAW MILL
                BloqueDOR oBloqueDOR_2 = new BloqueDOR();
                oBloqueDOR_2.Nombre = "RAW MILL";
                oBloqueDOR_2.Orden = 2;
                oBloqueDOR_2.CssClass = "col-6";
                oBloqueDOR_2.EsUsagePorc = false;
                oBloqueDOR_2.Elementos = new List<ElementoDOR>();

                // 2.1) 32X.ALLSI2
                ElementoDOR oElementoDOR_2_1 = new ElementoDOR();
                oElementoDOR_2_1.Orden = 1;
                oElementoDOR_2_1.Padre = "32X.Raw Mill";
                oElementoDOR_2_1.Nombre = "LOW LIMESTONE";
                oElementoDOR_2_1.Origen = "32X.ALLSI2";
                oElementoDOR_2_1.Unidad = "sT";
                oElementoDOR_2_1 = CalcularElementoDOR(oElementoDOR_2_1, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_1);

                // 2.2) 32X.LIMSI2
                ElementoDOR oElementoDOR_2_2 = new ElementoDOR();
                oElementoDOR_2_2.Orden = 2;
                oElementoDOR_2_2.Padre = "32X.Raw Mill";
                oElementoDOR_2_2.Nombre = "HIGH LIMESTONE";
                oElementoDOR_2_2.Origen = "32X.LIMSI2";
                oElementoDOR_2_2.Unidad = "sT";
                oElementoDOR_2_2 = CalcularElementoDOR(oElementoDOR_2_2, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_2);

                // 2.3) 32X.LIMIX2
                ElementoDOR oElementoDOR_2_3 = new ElementoDOR();
                oElementoDOR_2_3.Orden = 3;
                oElementoDOR_2_3.Padre = "32X.Raw Mill";
                oElementoDOR_2_3.Nombre = "MIX LIMESTONE";
                oElementoDOR_2_3.Origen = "32X.LIMIX2";
                oElementoDOR_2_3.Unidad = "sT";
                oElementoDOR_2_3 = CalcularElementoDOR(oElementoDOR_2_3, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_3);

                // 2.4) 32X.BAUSI2 * RMFactor1
                ElementoDOR oElementoDOR_2_4 = new ElementoDOR();
                oElementoDOR_2_4.Orden = 4;
                oElementoDOR_2_4.Padre = "32X.Raw Mill";
                oElementoDOR_2_4.Nombre = "ALUMINA";
                oElementoDOR_2_4.Origen = "32X.BAUSI2";
                oElementoDOR_2_4.Unidad = "sT";
                oElementoDOR_2_4 = CalcularElementoDOR(oElementoDOR_2_4, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_4);

                // 2.5) 32X.BAUX3 * (1-RMFactor1)
                ElementoDOR oElementoDOR_2_5 = new ElementoDOR();
                oElementoDOR_2_5.Orden = 5;
                oElementoDOR_2_5.Padre = "32X.Raw Mill";
                oElementoDOR_2_5.Nombre = "BAUXITE";
                oElementoDOR_2_5.Origen = "32X.BAUX3";
                oElementoDOR_2_5.Unidad = "sT";
                oElementoDOR_2_5 = CalcularElementoDOR(oElementoDOR_2_5, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_5);

                // 2.6) 32X.IROSICA2 * RMFactor 2
                ElementoDOR oElementoDOR_2_6 = new ElementoDOR();
                oElementoDOR_2_6.Orden = 6;
                oElementoDOR_2_6.Padre = "32X.Raw Mill";
                oElementoDOR_2_6.Nombre = "IRON ORE";
                oElementoDOR_2_6.Origen = "32X.IROSICA2";
                oElementoDOR_2_6.Unidad = "sT";
                oElementoDOR_2_6 = CalcularElementoDOR(oElementoDOR_2_6, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_6);

                // 2.7) 32X.IROSI2
                ElementoDOR oElementoDOR_2_7 = new ElementoDOR();
                oElementoDOR_2_7.Orden = 7;
                oElementoDOR_2_7.Padre = "32X.Raw Mill";
                oElementoDOR_2_7.Nombre = "HEMATITE";
                oElementoDOR_2_7.Origen = "32X.IROSI2";
                oElementoDOR_2_7.Unidad = "sT";
                oElementoDOR_2_7 = CalcularElementoDOR(oElementoDOR_2_7, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_7);

                // 2.8) 32X.MSCL4 * (1-RMFactor2)
                ElementoDOR oElementoDOR_2_8 = new ElementoDOR();
                oElementoDOR_2_8.Orden = 8;
                oElementoDOR_2_8.Padre = "32X.Raw Mill";
                oElementoDOR_2_8.Nombre = "MILL SCALE";
                oElementoDOR_2_8.Origen = "32X.MSCL4";
                oElementoDOR_2_8.Unidad = "sT";
                oElementoDOR_2_8 = CalcularElementoDOR(oElementoDOR_2_8, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_8);

                // 2.9) 32X.SANSI2
                ElementoDOR oElementoDOR_2_9 = new ElementoDOR();
                oElementoDOR_2_9.Orden = 9;
                oElementoDOR_2_9.Padre = "32X.Raw Mill";
                oElementoDOR_2_9.Nombre = "GYPSUM";
                oElementoDOR_2_9.Origen = "32X.SANSI2";
                oElementoDOR_2_9.Unidad = "sT";
                oElementoDOR_2_9 = CalcularElementoDOR(oElementoDOR_2_9, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_9);

                // 2.10) 32X.RAMSI4
                ElementoDOR oElementoDOR_2_10 = new ElementoDOR();
                oElementoDOR_2_10.Orden = 10;
                oElementoDOR_2_10.Padre = "32X.Raw Mill";
                oElementoDOR_2_10.Nombre = "RAW MEAL";
                oElementoDOR_2_10.Origen = "32X.RAMSI4";
                oElementoDOR_2_10.Unidad = "sT";
                oElementoDOR_2_10 = CalcularElementoDOR(oElementoDOR_2_10, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_10);

                // 2.11) 32X.RAMSI2
                ElementoDOR oElementoDOR_2_11 = new ElementoDOR();
                oElementoDOR_2_11.Orden = 11;
                oElementoDOR_2_11.Padre = "32X.Raw Mill";
                oElementoDOR_2_11.Nombre = "HOURS";
                oElementoDOR_2_11.Origen = "32X.RAMSI2";
                oElementoDOR_2_11.Unidad = "Hrs.";
                oElementoDOR_2_11 = CalcularElementoDOR(oElementoDOR_2_11, oFormulaciones, ldt_Date);
                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_11);

                // 2.12) 32X.RAMSI4 / 32X.RAMSI2
                ElementoDOR oElementoDOR_2_12 = new ElementoDOR();
                oElementoDOR_2_12.Orden = 12;
                oElementoDOR_2_12.Padre = "";
                oElementoDOR_2_12.Nombre = "PRODUCTION RATE";
                oElementoDOR_2_12.Origen = "32X.RAMSI4 / 32X.RAMSI2";
                oElementoDOR_2_12.Unidad = "sT/Hrs.";

                oElementoDOR_2_12.ValorDia = "";
                if (!(oElementoDOR_2_10.ValorDia.Trim() == "" && oElementoDOR_2_11.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_2_12.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_2_12.ValorMes = "";
                if (!(oElementoDOR_2_10.ValorMes.Trim() == "" && oElementoDOR_2_11.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_2_12.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_2_12.ValorAno = "";
                if (!(oElementoDOR_2_10.ValorAno.Trim() == "" && oElementoDOR_2_11.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_11.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_2_12.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_2.Elementos.Add(oElementoDOR_2_12);

                oBloquesDOR.Add(oBloqueDOR_2);



                // 3.) BLOQUE COAL GRINDING
                BloqueDOR oBloqueDOR_3 = new BloqueDOR();
                oBloqueDOR_3.Nombre = "COAL GRINDING";
                oBloqueDOR_3.Orden = 4;
                oBloqueDOR_3.CssClass = "col-6";
                oBloqueDOR_3.EsUsagePorc = false;
                oBloqueDOR_3.Elementos = new List<ElementoDOR>();

                // 3.1) 52X.COASI2C x*(1- CMFactor1)
                ElementoDOR oElementoDOR_3_1 = new ElementoDOR();
                oElementoDOR_3_1.Orden = 1;
                oElementoDOR_3_1.Padre = "52X.Coal Mill";
                oElementoDOR_3_1.Nombre = "COAL BULK";
                //oElementoDOR_3_1.Origen = "52X.COASI3";
                oElementoDOR_3_1.Origen = "52X.COASI2C";
                oElementoDOR_3_1.Unidad = "sT";
                oElementoDOR_3_1 = CalcularElementoDOR(oElementoDOR_3_1, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_1);

                // 3.2) 52X.COASI2P * CMFactor1
                ElementoDOR oElementoDOR_3_2 = new ElementoDOR();
                oElementoDOR_3_2.Orden = 2;
                oElementoDOR_3_2.Padre = "52X.Coal Mill";
                oElementoDOR_3_2.Nombre = "PETCOKE BULK";
                //oElementoDOR_3_2.Origen = "52X.PCOKE2";
                oElementoDOR_3_2.Origen = "52X.COASI2P";
                oElementoDOR_3_2.Unidad = "sT";
                oElementoDOR_3_2 = CalcularElementoDOR(oElementoDOR_3_2, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_2);

                // 3.3) 52X.COASI2
                ElementoDOR oElementoDOR_3_3 = new ElementoDOR();
                oElementoDOR_3_3.Orden = 3;
                oElementoDOR_3_3.Padre = "52X.Coal Mill";
                oElementoDOR_3_3.Nombre = "PULVERIZED FUEL";
                oElementoDOR_3_3.Origen = "52X.COASI2";
                oElementoDOR_3_3.Unidad = "sT";
                oElementoDOR_3_3 = CalcularElementoDOR(oElementoDOR_3_3, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_3);

                // 3.4) 52X.PCOSI4
                ElementoDOR oElementoDOR_3_4 = new ElementoDOR();
                oElementoDOR_3_4.Orden = 4;
                oElementoDOR_3_4.Padre = "52X.Coal Mill";
                oElementoDOR_3_4.Nombre = "CO2";
                oElementoDOR_3_4.Origen = "52X.PCOSI4";
                oElementoDOR_3_4.Unidad = "MT";
                oElementoDOR_3_4 = CalcularElementoDOR(oElementoDOR_3_4, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_4);

                // 3.5) 52X.PCOSI2
                ElementoDOR oElementoDOR_3_5 = new ElementoDOR();
                oElementoDOR_3_5.Orden = 5;
                oElementoDOR_3_5.Padre = "52X.Coal Mill";
                oElementoDOR_3_5.Nombre = "HOURS";
                oElementoDOR_3_5.Origen = "52X.PCOSI2";
                oElementoDOR_3_5.Unidad = "Hrs.";
                oElementoDOR_3_5 = CalcularElementoDOR(oElementoDOR_3_5, oFormulaciones, ldt_Date);
                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_5);

                // 3.6) 52X.COASI2 / 52X.PCOSI2
                ElementoDOR oElementoDOR_3_6 = new ElementoDOR();
                oElementoDOR_3_6.Orden = 6;
                oElementoDOR_3_6.Padre = "";
                oElementoDOR_3_6.Nombre = "PRODUCTION RATE";
                oElementoDOR_3_6.Origen = "52X.COASI2 / 52X.PCOSI2";
                oElementoDOR_3_6.Unidad = "sT/Hrs.";

                oElementoDOR_3_6.ValorDia = "";
                if (!(oElementoDOR_3_3.ValorDia.Trim() == "" && oElementoDOR_3_5.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_3_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_3_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_3_6.ValorMes = "";
                if (!(oElementoDOR_3_3.ValorMes.Trim() == "" && oElementoDOR_3_5.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_3_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_3_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_3_6.ValorAno = "";
                if (!(oElementoDOR_3_3.ValorAno.Trim() == "" && oElementoDOR_3_5.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_3_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_5.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_3_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_3.Elementos.Add(oElementoDOR_3_6);

                oBloquesDOR.Add(oBloqueDOR_3);



                // 4.) BLOQUE KILN
                BloqueDOR oBloqueDOR_4 = new BloqueDOR();
                oBloqueDOR_4.Nombre = "KILN";
                oBloqueDOR_4.Orden = 6;
                oBloqueDOR_4.CssClass = "col-12";
                oBloqueDOR_4.EsUsagePorc = false;
                oBloqueDOR_4.Elementos = new List<ElementoDOR>();

                // 4.1) 41X.CLISI4
                ElementoDOR oElementoDOR_4_1 = new ElementoDOR();
                oElementoDOR_4_1.Orden = 1;
                oElementoDOR_4_1.Padre = "41X.Kiln";
                oElementoDOR_4_1.Nombre = "AMMONIA";
                oElementoDOR_4_1.Origen = "41X.CLISI4";
                oElementoDOR_4_1.Unidad = "sT";
                oElementoDOR_4_1 = CalcularElementoDOR(oElementoDOR_4_1, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_1);

                // 4.2) 41X.CLIS15
                ElementoDOR oElementoDOR_4_2 = new ElementoDOR();
                oElementoDOR_4_2.Orden = 2;
                oElementoDOR_4_2.Padre = "41X.Kiln";
                oElementoDOR_4_2.Nombre = "ACTUAL KILN FEED";
                oElementoDOR_4_2.Origen = "41X.CLIS15";
                oElementoDOR_4_2.Unidad = "sT";
                oElementoDOR_4_2 = CalcularElementoDOR(oElementoDOR_4_2, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_2);

                // 4.3) 41X.CLISI1
                ElementoDOR oElementoDOR_4_3 = new ElementoDOR();
                oElementoDOR_4_3.Orden = 3;
                oElementoDOR_4_3.Padre = "41X.Kiln";
                oElementoDOR_4_3.Nombre = "RAW FEED";
                oElementoDOR_4_3.Origen = "41X.CLISI1";
                oElementoDOR_4_3.Unidad = "sT";
                oElementoDOR_4_3 = CalcularElementoDOR(oElementoDOR_4_3, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_3);

                // 4.4) 41X.CLIS12
                ElementoDOR oElementoDOR_4_4 = new ElementoDOR();
                oElementoDOR_4_4.Orden = 4;
                oElementoDOR_4_4.Padre = "41X.Kiln";
                oElementoDOR_4_4.Nombre = "CLINKER";
                oElementoDOR_4_4.Origen = "41X.CLIS12";
                oElementoDOR_4_4.Unidad = "sT";
                oElementoDOR_4_4 = CalcularElementoDOR(oElementoDOR_4_4, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_4);

                // 4.5) 41X.CLISI8
                ElementoDOR oElementoDOR_4_5 = new ElementoDOR();
                oElementoDOR_4_5.Orden = 5;
                oElementoDOR_4_5.Padre = "41X.Kiln";
                oElementoDOR_4_5.Nombre = "HOURS";
                oElementoDOR_4_5.Origen = "41X.CLISI8";
                oElementoDOR_4_5.Unidad = "Hrs.";
                oElementoDOR_4_5 = CalcularElementoDOR(oElementoDOR_4_5, oFormulaciones, ldt_Date);
                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_5);

                // 4.6) 41X.CLIS12 / 41X.CLISI8
                ElementoDOR oElementoDOR_4_6 = new ElementoDOR();
                oElementoDOR_4_6.Orden = 6;
                oElementoDOR_4_6.Padre = "";
                oElementoDOR_4_6.Nombre = "PRODUCTION RATE";
                oElementoDOR_4_6.Origen = "41X.CLIS12 / 41X.CLISI8";
                oElementoDOR_4_6.Unidad = "sT/Hrs.";

                oElementoDOR_4_6.ValorDia = "";
                if (!(oElementoDOR_4_4.ValorDia.Trim() == "" && oElementoDOR_4_5.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_4_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_4_6.ValorMes = "";
                if (!(oElementoDOR_4_4.ValorMes.Trim() == "" && oElementoDOR_4_5.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_4_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_4_6.ValorAno = "";
                if (!(oElementoDOR_4_4.ValorAno.Trim() == "" && oElementoDOR_4_5.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_5.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_4_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_4.Elementos.Add(oElementoDOR_4_6);

                oBloquesDOR.Add(oBloqueDOR_4);




                // 5.) BLOQUE FUEL CONSUMPTIONS
                BloqueDOR oBloqueDOR_5 = new BloqueDOR();
                oBloqueDOR_5.Nombre = "FUEL CONSUMPTIONS";
                oBloqueDOR_5.Orden = 7;
                oBloqueDOR_5.CssClass = "col-12";
                oBloqueDOR_5.EsUsagePorc = false;
                oBloqueDOR_5.Elementos = new List<ElementoDOR>();

                // 5.1) 41X.CLISI2
                ElementoDOR oElementoDOR_5_1 = new ElementoDOR();
                oElementoDOR_5_1.Orden = 1;
                oElementoDOR_5_1.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_1.Nombre = "COAL/FUEL KILN";
                oElementoDOR_5_1.Origen = "41X.CLISI2";
                oElementoDOR_5_1.Unidad = "sT";
                oElementoDOR_5_1 = CalcularElementoDOR(oElementoDOR_5_1, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_1);

                // 5.2) 41X.CLISI3
                ElementoDOR oElementoDOR_5_2 = new ElementoDOR();
                oElementoDOR_5_2.Orden = 2;
                oElementoDOR_5_2.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_2.Nombre = "COAL/FUEL CALCINER";
                oElementoDOR_5_2.Origen = "41X.CLISI3";
                oElementoDOR_5_2.Unidad = "sT";
                oElementoDOR_5_2 = CalcularElementoDOR(oElementoDOR_5_2, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_2);

                // 5.3) 41X.CLISI10
                ElementoDOR oElementoDOR_5_3 = new ElementoDOR();
                oElementoDOR_5_3.Orden = 3;
                oElementoDOR_5_3.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_3.Nombre = "GAS CALCINER PREHEAT";
                oElementoDOR_5_3.Origen = "41X.CLISI10";
                oElementoDOR_5_3.Unidad = "KCF";
                oElementoDOR_5_3 = CalcularElementoDOR(oElementoDOR_5_3, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_3);

                // 5.4) 41X.CLISI5
                ElementoDOR oElementoDOR_5_4 = new ElementoDOR();
                oElementoDOR_5_4.Orden = 4;
                oElementoDOR_5_4.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_4.Nombre = "GAS KILN PREHEAT";
                oElementoDOR_5_4.Origen = "41X.CLISI5";
                oElementoDOR_5_4.Unidad = "KCF";
                oElementoDOR_5_4 = CalcularElementoDOR(oElementoDOR_5_4, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_4);

                // 5.5) 41X.CLISI100
                ElementoDOR oElementoDOR_5_5 = new ElementoDOR();
                oElementoDOR_5_5.Orden = 5;
                oElementoDOR_5_5.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_5.Nombre = "GAS CALCINER FEED ON";
                oElementoDOR_5_5.Origen = "41X.CLISI100";
                oElementoDOR_5_5.Unidad = "KCF";
                oElementoDOR_5_5 = CalcularElementoDOR(oElementoDOR_5_5, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_5);

                // 5.6) 41X.CLISI55
                ElementoDOR oElementoDOR_5_6 = new ElementoDOR();
                oElementoDOR_5_6.Orden = 6;
                oElementoDOR_5_6.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_6.Nombre = "GAS KILN FEED ON";
                oElementoDOR_5_6.Origen = "41X.CLISI55";
                oElementoDOR_5_6.Unidad = "KCF";
                oElementoDOR_5_6 = CalcularElementoDOR(oElementoDOR_5_6, oFormulaciones, ldt_Date);
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_6);

                // 5.7) VIENE DE TAG
                ElementoDOR oElementoDOR_5_7 = new ElementoDOR();
                oElementoDOR_5_7.Orden = 7;
                oElementoDOR_5_7.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_7.Nombre = "MMBtu coal/coke";
                oElementoDOR_5_7.Origen = "";
                oElementoDOR_5_7.Unidad = "";

                string cTag_5_7 = WebConfigurationManager.AppSettings["Tag_DOR_MMBtu_coal_coke"];
                string cValor_5_7 = "";
                AFValue oAFValor_5_7 = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_5_7, ldt_Date);
                if (oAFValor_5_7.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_5_7.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_5_7.Value.GetType().BaseType.Name == "SystemException")
                {
                    cValor_5_7 = "";
                }
                else
                {
                    cValor_5_7 = oAFValor_5_7.ValueAsDouble().ToString("###,###,##0.00");
                }

                oElementoDOR_5_7.ValorDia = cValor_5_7;
                oElementoDOR_5_7.ValorMes = cValor_5_7;
                oElementoDOR_5_7.ValorAno = cValor_5_7;
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_7);

                // 5.8) VIENE DE TAG
                ElementoDOR oElementoDOR_5_8 = new ElementoDOR();
                oElementoDOR_5_8.Orden = 8;
                oElementoDOR_5_8.Padre = "41X.Kiln Fuel Formulation";
                oElementoDOR_5_8.Nombre = "MMBtu gas";
                oElementoDOR_5_8.Origen = "";
                oElementoDOR_5_8.Unidad = "";

                string cTag_5_8 = WebConfigurationManager.AppSettings["Tag_DOR_MMBtu_gas"];
                string cValor_5_8 = "";
                AFValue oAFValor_5_8 = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTag_5_8, ldt_Date);
                if (oAFValor_5_8.Value.GetType().Name == "AFEnumerationValue" ||
                    oAFValor_5_8.Value.GetType().BaseType.Name == "PIException" ||
                    oAFValor_5_8.Value.GetType().BaseType.Name == "SystemException")
                {
                    cValor_5_8 = "";
                }
                else
                {
                    cValor_5_8 = oAFValor_5_8.ValueAsDouble().ToString("###,###,##0.00");
                }

                oElementoDOR_5_8.ValorDia = cValor_5_8;
                oElementoDOR_5_8.ValorMes = cValor_5_8;
                oElementoDOR_5_8.ValorAno = cValor_5_8;
                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_8);

                // 5.9) (MMBtu coal/coke) * (41X.CLISI2 + 41X.CLISI3) / 2000.00 / 41X.CLIS12
                ElementoDOR oElementoDOR_5_9 = new ElementoDOR();
                oElementoDOR_5_9.Orden = 9;
                oElementoDOR_5_9.Padre = "";
                oElementoDOR_5_9.Nombre = "MMBtu/ton of clinker coal";
                oElementoDOR_5_9.Origen = "(MMBtu coal/coke) * (41X.CLISI2 + 41X.CLISI3) / 2000.00 / 41X.CLIS12";
                oElementoDOR_5_9.Unidad = "";

                oElementoDOR_5_9.ValorDia = "";
                if (!(oElementoDOR_5_7.ValorDia.Trim() == "" && oElementoDOR_5_1.ValorDia.Trim() == "" && oElementoDOR_5_2.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = oElementoDOR_5_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_7.ValorDia.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_1.ValorDia.Trim().Replace(",", "")) +
                                                oElementoDOR_5_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_2.ValorDia.Trim().Replace(",", ""))
                                           ) / 2000.00;

                        nValorDia = nValorDia /
                                    (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));

                        oElementoDOR_5_9.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_9.ValorMes = "";
                if (!(oElementoDOR_5_7.ValorMes.Trim() == "" && oElementoDOR_5_1.ValorMes.Trim() == "" && oElementoDOR_5_2.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = oElementoDOR_5_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_7.ValorMes.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_1.ValorMes.Trim().Replace(",", "")) +
                                                oElementoDOR_5_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_2.ValorMes.Trim().Replace(",", ""))
                                           ) / 2000.00;

                        nValorMes = nValorMes /
                                    (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));

                        oElementoDOR_5_9.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_9.ValorAno = "";
                if (!(oElementoDOR_5_7.ValorAno.Trim() == "" && oElementoDOR_5_1.ValorAno.Trim() == "" && oElementoDOR_5_2.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = oElementoDOR_5_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_7.ValorAno.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_1.ValorAno.Trim().Replace(",", "")) +
                                                oElementoDOR_5_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_2.ValorAno.Trim().Replace(",", ""))
                                           ) / 2000.00;

                        nValorAno = nValorAno /
                                    (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));

                        oElementoDOR_5_9.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_9);


                // 5.10) (MMBtu gas) * (41X.CLISI100 + 41X.CLISI55) / 1000.00 / 41X.CLIS12
                ElementoDOR oElementoDOR_5_10 = new ElementoDOR();
                oElementoDOR_5_10.Orden = 10;
                oElementoDOR_5_10.Padre = "";
                oElementoDOR_5_10.Nombre = "MMBtu/ton of clinker gas";
                oElementoDOR_5_10.Origen = "(MMBtu gas) * (41X.CLISI100 + 41X.CLISI55) / 1000.00 / 41X.CLIS12";
                oElementoDOR_5_10.Unidad = "";

                oElementoDOR_5_10.ValorDia = "";
                if (!(oElementoDOR_5_8.ValorDia.Trim() == "" && oElementoDOR_5_5.ValorDia.Trim() == "" && oElementoDOR_5_6.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = oElementoDOR_5_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorDia.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_5.ValorDia.Trim().Replace(",", "")) +
                                                oElementoDOR_5_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_6.ValorDia.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorDia = nValorDia /
                                    (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));

                        oElementoDOR_5_10.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_10.ValorMes = "";
                if (!(oElementoDOR_5_8.ValorMes.Trim() == "" && oElementoDOR_5_5.ValorMes.Trim() == "" && oElementoDOR_5_6.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = oElementoDOR_5_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorMes.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_5.ValorMes.Trim().Replace(",", "")) +
                                                oElementoDOR_5_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_6.ValorMes.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorMes = nValorMes /
                                    (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));

                        oElementoDOR_5_10.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_10.ValorAno = "";
                if (!(oElementoDOR_5_8.ValorAno.Trim() == "" && oElementoDOR_5_5.ValorAno.Trim() == "" && oElementoDOR_5_6.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = oElementoDOR_5_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorAno.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_5.ValorAno.Trim().Replace(",", "")) +
                                                oElementoDOR_5_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_6.ValorAno.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorAno = nValorAno /
                                    (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));

                        oElementoDOR_5_10.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_10);


                // 5.11) (MMBtu gas) * (41X.CLISI10 + 41X.CLISI55) / 1000.00 / 41X.CLIS12
                ElementoDOR oElementoDOR_5_11 = new ElementoDOR();
                oElementoDOR_5_11.Orden = 11;
                oElementoDOR_5_11.Padre = "";
                oElementoDOR_5_11.Nombre = "MMBtu/ton of clinker gas - PREHEAT";
                oElementoDOR_5_11.Origen = "(MMBtu gas) * (41X.CLISI10 + 41X.CLISI55) / 1000.00 / 41X.CLIS12";
                oElementoDOR_5_11.Unidad = "";

                oElementoDOR_5_11.ValorDia = "";
                if (!(oElementoDOR_5_8.ValorDia.Trim() == "" && oElementoDOR_5_3.ValorDia.Trim() == "" && oElementoDOR_5_4.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = oElementoDOR_5_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorDia.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_3.ValorDia.Trim().Replace(",", "")) +
                                                oElementoDOR_5_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_4.ValorDia.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorDia = nValorDia /
                                    (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));

                        oElementoDOR_5_11.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_11.ValorMes = "";
                if (!(oElementoDOR_5_8.ValorMes.Trim() == "" && oElementoDOR_5_3.ValorMes.Trim() == "" && oElementoDOR_5_4.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = oElementoDOR_5_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorMes.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_3.ValorMes.Trim().Replace(",", "")) +
                                                oElementoDOR_5_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_4.ValorMes.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorMes = nValorMes /
                                    (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));

                        oElementoDOR_5_11.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_5_11.ValorAno = "";
                if (!(oElementoDOR_5_8.ValorAno.Trim() == "" && oElementoDOR_5_3.ValorAno.Trim() == "" && oElementoDOR_5_4.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = oElementoDOR_5_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_8.ValorAno.Trim().Replace(",", "")) *
                                           (
                                                oElementoDOR_5_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_3.ValorAno.Trim().Replace(",", "")) +
                                                oElementoDOR_5_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_4.ValorAno.Trim().Replace(",", ""))
                                           ) / 1000.00;

                        nValorAno = nValorAno /
                                    (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));

                        oElementoDOR_5_11.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_11);


                // 5.12) (MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas) + (MMBtu/ton of clinker gas - PREHEAT)
                ElementoDOR oElementoDOR_5_12 = new ElementoDOR();
                oElementoDOR_5_12.Orden = 12;
                oElementoDOR_5_12.Padre = "";
                oElementoDOR_5_12.Nombre = "SPECIFIC TOTAL HEAT CONSUMTION - TOTAL";
                oElementoDOR_5_12.Origen = "(MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas) + (MMBtu/ton of clinker gas - PREHEAT)";
                oElementoDOR_5_12.Unidad = "MMBTU/TON";

                oElementoDOR_5_12.ValorDia = "";
                oElementoDOR_5_12.ValorMes = "";
                oElementoDOR_5_12.ValorAno = "";
                if (oFAC.Elementos.Count > 0)
                {
                    oElementoDOR_5_12.ValorDia = oFAC.Elementos[0].Total_MMBTU_Ton_Today;
                    oElementoDOR_5_12.ValorMes = oFAC.Elementos[0].Total_MMBTU_Ton_MTD;
                    oElementoDOR_5_12.ValorAno = oFAC.Elementos[0].Total_MMBTU_Ton_YTD;
                }      

                //oElementoDOR_5_12.ValorDia = "";
                //if (!(oElementoDOR_5_9.ValorDia.Trim() == "" && oElementoDOR_5_10.ValorDia.Trim() == "" && oElementoDOR_5_11.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = oElementoDOR_5_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorDia.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorDia.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_11.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_11.ValorDia.Trim().Replace(",", ""));

                //    oElementoDOR_5_12.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_5_12.ValorMes = "";
                //if (!(oElementoDOR_5_9.ValorMes.Trim() == "" && oElementoDOR_5_10.ValorMes.Trim() == "" && oElementoDOR_5_11.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = oElementoDOR_5_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorMes.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorMes.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_11.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_11.ValorMes.Trim().Replace(",", ""));

                //    oElementoDOR_5_12.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_5_12.ValorAno = "";
                //if (!(oElementoDOR_5_9.ValorAno.Trim() == "" && oElementoDOR_5_10.ValorAno.Trim() == "" && oElementoDOR_5_11.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = oElementoDOR_5_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorAno.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorAno.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_11.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_11.ValorAno.Trim().Replace(",", ""));

                //    oElementoDOR_5_12.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_12);


                // 5.13) (MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas)
                ElementoDOR oElementoDOR_5_13 = new ElementoDOR();
                oElementoDOR_5_13.Orden = 13;
                oElementoDOR_5_13.Padre = "";
                oElementoDOR_5_13.Nombre = "SPECIFIC HEAT CONSUMTION - Production";
                oElementoDOR_5_13.Origen = "(MMBtu/ton of clinker coal) * (MMBtu/ton of clinker gas)";
                oElementoDOR_5_13.Unidad = "MMBTU/TON";

                oElementoDOR_5_13.ValorDia = "";
                oElementoDOR_5_13.ValorMes = "";
                oElementoDOR_5_13.ValorAno = "";
                if (oFAC.Elementos.Count > 0)
                {
                    oElementoDOR_5_13.ValorDia = oFAC.Elementos[0].Process_MMBTU_Ton_Today;
                    oElementoDOR_5_13.ValorMes = oFAC.Elementos[0].Process_MMBTU_Ton_MTD;
                    oElementoDOR_5_13.ValorAno = oFAC.Elementos[0].Process_MMBTU_Ton_YTD;
                }    

                //oElementoDOR_5_13.ValorDia = "";
                //if (!(oElementoDOR_5_9.ValorDia.Trim() == "" && oElementoDOR_5_10.ValorDia.Trim() == ""))
                //{
                //    double nValorDia = oElementoDOR_5_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorDia.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorDia.Trim().Replace(",", ""));

                //    oElementoDOR_5_13.ValorDia = nValorDia.ToString("###,###,###.00");
                //}

                //oElementoDOR_5_13.ValorMes = "";
                //if (!(oElementoDOR_5_9.ValorMes.Trim() == "" && oElementoDOR_5_10.ValorMes.Trim() == ""))
                //{
                //    double nValorMes = oElementoDOR_5_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorMes.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorMes.Trim().Replace(",", ""));

                //    oElementoDOR_5_13.ValorMes = nValorMes.ToString("###,###,###.00");
                //}

                //oElementoDOR_5_13.ValorAno = "";
                //if (!(oElementoDOR_5_9.ValorAno.Trim() == "" && oElementoDOR_5_10.ValorAno.Trim() == ""))
                //{
                //    double nValorAno = oElementoDOR_5_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_9.ValorAno.Trim().Replace(",", "")) +
                //                       oElementoDOR_5_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_5_10.ValorAno.Trim().Replace(",", ""));

                //    oElementoDOR_5_13.ValorAno = nValorAno.ToString("###,###,###.00");
                //}

                oBloqueDOR_5.Elementos.Add(oElementoDOR_5_13);

                oBloqueDOR_5.Elementos.Remove(oElementoDOR_5_9);
                oBloqueDOR_5.Elementos.Remove(oElementoDOR_5_10);
                oBloqueDOR_5.Elementos.Remove(oElementoDOR_5_11);

                oBloquesDOR.Add(oBloqueDOR_5);




                // 6.) BLOQUE CEMENT GRINDING
                BloqueDOR oBloqueDOR_6 = new BloqueDOR();
                oBloqueDOR_6.Nombre = "CEMENT GRINDING";
                oBloqueDOR_6.Orden = 9;
                oBloqueDOR_6.CssClass = "col-6";
                oBloqueDOR_6.EsUsagePorc = false;
                oBloqueDOR_6.Elementos = new List<ElementoDOR>();

                // 6.1) 62X.CEMSI1
                ElementoDOR oElementoDOR_6_1 = new ElementoDOR();
                oElementoDOR_6_1.Orden = 1;
                oElementoDOR_6_1.Padre = "62X.Mill Roller";
                oElementoDOR_6_1.Nombre = "GRINDING AID";
                oElementoDOR_6_1.Origen = "62X.CEMSI1";
                oElementoDOR_6_1.Unidad = "LB";
                oElementoDOR_6_1 = CalcularElementoDOR(oElementoDOR_6_1, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_1);

                // 6.2) 62X.LIMSI6
                ElementoDOR oElementoDOR_6_2 = new ElementoDOR();
                oElementoDOR_6_2.Orden = 2;
                oElementoDOR_6_2.Padre = "62X.Mill Roller";
                oElementoDOR_6_2.Nombre = "HIGH LIMESTONE";
                oElementoDOR_6_2.Origen = "62X.LIMSI6";
                oElementoDOR_6_2.Unidad = "sT";
                oElementoDOR_6_2 = CalcularElementoDOR(oElementoDOR_6_2, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_2);

                // 6.3) 62X.GYPSI2
                ElementoDOR oElementoDOR_6_3 = new ElementoDOR();
                oElementoDOR_6_3.Orden = 3;
                oElementoDOR_6_3.Padre = "62X.Mill Roller";
                oElementoDOR_6_3.Nombre = "GYPSUM";
                oElementoDOR_6_3.Origen = "62X.GYPSI2";
                oElementoDOR_6_3.Unidad = "sT";
                oElementoDOR_6_3 = CalcularElementoDOR(oElementoDOR_6_3, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_3);

                // 6.4) 62X.CKDC1
                ElementoDOR oElementoDOR_6_4 = new ElementoDOR();
                oElementoDOR_6_4.Orden = 4;
                oElementoDOR_6_4.Padre = "62X.Mill Roller";
                oElementoDOR_6_4.Nombre = "CKD";
                oElementoDOR_6_4.Origen = "62X.CKDC1";
                oElementoDOR_6_4.Unidad = "sT";
                oElementoDOR_6_4 = CalcularElementoDOR(oElementoDOR_6_4, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_4);

                // 6.5) 62X.CLKBK20
                ElementoDOR oElementoDOR_6_5 = new ElementoDOR();
                oElementoDOR_6_5.Orden = 5;
                oElementoDOR_6_5.Padre = "62X.Mill Roller";
                oElementoDOR_6_5.Nombre = "CLINKER BK";
                oElementoDOR_6_5.Origen = "62X.CLKBK20";
                oElementoDOR_6_5.Unidad = "sT";
                oElementoDOR_6_5 = CalcularElementoDOR(oElementoDOR_6_5, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_5);

                // 6.6) 62X.TCLSIP
                ElementoDOR oElementoDOR_6_6 = new ElementoDOR();
                oElementoDOR_6_6.Orden = 6;
                oElementoDOR_6_6.Padre = "62X.Mill Roller";
                oElementoDOR_6_6.Nombre = "PAULDEN CLINKER";
                oElementoDOR_6_6.Origen = "62X.TCLSIP";
                oElementoDOR_6_6.Unidad = "sT";
                oElementoDOR_6_6 = CalcularElementoDOR(oElementoDOR_6_6, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_6);

                // 6.7) 62X.TCLSI1
                ElementoDOR oElementoDOR_6_7 = new ElementoDOR();
                oElementoDOR_6_7.Orden = 7;
                oElementoDOR_6_7.Padre = "62X.Mill Roller";
                oElementoDOR_6_7.Nombre = "CLINKER";
                oElementoDOR_6_7.Origen = "62X.TCLSI1";
                oElementoDOR_6_7.Unidad = "sT";
                oElementoDOR_6_7 = CalcularElementoDOR(oElementoDOR_6_7, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_7);

                // 6.8) 62X.TCLSI5
                ElementoDOR oElementoDOR_6_8 = new ElementoDOR();
                oElementoDOR_6_8.Orden = 8;
                oElementoDOR_6_8.Padre = "62X.Mill Roller";
                oElementoDOR_6_8.Nombre = "CEMENT";
                oElementoDOR_6_8.Origen = "62X.TCLSI5";
                oElementoDOR_6_8.Unidad = "sT";
                oElementoDOR_6_8 = CalcularElementoDOR(oElementoDOR_6_8, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_8);

                // 6.9) 62X.CEMENT BK
                ElementoDOR oElementoDOR_6_9 = new ElementoDOR();
                oElementoDOR_6_9.Orden = 9;
                oElementoDOR_6_9.Padre = "62X.Mill Ball";
                oElementoDOR_6_9.Nombre = "CEMENT BK -Prod";
                oElementoDOR_6_9.Origen = "62X.CEMENT BK";
                oElementoDOR_6_9.Unidad = "sT";
                oElementoDOR_6_9 = CalcularElementoDOR(oElementoDOR_6_9, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_9);

                // 6.10) 62X.CEMSI3
                ElementoDOR oElementoDOR_6_10 = new ElementoDOR();
                oElementoDOR_6_10.Orden = 10;
                oElementoDOR_6_10.Padre = "62X.Mill Roller";
                oElementoDOR_6_10.Nombre = "HOURS ROLLER PRESS";
                oElementoDOR_6_10.Origen = "62X.CEMSI3";
                oElementoDOR_6_10.Unidad = "Hrs.";
                oElementoDOR_6_10 = CalcularElementoDOR(oElementoDOR_6_10, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_10);

                // 6.11) 62X.CEMSI5
                ElementoDOR oElementoDOR_6_11 = new ElementoDOR();
                oElementoDOR_6_11.Orden = 11;
                oElementoDOR_6_11.Padre = "62X.Mill Ball";
                oElementoDOR_6_11.Nombre = "HOURS CEMENT GRINDING";
                oElementoDOR_6_11.Origen = "62X.CEMSI5";
                oElementoDOR_6_11.Unidad = "Hrs.";
                oElementoDOR_6_11 = CalcularElementoDOR(oElementoDOR_6_11, oFormulaciones, ldt_Date);
                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_11);

                // 6.12) 62X.TCLSI5 / 62X.CEMSI3
                ElementoDOR oElementoDOR_6_12 = new ElementoDOR();
                oElementoDOR_6_12.Orden = 12;
                oElementoDOR_6_12.Padre = "";
                oElementoDOR_6_12.Nombre = "PRODUCTION RATE-RP";
                oElementoDOR_6_12.Origen = "62X.TCLSI5 / 62X.CEMSI3";
                oElementoDOR_6_12.Unidad = "sT/Hrs.";

                oElementoDOR_6_12.ValorDia = "";
                if (!(oElementoDOR_6_8.ValorDia.Trim() == "" && oElementoDOR_6_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_6_12.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_6_12.ValorMes = "";
                if (!(oElementoDOR_6_8.ValorMes.Trim() == "" && oElementoDOR_6_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_6_12.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_6_12.ValorAno = "";
                if (!(oElementoDOR_6_8.ValorAno.Trim() == "" && oElementoDOR_6_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_10.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_6_12.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_6.Elementos.Add(oElementoDOR_6_12);

                oBloquesDOR.Add(oBloqueDOR_6);



                // 7.) BLOQUE RAW MILL USAGE %
                BloqueDOR oBloqueDOR_7 = new BloqueDOR();
                oBloqueDOR_7.Nombre = "RAW MILL USAGE %";
                oBloqueDOR_7.Orden = 3;
                oBloqueDOR_7.CssClass = "col-6";
                oBloqueDOR_7.EsUsagePorc = true;
                oBloqueDOR_7.Elementos = new List<ElementoDOR>();

                // 7.1) (LOW LIMESTONE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_1 = new ElementoDOR();
                oElementoDOR_7_1.Orden = 1;
                oElementoDOR_7_1.Padre = "";
                oElementoDOR_7_1.Nombre = "LOW LIMESTONE";
                oElementoDOR_7_1.Origen = "(LOW LIMESTONE / RAW MEAL) * 100";
                oElementoDOR_7_1.Unidad = "";

                oElementoDOR_7_1.ValorDia = "";
                if (!(oElementoDOR_2_1.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_1.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_1.ValorMes = "";
                if (!(oElementoDOR_2_1.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_1.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_1.ValorAno = "";
                if (!(oElementoDOR_2_1.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_1.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_1);


                // 7.2) (ALUMINA / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_2 = new ElementoDOR();
                oElementoDOR_7_2.Orden = 2;
                oElementoDOR_7_2.Padre = "";
                oElementoDOR_7_2.Nombre = "ALUMINA";
                oElementoDOR_7_2.Origen = "(ALUMINA / RAW MEAL) * 100";
                oElementoDOR_7_2.Unidad = "";

                oElementoDOR_7_2.ValorDia = "";
                if (!(oElementoDOR_2_4.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_2.ValorMes = "";
                if (!(oElementoDOR_2_4.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_2.ValorAno = "";
                if (!(oElementoDOR_2_4.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_2);



                // 7.3) (BAUXITE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_3 = new ElementoDOR();
                oElementoDOR_7_3.Orden = 3;
                oElementoDOR_7_3.Padre = "";
                oElementoDOR_7_3.Nombre = "BAUXITE";
                oElementoDOR_7_3.Origen = "(BAUXITE / RAW MEAL) * 100";
                oElementoDOR_7_3.Unidad = "";

                oElementoDOR_7_3.ValorDia = "";
                if (!(oElementoDOR_2_5.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_5.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_3.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_3.ValorMes = "";
                if (!(oElementoDOR_2_5.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_5.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_3.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_3.ValorAno = "";
                if (!(oElementoDOR_2_5.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_5.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_3.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_3);


                // 7.4) (IRON ORE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_4 = new ElementoDOR();
                oElementoDOR_7_4.Orden = 4;
                oElementoDOR_7_4.Padre = "";
                oElementoDOR_7_4.Nombre = "IRON ORE";
                oElementoDOR_7_4.Origen = "(IRON ORE / RAW MEAL) * 100";
                oElementoDOR_7_4.Unidad = "";

                oElementoDOR_7_4.ValorDia = "";
                if (!(oElementoDOR_2_6.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_6.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_4.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_4.ValorMes = "";
                if (!(oElementoDOR_2_6.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_6.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_4.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_4.ValorAno = "";
                if (!(oElementoDOR_2_6.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_6.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_4.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_4);



                // 7.5) (HEMATITE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_5 = new ElementoDOR();
                oElementoDOR_7_5.Orden = 5;
                oElementoDOR_7_5.Padre = "";
                oElementoDOR_7_5.Nombre = "HEMATITE";
                oElementoDOR_7_5.Origen = "(HEMATITE / RAW MEAL) * 100";
                oElementoDOR_7_5.Unidad = "";

                oElementoDOR_7_5.ValorDia = "";
                if (!(oElementoDOR_2_7.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_7.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_5.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_5.ValorMes = "";
                if (!(oElementoDOR_2_7.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_7.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_5.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_5.ValorAno = "";
                if (!(oElementoDOR_2_7.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_7.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_5.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_5);



                // 7.6) (MILL SCALE / RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_6 = new ElementoDOR();
                oElementoDOR_7_6.Orden = 6;
                oElementoDOR_7_6.Padre = "";
                oElementoDOR_7_6.Nombre = "MILL SCALE";
                oElementoDOR_7_6.Origen = "(MILL SCALE / RAW MEAL) * 100";
                oElementoDOR_7_6.Unidad = "";

                oElementoDOR_7_6.ValorDia = "";
                if (!(oElementoDOR_2_8.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_8.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_6.ValorMes = "";
                if (!(oElementoDOR_2_8.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_8.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_6.ValorAno = "";
                if (!(oElementoDOR_2_8.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_8.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_6);




                // 7.7) (HIGH LIMESTONE/ RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_7 = new ElementoDOR();
                oElementoDOR_7_7.Orden = 7;
                oElementoDOR_7_7.Padre = "";
                oElementoDOR_7_7.Nombre = "HIGH LIMESTONE";
                oElementoDOR_7_7.Origen = "(HIGH LIMESTONE / RAW MEAL) * 100";
                oElementoDOR_7_7.Unidad = "";

                oElementoDOR_7_7.ValorDia = "";
                if (!(oElementoDOR_2_2.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_7.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_7.ValorMes = "";
                if (!(oElementoDOR_2_2.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_7.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_7.ValorAno = "";
                if (!(oElementoDOR_2_2.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_7.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_7);



                // 7.8) (MIX LIMESTONE/ RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_8 = new ElementoDOR();
                oElementoDOR_7_8.Orden = 8;
                oElementoDOR_7_8.Padre = "";
                oElementoDOR_7_8.Nombre = "MIX LIMESTONE";
                oElementoDOR_7_8.Origen = "(MIX LIMESTONE / RAW MEAL) * 100";
                oElementoDOR_7_8.Unidad = "";

                oElementoDOR_7_8.ValorDia = "";
                if (!(oElementoDOR_2_3.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_8.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_8.ValorMes = "";
                if (!(oElementoDOR_2_3.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_8.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_8.ValorAno = "";
                if (!(oElementoDOR_2_3.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_8.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_8);



                // 7.9) (GYPSUM/ RAW MEAL) * 100
                ElementoDOR oElementoDOR_7_9 = new ElementoDOR();
                oElementoDOR_7_9.Orden = 9;
                oElementoDOR_7_9.Padre = "";
                oElementoDOR_7_9.Nombre = "GYPSUM";
                oElementoDOR_7_9.Origen = "(GYPSUM / RAW MEAL) * 100";
                oElementoDOR_7_9.Unidad = "";

                oElementoDOR_7_9.ValorDia = "";
                if (!(oElementoDOR_2_9.ValorDia.Trim() == "" && oElementoDOR_2_10.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_2_9.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_9.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_7_9.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_9.ValorMes = "";
                if (!(oElementoDOR_2_9.ValorMes.Trim() == "" && oElementoDOR_2_10.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_2_9.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_9.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_7_9.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_7_9.ValorAno = "";
                if (!(oElementoDOR_2_9.ValorAno.Trim() == "" && oElementoDOR_2_10.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_2_9.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_9.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_2_10.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_7_9.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_7.Elementos.Add(oElementoDOR_7_9);



                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_7_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_2.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_3.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_3.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_4.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_4.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_5.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_5.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_6.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_6.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_7.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_7.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_8.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_8.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_9.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_9.ValorDia.Trim().Replace(",", ""));
                }


                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;
                  
                    if (oElementoDOR_2_1.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_1.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_2.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_3.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_3.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_4.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_4.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_5.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_5.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_6.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_6.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_7.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_7.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_8.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_8.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_9.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_9.ValorDia.Trim().Replace(",", ""));
                    }


                    if (sumaComponentes == (oElementoDOR_2_10.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_7.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 9).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;
                if (oElementoDOR_7_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_2.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_3.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_3.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_4.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_4.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_5.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_5.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_6.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_6.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_7.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_7.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_8.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_8.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_9.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_9.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != 100)
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_2_1.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_1.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_2.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_3.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_3.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_4.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_4.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_5.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_5.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_6.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_6.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_7.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_7.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_8.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_8.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_9.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_9.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_2_10.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_7.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 9).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - ano
                sumaPorcentajes = 0;
                if (oElementoDOR_7_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_2.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_3.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_3.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_4.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_4.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_5.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_5.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_6.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_6.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_7.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_7.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_8.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_8.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_7_9.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_7_9.ValorAno.Trim().Replace(",", ""));
                }


                if (sumaPorcentajes != 100)
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;
                    if (oElementoDOR_2_1.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_1.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_2.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_3.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_3.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_4.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_4.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_5.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_5.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_6.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_6.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_7.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_7.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_8.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_8.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_2_9.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_2_9.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_2_10.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_2_10.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_7.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 9).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }



                oBloquesDOR.Add(oBloqueDOR_7);



                // 8.) COAL MILL USAGE %
                BloqueDOR oBloqueDOR_8 = new BloqueDOR();
                oBloqueDOR_8.Nombre = "COAL MILL USAGE %";
                oBloqueDOR_8.Orden = 5;
                oBloqueDOR_8.CssClass = "col-6";
                oBloqueDOR_8.EsUsagePorc = true;
                oBloqueDOR_8.Elementos = new List<ElementoDOR>();


                // 8.1) (COAL BULK / PULVERIZED FUEL) * 100
                ElementoDOR oElementoDOR_8_1 = new ElementoDOR();
                oElementoDOR_8_1.Orden = 1;
                oElementoDOR_8_1.Padre = "";
                oElementoDOR_8_1.Nombre = "COAL BULK";
                oElementoDOR_8_1.Origen = "(COAL BULK / PULVERIZED FUEL) * 100";
                oElementoDOR_8_1.Unidad = "";

                oElementoDOR_8_1.ValorDia = "";
                if (!(oElementoDOR_3_1.ValorDia.Trim() == "" && oElementoDOR_3_3.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_3_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_1.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_8_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_1.ValorMes = "";
                if (!(oElementoDOR_3_1.ValorMes.Trim() == "" && oElementoDOR_3_3.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_3_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_1.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_8_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_1.ValorAno = "";
                if (!(oElementoDOR_3_1.ValorAno.Trim() == "" && oElementoDOR_3_3.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_3_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_1.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_8_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_8.Elementos.Add(oElementoDOR_8_1);



                // 8.2) (PETCOKE BULK / PULVERIZED FUEL) * 100
                ElementoDOR oElementoDOR_8_2 = new ElementoDOR();
                oElementoDOR_8_2.Orden = 2;
                oElementoDOR_8_2.Padre = "";
                oElementoDOR_8_2.Nombre = "PETCOKE BULK";
                oElementoDOR_8_2.Origen = "(PETCOKE BULK / PULVERIZED FUEL) * 100";
                oElementoDOR_8_2.Unidad = "";

                oElementoDOR_8_2.ValorDia = "";
                if (!(oElementoDOR_3_2.ValorDia.Trim() == "" && oElementoDOR_3_3.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_3_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_8_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_2.ValorMes = "";
                if (!(oElementoDOR_3_2.ValorMes.Trim() == "" && oElementoDOR_3_3.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_3_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_8_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_8_2.ValorAno = "";
                if (!(oElementoDOR_3_2.ValorAno.Trim() == "" && oElementoDOR_3_3.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_3_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_3_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_8_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_8.Elementos.Add(oElementoDOR_8_2);


                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_8_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_8_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_2.ValorDia.Trim().Replace(",", ""));
                }
               
                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_3_1.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_1.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_3_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_2.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_3_3.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_8.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_8_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_8_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_2.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_3_1.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_1.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_3_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_2.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_3_3.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_8.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_8_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_8_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_8_2.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_3_1.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_1.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_3_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_3_2.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_3_3.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_3_3.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_8.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 2).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }



                oBloquesDOR.Add(oBloqueDOR_8);



                // 9.) MATERIAL USAGE %
                BloqueDOR oBloqueDOR_9 = new BloqueDOR();
                oBloqueDOR_9.Nombre = "MATERIAL USAGE %";
                oBloqueDOR_9.Orden = 10;
                oBloqueDOR_9.CssClass = "col-6";
                oBloqueDOR_9.EsUsagePorc = true;
                oBloqueDOR_9.Elementos = new List<ElementoDOR>();


                // 9.1) (GYPSUM / CEMENT) * 100
                ElementoDOR oElementoDOR_9_1 = new ElementoDOR();
                oElementoDOR_9_1.Orden = 1;
                oElementoDOR_9_1.Padre = "";
                oElementoDOR_9_1.Nombre = "GYPSUM";
                oElementoDOR_9_1.Origen = "(GYPSUM / CEMENT) * 100";
                oElementoDOR_9_1.Unidad = "";

                oElementoDOR_9_1.ValorDia = "";
                if (!(oElementoDOR_6_3.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_1.ValorMes = "";
                if (!(oElementoDOR_6_3.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_1.ValorAno = "";
                if (!(oElementoDOR_6_3.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_1);



                // 9.2) (CLINKER PAULDEN / CEMENT) * 100
                ElementoDOR oElementoDOR_9_2 = new ElementoDOR();
                oElementoDOR_9_2.Orden = 2;
                oElementoDOR_9_2.Padre = "";
                oElementoDOR_9_2.Nombre = "CLINKER PAULDEN";
                oElementoDOR_9_2.Origen = "(CLINKER PAULDEN / CEMENT) * 100";
                oElementoDOR_9_2.Unidad = "";

                oElementoDOR_9_2.ValorDia = "";
                if (!(oElementoDOR_6_6.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_6.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_6.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_2.ValorMes = "";
                if (!(oElementoDOR_6_6.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_6.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_6.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_2.ValorAno = "";
                if (!(oElementoDOR_6_6.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_6.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_6.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_2);



                // 9.3) (CKD / CEMENT) * 100
                ElementoDOR oElementoDOR_9_3 = new ElementoDOR();
                oElementoDOR_9_3.Orden = 3;
                oElementoDOR_9_3.Padre = "";
                oElementoDOR_9_3.Nombre = "CKD";
                oElementoDOR_9_3.Origen = "(CKD / CEMENT) * 100";
                oElementoDOR_9_3.Unidad = "";

                oElementoDOR_9_3.ValorDia = "";
                if (!(oElementoDOR_6_4.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_3.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_3.ValorMes = "";
                if (!(oElementoDOR_6_4.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_3.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_3.ValorAno = "";
                if (!(oElementoDOR_6_4.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_3.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_3);



                // 9.4) (CLINKER BKR / CEMENT) * 100
                ElementoDOR oElementoDOR_9_4 = new ElementoDOR();
                oElementoDOR_9_4.Orden = 4;
                oElementoDOR_9_4.Padre = "";
                oElementoDOR_9_4.Nombre = "CLINKER BKR";
                oElementoDOR_9_4.Origen = "(CLINKER BKR / CEMENT) * 100";
                oElementoDOR_9_4.Unidad = "";

                oElementoDOR_9_4.ValorDia = "";
                if (!(oElementoDOR_6_5.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_5.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_5.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_4.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_4.ValorMes = "";
                if (!(oElementoDOR_6_5.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_5.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_5.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_4.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_4.ValorAno = "";
                if (!(oElementoDOR_6_5.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_5.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_5.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_4.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_4);



                // 9.5) (CLINKER / CEMENT) * 100
                ElementoDOR oElementoDOR_9_5 = new ElementoDOR();
                oElementoDOR_9_5.Orden = 5;
                oElementoDOR_9_5.Padre = "";
                oElementoDOR_9_5.Nombre = "CLINKER";
                oElementoDOR_9_5.Origen = "(CLINKER / CEMENT) * 100";
                oElementoDOR_9_5.Unidad = "";

                oElementoDOR_9_5.ValorDia = "";
                if (!(oElementoDOR_6_7.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_7.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_7.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_5.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_5.ValorMes = "";
                if (!(oElementoDOR_6_7.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_7.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_7.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_5.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_5.ValorAno = "";
                if (!(oElementoDOR_6_7.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_7.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_7.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_5.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_5);



                // 9.6) (HIGH LIMESTONE / CEMENT) * 100
                ElementoDOR oElementoDOR_9_6 = new ElementoDOR();
                oElementoDOR_9_6.Orden = 6;
                oElementoDOR_9_6.Padre = "";
                oElementoDOR_9_6.Nombre = "HIGH LIMESTONE";
                oElementoDOR_9_6.Origen = "(HIGH LIMESTONE / CEMENT) * 100";
                oElementoDOR_9_6.Unidad = "";

                oElementoDOR_9_6.ValorDia = "";
                if (!(oElementoDOR_6_2.ValorDia.Trim() == "" && oElementoDOR_6_8.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_6_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_2.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", "")));
                        nValorDia = nValorDia * 100;
                        oElementoDOR_9_6.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_6.ValorMes = "";
                if (!(oElementoDOR_6_2.ValorMes.Trim() == "" && oElementoDOR_6_8.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_6_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_2.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", "")));
                        nValorMes = nValorMes * 100;
                        oElementoDOR_9_6.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_9_6.ValorAno = "";
                if (!(oElementoDOR_6_2.ValorAno.Trim() == "" && oElementoDOR_6_8.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_6_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_2.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_6_8.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", "")));
                        nValorAno = nValorAno * 100;
                        oElementoDOR_9_6.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_9.Elementos.Add(oElementoDOR_9_6);



                //validamos si ajustamos los porcentajes - dia
                sumaPorcentajes = 0;

                if (oElementoDOR_9_1.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_1.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_2.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_2.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_3.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_3.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_4.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_4.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_5.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_5.ValorDia.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_6.ValorDia.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_6.ValorDia.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_6_2.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_2.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_3.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_3.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_4.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_4.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_5.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_5.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_6.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_6.ValorDia.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_7.ValorDia.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_7.ValorDia.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_6_8.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorDia.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_9.Elementos.OrderByDescending(x => x.ValorDia.Trim() == "" ? 0 : Convert.ToDouble(x.ValorDia.Trim().Replace(",", ""))).Where(x => x.Orden <= 6).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorDia.Trim() != "")
                            {
                                oElementosTemp[0].ValorDia = ((oElementosTemp[0].ValorDia.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorDia.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - mes
                sumaPorcentajes = 0;

                if (oElementoDOR_9_1.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_1.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_2.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_2.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_3.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_3.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_4.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_4.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_5.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_5.ValorMes.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_6.ValorMes.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_6.ValorMes.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_6_2.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_2.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_3.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_3.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_4.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_4.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_5.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_5.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_6.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_6.ValorMes.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_7.ValorMes.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_7.ValorMes.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_6_8.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorMes.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_9.Elementos.OrderByDescending(x => x.ValorMes.Trim() == "" ? 0 : Convert.ToDouble(x.ValorMes.Trim().Replace(",", ""))).Where(x => x.Orden <= 6).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorMes.Trim() != "")
                            {
                                oElementosTemp[0].ValorMes = ((oElementosTemp[0].ValorMes.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorMes.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }


                //validamos si ajustamos los porcentajes - año
                sumaPorcentajes = 0;

                if (oElementoDOR_9_1.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_1.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_2.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_2.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_3.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_3.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_4.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_4.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_5.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_5.ValorAno.Trim().Replace(",", ""));
                }
                if (oElementoDOR_9_6.ValorAno.Trim() != "")
                {
                    sumaPorcentajes = sumaPorcentajes + Convert.ToDouble(oElementoDOR_9_6.ValorAno.Trim().Replace(",", ""));
                }

                if (sumaPorcentajes != Convert.ToDouble(100))
                {
                    //validamos si la suma de componentes es igual a la suma calculada
                    double sumaComponentes = 0;

                    if (oElementoDOR_6_2.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_2.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_3.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_3.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_4.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_4.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_5.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_5.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_6.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_6.ValorAno.Trim().Replace(",", ""));
                    }
                    if (oElementoDOR_6_7.ValorAno.Trim() != "")
                    {
                        sumaComponentes = sumaComponentes + Convert.ToDouble(oElementoDOR_6_7.ValorAno.Trim().Replace(",", ""));
                    }

                    if (sumaComponentes == (oElementoDOR_6_8.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementoDOR_6_8.ValorAno.Trim().Replace(",", ""))))
                    {
                        double difPorc = 100 - sumaPorcentajes;
                        List<ElementoDOR> oElementosTemp = oBloqueDOR_9.Elementos.OrderByDescending(x => x.ValorAno.Trim() == "" ? 0 : Convert.ToDouble(x.ValorAno.Trim().Replace(",", ""))).Where(x => x.Orden <= 6).ToList();
                        if (oElementosTemp.Count > 0)
                        {
                            if (oElementosTemp[0].ValorAno.Trim() != "")
                            {
                                oElementosTemp[0].ValorAno = ((oElementosTemp[0].ValorAno.Trim() == "" ? 0 : Convert.ToDouble(oElementosTemp[0].ValorAno.Trim().Replace(",", ""))) + difPorc).ToString("###,###,###.00");
                            }
                        }
                    }
                }



                oBloquesDOR.Add(oBloqueDOR_9);


                // 10.) RATIOS
                BloqueDOR oBloqueDOR_10 = new BloqueDOR();
                oBloqueDOR_10.Nombre = "RATIOS";
                oBloqueDOR_10.Orden = 11;
                oBloqueDOR_10.CssClass = "col-12";
                oBloqueDOR_10.EsUsagePorc = false;
                oBloqueDOR_10.Elementos = new List<ElementoDOR>();


                // 10.1) (RAW FEED / CLINKER)
                ElementoDOR oElementoDOR_10_1 = new ElementoDOR();
                oElementoDOR_10_1.Orden = 1;
                oElementoDOR_10_1.Padre = "";
                oElementoDOR_10_1.Nombre = "RATIO 1";
                oElementoDOR_10_1.Origen = "(RAW FEED / CLINKER)";
                oElementoDOR_10_1.Unidad = "";

                oElementoDOR_10_1.ValorDia = "";
                if (!(oElementoDOR_4_3.ValorDia.Trim() == "" && oElementoDOR_4_4.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_4_3.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_3.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_10_1.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_1.ValorMes = "";
                if (!(oElementoDOR_4_3.ValorMes.Trim() == "" && oElementoDOR_4_4.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_4_3.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_3.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_10_1.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_1.ValorAno = "";
                if (!(oElementoDOR_4_3.ValorAno.Trim() == "" && oElementoDOR_4_4.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_4_3.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_3.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_10_1.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_10.Elementos.Add(oElementoDOR_10_1);



                // 10.2) (CLINKER / ACTUAL KILN FEED)
                ElementoDOR oElementoDOR_10_2 = new ElementoDOR();
                oElementoDOR_10_2.Orden = 2;
                oElementoDOR_10_2.Padre = "";
                oElementoDOR_10_2.Nombre = "RATIO 2";
                oElementoDOR_10_2.Origen = "(CLINKER / ACTUAL KILN FEED)";
                oElementoDOR_10_2.Unidad = "";

                oElementoDOR_10_2.ValorDia = "";
                if (!(oElementoDOR_4_4.ValorDia.Trim() == "" && oElementoDOR_4_2.ValorDia.Trim() == ""))
                {
                    if ((oElementoDOR_4_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorDia.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorDia = (oElementoDOR_4_4.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorDia.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorDia.Trim().Replace(",", "")));
                        oElementoDOR_10_2.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_2.ValorMes = "";
                if (!(oElementoDOR_4_4.ValorMes.Trim() == "" && oElementoDOR_4_2.ValorMes.Trim() == ""))
                {
                    if ((oElementoDOR_4_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorMes.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorMes = (oElementoDOR_4_4.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorMes.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorMes.Trim().Replace(",", "")));
                        oElementoDOR_10_2.ValorMes = nValorMes.ToString("###,###,###.00");
                    }
                }

                oElementoDOR_10_2.ValorAno = "";
                if (!(oElementoDOR_4_4.ValorAno.Trim() == "" && oElementoDOR_4_2.ValorAno.Trim() == ""))
                {
                    if ((oElementoDOR_4_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorAno.Trim().Replace(",", ""))) != 0)
                    {
                        double nValorAno = (oElementoDOR_4_4.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_4.ValorAno.Trim().Replace(",", ""))) /
                                           (oElementoDOR_4_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_4_2.ValorAno.Trim().Replace(",", "")));
                        oElementoDOR_10_2.ValorAno = nValorAno.ToString("###,###,###.00");
                    }
                }

                oBloqueDOR_10.Elementos.Add(oElementoDOR_10_2);

                oBloquesDOR.Add(oBloqueDOR_10);


                // 11.) EQUIVALENCIES
                BloqueDOR oBloqueDOR_11 = new BloqueDOR();
                oBloqueDOR_11.Nombre = "EQUIVALENCIES";
                oBloqueDOR_11.Orden = 8;
                oBloqueDOR_11.CssClass = "col-12";
                oBloqueDOR_11.EsUsagePorc = false;
                oBloqueDOR_11.Elementos = new List<ElementoDOR>();


                // 11.1) MMBtu coal/coke
                ElementoDOR oElementoDOR_11_1 = new ElementoDOR();
                oElementoDOR_11_1.Orden = 1;
                oElementoDOR_11_1.Padre = "";
                oElementoDOR_11_1.Nombre = "EQUIVALENCE 1";
                oElementoDOR_11_1.Origen = "MMBtu coal/coke";

                oElementoDOR_11_1.Unidad = "BTU/LB";
                oElementoDOR_11_1.ValorDia = oElementoDOR_5_7.ValorDia;
                oElementoDOR_11_1.ValorMes = oElementoDOR_5_7.ValorMes;
                oElementoDOR_11_1.ValorAno = oElementoDOR_5_7.ValorAno;

                oElementoDOR_11_1.Unidad2 = "KILOCAL/KG";

                oElementoDOR_11_1.ValorDia2 = "";
                if (!(oElementoDOR_11_1.ValorDia.Trim() == ""))
                {
                    double nValorDia = (oElementoDOR_11_1.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_1.ValorDia.Trim().Replace(",", ""))) / 1.79998;
                    oElementoDOR_11_1.ValorDia2 = nValorDia.ToString("###,###,##0.00");
                }

                oElementoDOR_11_1.ValorMes2 = "";
                if (!(oElementoDOR_11_1.ValorMes.Trim() == ""))
                {
                    double nValorMes = (oElementoDOR_11_1.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_1.ValorMes.Trim().Replace(",", ""))) / 1.79998;
                    oElementoDOR_11_1.ValorMes2 = nValorMes.ToString("###,###,##0.00");
                }

                oElementoDOR_11_1.ValorAno2 = "";
                if (!(oElementoDOR_11_1.ValorAno.Trim() == ""))
                {
                    double nValorAno = (oElementoDOR_11_1.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_1.ValorAno.Trim().Replace(",", ""))) / 1.79998;
                    oElementoDOR_11_1.ValorAno2 = nValorAno.ToString("###,###,##0.00");
                }

                oBloqueDOR_11.Elementos.Add(oElementoDOR_11_1);



                // 11.2) MMBtu gas
                ElementoDOR oElementoDOR_11_2 = new ElementoDOR();
                oElementoDOR_11_2.Orden = 2;
                oElementoDOR_11_2.Padre = "";
                oElementoDOR_11_2.Nombre = "EQUIVALENCE 2";
                oElementoDOR_11_2.Origen = "MMBtu gas";

                oElementoDOR_11_2.Unidad = "BTU/CF";
                oElementoDOR_11_2.ValorDia = oElementoDOR_5_8.ValorDia;
                oElementoDOR_11_2.ValorMes = oElementoDOR_5_8.ValorMes;
                oElementoDOR_11_2.ValorAno = oElementoDOR_5_8.ValorAno;

                oElementoDOR_11_2.Unidad2 = "KILOCAL/M3";

                oElementoDOR_11_2.ValorDia2 = "";
                if (!(oElementoDOR_11_2.ValorDia.Trim() == ""))
                {
                    double nValorDia = ((oElementoDOR_11_2.ValorDia.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_2.ValorDia.Trim().Replace(",", ""))) / 3.96825) / 0.02832;
                    oElementoDOR_11_2.ValorDia2 = nValorDia.ToString("###,###,##0.00");
                }

                oElementoDOR_11_2.ValorMes2 = "";
                if (!(oElementoDOR_11_2.ValorMes.Trim() == ""))
                {
                    double nValorMes = ((oElementoDOR_11_2.ValorMes.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_2.ValorMes.Trim().Replace(",", ""))) / 3.96825) / 0.02832;
                    oElementoDOR_11_2.ValorMes2 = nValorMes.ToString("###,###,##0.00");
                }

                oElementoDOR_11_2.ValorAno2 = "";
                if (!(oElementoDOR_11_2.ValorAno.Trim() == ""))
                {
                    double nValorAno = ((oElementoDOR_11_2.ValorAno.Trim().Replace(",", "") == "" ? 0 : Convert.ToDouble(oElementoDOR_11_2.ValorAno.Trim().Replace(",", ""))) / 3.96825) / 0.02832;
                    oElementoDOR_11_2.ValorAno2 = nValorAno.ToString("###,###,##0.00");
                }

                oBloqueDOR_11.Elementos.Add(oElementoDOR_11_2);


                oBloquesDOR.Add(oBloqueDOR_11);


                List<BloqueDOR> oBloquesDOROrdenados = oBloquesDOR.OrderBy(x => x.Orden).ToList();

                return oBloquesDOROrdenados;

              
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerDOROriginal", "wsUNACEMPI", false);
                return new List<BloqueDOR>();
            }
        }


        public FAC ObtenerFACOriginal_old(string fecha)
        {
            FAC oFAC = new FAC();
            oFAC.Cabeceras = new List<CabeceraFAC>();
            oFAC.Elementos = new List<ElementoFAC>();

            List<ElementoFAC> oElementosFAC = new List<ElementoFAC>();
            ElementoFAC oElementoFAC = new ElementoFAC();

            List<CabeceraFAC> oCabecerasFAC = new List<CabeceraFAC>();
            CabeceraFAC oCabeceraFAC = new CabeceraFAC();

            //string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFACOriginal", "wsUNACEMPI", false);
                return oFAC;
            }

            try
            {
                DateTime dFechaIni = new DateTime(DateTime.Now.Year, 1, 1);
                List<Formulacion> oFormulaciones = ListarDeltasDeFormulacionOriginales("*", dFechaIni.ToString("yyyy-MM-dd"), fecha, "");
                List<FactorFormulacion> oFactores = ListarFactoresDeFormulacionEnRangoFecha(dFechaIni.ToString("yyyy-MM-dd"), fecha);

                //solo se muestran las fechas del mes actual
                DateTime dFechaIniMes = ldt_Date.AddDays(-(ldt_Date.Day - 1));
                DateTime dFechaTemp = dFechaIniMes;
                int i = 1;

                while (dFechaTemp <= ldt_Date)
                {
                    oElementoFAC = new ElementoFAC();
                    oElementoFAC.Fecha = dFechaTemp.ToString("yyyy-MM-dd");

                    FactorFormulacion oFactor = null;
                    Formulacion oFormulacion = null;


                    //41X.LHV.Pulv.Fuel.Btu
                    oElementoFAC.LHV_Pulv_Fuel_Btu = "";
                    oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.Pulv.Fuel.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                    //oFactor = oFactores.FirstOrDefault(x => x.Nombre == "322.Factor1" && Convert.ToDateTime(x.Fecha) <= dFechaTemp); 
                    if (i == 1)
                    {
                        //traemos cabecera
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 1;
                        oCabeceraFAC.Titulo = "";

                        if (oFactor != null)
                        {
                            oCabeceraFAC.Titulo = oFactor.Titulo;
                            oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFactor != null)
                        {
                            oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                        }
                    }



                    //41X.LHV.NaturalGas.Btu
                    oElementoFAC.LHV_NaturalGas_Btu = "";
                    oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.NaturalGas.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                    if (i == 1)
                    {
                        //traemos cabecera
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 2;
                        oCabeceraFAC.Titulo = "";

                        if (oFactor != null)
                        {
                            oCabeceraFAC.Titulo = oFactor.Titulo;
                            oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFactor != null)
                        {
                            oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                        }
                    }



                    //41X.CLISI2
                    oElementoFAC._41X_CLISI2_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI2");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 3;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI3
                    oElementoFAC._41X_CLISI3_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI3");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 4;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI100
                    oElementoFAC._41X_CLISI100_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI100");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 5;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI10
                    oElementoFAC._41X_CLISI10_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI10");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 6;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI10_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI10_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI55
                    oElementoFAC._41X_CLISI55_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI55");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 7;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI5
                    oElementoFAC._41X_CLISI5_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI5");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 8;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI5_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI5_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLIS12
                    oElementoFAC._41X_CLIS12_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 9;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLIS12_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLIS12_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //SUMARIZADO DEL MES: 41X.CLIS12
                    oElementoFAC.Clinker_Production_MTD = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (oFormulacion != null)
                    {
                        List<Delta> oDeltas = oFormulacion.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= dFechaIniMes && Convert.ToDateTime(x.Fecha) <= dFechaTemp && x.Valor.Trim() != "").ToList();
                        decimal nSuma = oDeltas.Sum(x => Convert.ToDecimal(x.Valor.Replace(",", "")));
                        oElementoFAC.Clinker_Production_MTD = nSuma.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 2;
                        oCabeceraFAC.Orden = 10;
                        oCabeceraFAC.Titulo = "CLINKER PRODUCTION";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL AÑO: 41X.CLIS12
                    oElementoFAC.Clinker_Production_YTD = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (oFormulacion != null)
                    {
                        List<Delta> oDeltas = oFormulacion.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= dFechaIni && Convert.ToDateTime(x.Fecha) <= dFechaTemp && x.Valor.Trim() != "").ToList();
                        decimal nSuma = oDeltas.Sum(x => Convert.ToDecimal(x.Valor.Replace(",", "")));
                        oElementoFAC.Clinker_Production_YTD = nSuma.ToString("###,###,###");
                    }


                    //DIARIO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_Today = "";
                    if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" && oElementoFAC._41X_CLISI2_Total.Trim() != "" && oElementoFAC._41X_CLISI3_Total.Trim() != "" &&
                        oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" && oElementoFAC._41X_CLISI100_Total.Trim() != "" && oElementoFAC._41X_CLISI55_Total.Trim() != "")
                    {
                        double nValor_LHV_Pulv_Fuel_Btu = Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                        double nValor_41X_CLISI2_Total = Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                        double nValor_41X_CLISI3_Total = Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                        double nValor_LHV_NaturalGas_Btu = Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                        double nValor_41X_CLISI100_Total = Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                        double nValor_41X_CLISI55_Total = Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));

                        //double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 6) +
                        //                nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI55_Total) / Math.Pow(10, 6);


                        Funciones.CapturarMensaje("Fecha: " + dFechaTemp.ToString("yyyy-MM-dd"));
                        Funciones.CapturarMensaje("LHV_Pulv_Fuel_Btu: " + nValor_LHV_Pulv_Fuel_Btu.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI2_Total: " + nValor_41X_CLISI2_Total.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI3_Total: " + nValor_41X_CLISI3_Total.ToString());
                        Funciones.CapturarMensaje("nValor_LHV_NaturalGas_Btu: " + nValor_LHV_NaturalGas_Btu.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI100_Total: " + nValor_41X_CLISI100_Total.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI55_Total: " + nValor_41X_CLISI55_Total.ToString());

                        double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 +
                                         nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI55_Total)) / Math.Pow(10, 6);

                        Funciones.CapturarMensaje("nValor: " + nValor.ToString());

                        oElementoFAC.Process_MMBTU_Today = nValor.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 11;
                        oCabeceraFAC.Titulo = "PROCESS MMBTU";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL MES: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_MTD = Obtener_Process_MMBTU(oFormulaciones, oFactores, dFechaIniMes, dFechaTemp);

                    //SUMARIZADO DEL AÑO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_YTD = Obtener_Process_MMBTU(oFormulaciones, oFactores, dFechaIni, dFechaTemp);


                    ////DIARIO:  LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    ////         LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    //oElementoFAC.Total_MMBTU_Today = "";
                    //if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" && oElementoFAC._41X_CLISI2_Total.Trim() != "" && oElementoFAC._41X_CLISI3_Total.Trim() != "" &&
                    //    oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" && oElementoFAC._41X_CLISI100_Total.Trim() != "" && oElementoFAC._41X_CLISI10_Total.Trim() != "" &&
                    //    oElementoFAC._41X_CLISI55_Total.Trim() != "" && oElementoFAC._41X_CLISI5_Total.Trim() != "")
                    //{
                    //    double nValor_LHV_Pulv_Fuel_Btu = Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                    //    double nValor_41X_CLISI2_Total = Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI3_Total = Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                    //    double nValor_LHV_NaturalGas_Btu = Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                    //    double nValor_41X_CLISI100_Total = Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI10_Total = Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI55_Total = Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI5_Total = Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                    //    //double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 5) +
                    //    //                nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total) / Math.Pow(10, 5);

                    //    double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000  +
                    //                    nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total)) / Math.Pow(10, 6);

                    //    oElementoFAC.Total_MMBTU_Today = nValor.ToString("###,###,###.00");
                    //}


                    //DIARIO:  LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //         LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_Today = "";
                    if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" || oElementoFAC._41X_CLISI2_Total.Trim() != "" || oElementoFAC._41X_CLISI3_Total.Trim() != "" ||
                        oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" || oElementoFAC._41X_CLISI100_Total.Trim() != "" || oElementoFAC._41X_CLISI10_Total.Trim() != "" ||
                        oElementoFAC._41X_CLISI55_Total.Trim() != "" || oElementoFAC._41X_CLISI5_Total.Trim() != "")
                    {
                        double nValor_LHV_Pulv_Fuel_Btu = oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                        double nValor_41X_CLISI2_Total = oElementoFAC._41X_CLISI2_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                        double nValor_41X_CLISI3_Total = oElementoFAC._41X_CLISI3_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                        double nValor_LHV_NaturalGas_Btu = oElementoFAC.LHV_NaturalGas_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                        double nValor_41X_CLISI100_Total = oElementoFAC._41X_CLISI100_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                        double nValor_41X_CLISI10_Total = oElementoFAC._41X_CLISI10_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                        double nValor_41X_CLISI55_Total = oElementoFAC._41X_CLISI55_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                        double nValor_41X_CLISI5_Total = oElementoFAC._41X_CLISI5_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                        double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 +
                                        nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total)) / Math.Pow(10, 6);

                        oElementoFAC.Total_MMBTU_Today = nValor.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 12;
                        oCabeceraFAC.Titulo = "TOTAL MMBTU";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL MES: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //                    LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_MTD = Obtener_Total_MMBTU(oFormulaciones, oFactores, dFechaIniMes, dFechaTemp);

                    //SUMARIZADO DEL AÑO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //                    LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_YTD = Obtener_Total_MMBTU(oFormulaciones, oFactores, dFechaIni, dFechaTemp);


                    //DIARIO: Process_MMBTU_Today/41X.CLIS12
                    oElementoFAC.Process_MMBTU_Ton_Today = "";
                    if (oElementoFAC.Process_MMBTU_Today.Trim() != "" && oElementoFAC._41X_CLIS12_Total.Trim() != "")
                    {
                        double nValor_Process_MMBTU_Today = Convert.ToDouble(oElementoFAC.Process_MMBTU_Today.Replace(",", ""));
                        double nValor_41X_CLIS12_Total = Convert.ToDouble(oElementoFAC._41X_CLIS12_Total.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_41X_CLIS12_Total != 0)
                        {
                            nValor = nValor_Process_MMBTU_Today / nValor_41X_CLIS12_Total;
                        }

                        oElementoFAC.Process_MMBTU_Ton_Today = nValor.ToString("###,###,###.00");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 13;
                        oCabeceraFAC.Titulo = "PROCESS MMBTU/TON";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //MENSUAL: Process_MMBTU_MTD/Clinker_Production_MTD
                    oElementoFAC.Process_MMBTU_Ton_MTD = "";
                    if (oElementoFAC.Process_MMBTU_MTD.Trim() != "" && oElementoFAC.Clinker_Production_MTD.Trim() != "")
                    {
                        double nValor_Process_MMBTU_MTD = Convert.ToDouble(oElementoFAC.Process_MMBTU_MTD.Replace(",", ""));
                        double nValor_Clinker_Production_MTD = Convert.ToDouble(oElementoFAC.Clinker_Production_MTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_MTD != 0)
                        {
                            nValor = nValor_Process_MMBTU_MTD / nValor_Clinker_Production_MTD;
                        }

                        oElementoFAC.Process_MMBTU_Ton_MTD = nValor.ToString("###,###,###.00");
                    }


                    //ANUAL: Process_MMBTU_YTD/Clinker_Production_YTD
                    oElementoFAC.Process_MMBTU_Ton_YTD = "";
                    if (oElementoFAC.Process_MMBTU_YTD.Trim() != "" && oElementoFAC.Clinker_Production_YTD.Trim() != "")
                    {
                        double nValor_Process_MMBTU_YTD = Convert.ToDouble(oElementoFAC.Process_MMBTU_YTD.Replace(",", ""));
                        double nValor_Clinker_Production_YTD = Convert.ToDouble(oElementoFAC.Clinker_Production_YTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_YTD != 0)
                        {
                            nValor = nValor_Process_MMBTU_YTD / nValor_Clinker_Production_YTD;
                        }

                        oElementoFAC.Process_MMBTU_Ton_YTD = nValor.ToString("###,###,###.00");
                    }

                    //DIARIO: Total_MMBTU_Today/41X.CLIS12
                    oElementoFAC.Total_MMBTU_Ton_Today = "";
                    if (oElementoFAC.Total_MMBTU_Today.Trim() != "" && oElementoFAC._41X_CLIS12_Total.Trim() != "")
                    {
                        double nValor_Total_MMBTU_Today = Convert.ToDouble(oElementoFAC.Total_MMBTU_Today.Replace(",", ""));
                        double nValor_41X_CLIS12_Total = Convert.ToDouble(oElementoFAC._41X_CLIS12_Total.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_41X_CLIS12_Total != 0)
                        {
                            nValor = nValor_Total_MMBTU_Today / nValor_41X_CLIS12_Total;
                        }

                        oElementoFAC.Total_MMBTU_Ton_Today = nValor.ToString("###,###,###.00");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 14;
                        oCabeceraFAC.Titulo = "TOTAL MMBTU/TON";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }

                    //MENSUAL: Total_MMBTU_MTD/Clinker_Production_MTD
                    oElementoFAC.Total_MMBTU_Ton_MTD = "";
                    if (oElementoFAC.Total_MMBTU_MTD.Trim() != "" && oElementoFAC.Clinker_Production_MTD.Trim() != "")
                    {
                        double nValor_Total_MMBTU_MTD = Convert.ToDouble(oElementoFAC.Total_MMBTU_MTD.Replace(",", ""));
                        double nValor_Clinker_Production_MTD = Convert.ToDouble(oElementoFAC.Clinker_Production_MTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_MTD != 0)
                        {
                            nValor = nValor_Total_MMBTU_MTD / nValor_Clinker_Production_MTD;
                        }

                        oElementoFAC.Total_MMBTU_Ton_MTD = nValor.ToString("###,###,###.00");
                    }

                    //ANUAL: Total_MMBTU_YTD/Clinker_Production_YTD
                    oElementoFAC.Total_MMBTU_Ton_YTD = "";
                    if (oElementoFAC.Total_MMBTU_YTD.Trim() != "" && oElementoFAC.Clinker_Production_YTD.Trim() != "")
                    {
                        double nValor_Total_MMBTU_YTD = Convert.ToDouble(oElementoFAC.Total_MMBTU_YTD.Replace(",", ""));
                        double nValor_Clinker_Production_YTD = Convert.ToDouble(oElementoFAC.Clinker_Production_YTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_YTD != 0)
                        {
                            nValor = nValor_Total_MMBTU_YTD / nValor_Clinker_Production_YTD;
                        }

                        oElementoFAC.Total_MMBTU_Ton_YTD = nValor.ToString("###,###,###.00");
                    }



                    oElementosFAC.Add(oElementoFAC);
                    dFechaTemp = dFechaTemp.AddDays(1);
                    i = i + 1;
                }

                oFAC.Cabeceras = oCabecerasFAC.OrderBy(x => x.Orden).ToList();
                oFAC.Elementos = oElementosFAC;
                return oFAC;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFAC", "wsUNACEMPI", false);
                oFAC = new FAC();
                oFAC.Cabeceras = new List<CabeceraFAC>();
                oFAC.Elementos = new List<ElementoFAC>();
                return oFAC;
            }

        }


        public FAC ObtenerFACOriginal(string fecha)
        {
            FAC oFAC = new FAC();
            oFAC.Cabeceras = new List<CabeceraFAC>();
            oFAC.Elementos = new List<ElementoFAC>();

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFACOriginal", "wsUNACEMPI", false);
                return oFAC;
            }
           
            try
            {
                DateTime dFechaIniMes = ldt_Date.AddDays(-(ldt_Date.Day - 1));
                oFAC = ObtenerFACOriginalEnRangoFechaDeMes(dFechaIniMes.ToString("yyyy-MM-dd"), fecha);
                return oFAC;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFACOriginal", "wsUNACEMPI", false);
                oFAC = new FAC();
                oFAC.Cabeceras = new List<CabeceraFAC>();
                oFAC.Elementos = new List<ElementoFAC>();
                return oFAC;
            }

        }


        public FAC ObtenerFACEnRangoFechaDeMes(string fechainimes, string fechafinmes)
        {
            FAC oFAC = new FAC();
            oFAC.Cabeceras = new List<CabeceraFAC>();
            oFAC.Elementos = new List<ElementoFAC>();

            List<ElementoFAC> oElementosFAC = new List<ElementoFAC>();
            ElementoFAC oElementoFAC = new ElementoFAC();

            List<CabeceraFAC> oCabecerasFAC = new List<CabeceraFAC>();
            CabeceraFAC oCabeceraFAC = new CabeceraFAC();

            //string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

            DateTime ldt_Date_Ini_Mes;
            try
            {
                ldt_Date_Ini_Mes = new DateTime(Convert.ToInt32(fechainimes.Substring(0, 4)), Convert.ToInt32(fechainimes.Substring(5, 2)), Convert.ToInt32(fechainimes.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFACEnRangoFechaDeMes", "wsUNACEMPI", false);
                return oFAC;
            }

            DateTime ldt_Date_Fin_Mes;
            try
            {
                ldt_Date_Fin_Mes = new DateTime(Convert.ToInt32(fechafinmes.Substring(0, 4)), Convert.ToInt32(fechafinmes.Substring(5, 2)), Convert.ToInt32(fechafinmes.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFACEnRangoFechaDeMes", "wsUNACEMPI", false);
                return oFAC;
            }

            if (!(ldt_Date_Ini_Mes.Month == ldt_Date_Fin_Mes.Month && ldt_Date_Ini_Mes.Year == ldt_Date_Fin_Mes.Year))
            {
                Funciones.CapturarError("Las fechas de inicio y fin no pertenecen al mismo mes", "", "", "Operaciones.svc - ObtenerFACEnRangoFechaDeMes", "wsUNACEMPI", false);
                return oFAC;
            }

            try
            {
                DateTime dFechaIni = new DateTime(ldt_Date_Fin_Mes.Year, 1, 1);
                //List<Formulacion> oFormulaciones = ListarDeltasDeFormulacion("*", dFechaIni.ToString("yyyy-MM-dd"), fecha, "");
                List<Formulacion> oFormulaciones = ListarDeltasDeFormulacionParaReportesFinales("*", dFechaIni.ToString("yyyy-MM-dd"), fechafinmes, "");
                List<FactorFormulacion> oFactores = ListarFactoresDeFormulacionEnRangoFecha(dFechaIni.ToString("yyyy-MM-dd"), fechafinmes);

                //solo se muestran las fechas del mes actual
                DateTime dFechaIniMes = ldt_Date_Fin_Mes.AddDays(-(ldt_Date_Fin_Mes.Day - 1));
                DateTime dFechaTemp = ldt_Date_Ini_Mes;
                int i = 1;

                while (dFechaTemp <= ldt_Date_Fin_Mes)
                {
                    oElementoFAC = new ElementoFAC();
                    oElementoFAC.Fecha = dFechaTemp.ToString("yyyy-MM-dd");

                    FactorFormulacion oFactor = null;
                    Formulacion oFormulacion = null;


                    //41X.LHV.Pulv.Fuel.Btu
                    oElementoFAC.LHV_Pulv_Fuel_Btu = "";
                    oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.Pulv.Fuel.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                    //oFactor = oFactores.FirstOrDefault(x => x.Nombre == "322.Factor1" && Convert.ToDateTime(x.Fecha) <= dFechaTemp); 
                    if (i == 1)
                    {
                        //traemos cabecera
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 1;
                        oCabeceraFAC.Titulo = "";

                        if (oFactor != null)
                        {
                            oCabeceraFAC.Titulo = oFactor.Titulo;
                            oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFactor != null)
                        {
                            oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                        }
                    }



                    //41X.LHV.NaturalGas.Btu
                    oElementoFAC.LHV_NaturalGas_Btu = "";
                    oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.NaturalGas.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                    if (i == 1)
                    {
                        //traemos cabecera
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 2;
                        oCabeceraFAC.Titulo = "";

                        if (oFactor != null)
                        {
                            oCabeceraFAC.Titulo = oFactor.Titulo;
                            oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFactor != null)
                        {
                            oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                        }
                    }



                    //41X.CLISI2
                    oElementoFAC._41X_CLISI2_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI2");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 3;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI3
                    oElementoFAC._41X_CLISI3_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI3");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 4;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI100
                    oElementoFAC._41X_CLISI100_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI100");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 5;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI10
                    oElementoFAC._41X_CLISI10_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI10");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 6;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI10_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI10_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI55
                    oElementoFAC._41X_CLISI55_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI55");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 7;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI5
                    oElementoFAC._41X_CLISI5_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI5");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 8;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI5_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI5_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLIS12
                    oElementoFAC._41X_CLIS12_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 9;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLIS12_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLIS12_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //SUMARIZADO DEL MES: 41X.CLIS12
                    oElementoFAC.Clinker_Production_MTD = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (oFormulacion != null)
                    {
                        List<Delta> oDeltas = oFormulacion.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= dFechaIniMes && Convert.ToDateTime(x.Fecha) <= dFechaTemp && x.Valor.Trim() != "").ToList();
                        decimal nSuma = oDeltas.Sum(x => Convert.ToDecimal(x.Valor.Replace(",", "")));
                        oElementoFAC.Clinker_Production_MTD = nSuma.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 2;
                        oCabeceraFAC.Orden = 10;
                        oCabeceraFAC.Titulo = "CLINKER PRODUCTION";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL AÑO: 41X.CLIS12
                    oElementoFAC.Clinker_Production_YTD = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (oFormulacion != null)
                    {
                        List<Delta> oDeltas = oFormulacion.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= dFechaIni && Convert.ToDateTime(x.Fecha) <= dFechaTemp && x.Valor.Trim() != "").ToList();
                        decimal nSuma = oDeltas.Sum(x => Convert.ToDecimal(x.Valor.Replace(",", "")));
                        oElementoFAC.Clinker_Production_YTD = nSuma.ToString("###,###,###");
                    }


                    //DIARIO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_Today = "";
                    if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" || oElementoFAC._41X_CLISI2_Total.Trim() != "" || oElementoFAC._41X_CLISI3_Total.Trim() != "" ||
                        oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" || oElementoFAC._41X_CLISI100_Total.Trim() != "" || oElementoFAC._41X_CLISI55_Total.Trim() != "")
                    {
                        double nValor_LHV_Pulv_Fuel_Btu = oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                        double nValor_41X_CLISI2_Total = oElementoFAC._41X_CLISI2_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                        double nValor_41X_CLISI3_Total = oElementoFAC._41X_CLISI3_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                        double nValor_LHV_NaturalGas_Btu = oElementoFAC.LHV_NaturalGas_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                        double nValor_41X_CLISI100_Total = oElementoFAC._41X_CLISI100_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                        double nValor_41X_CLISI55_Total = oElementoFAC._41X_CLISI55_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));

                        //double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 6) +
                        //                nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI55_Total) / Math.Pow(10, 6);


                        Funciones.CapturarMensaje("Fecha: " + dFechaTemp.ToString("yyyy-MM-dd"));
                        Funciones.CapturarMensaje("LHV_Pulv_Fuel_Btu: " + nValor_LHV_Pulv_Fuel_Btu.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI2_Total: " + nValor_41X_CLISI2_Total.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI3_Total: " + nValor_41X_CLISI3_Total.ToString());
                        Funciones.CapturarMensaje("nValor_LHV_NaturalGas_Btu: " + nValor_LHV_NaturalGas_Btu.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI100_Total: " + nValor_41X_CLISI100_Total.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI55_Total: " + nValor_41X_CLISI55_Total.ToString());

                        double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 +
                                         nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI55_Total)) / Math.Pow(10, 6);

                        Funciones.CapturarMensaje("nValor: " + nValor.ToString());

                        oElementoFAC.Process_MMBTU_Today = nValor.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 11;
                        oCabeceraFAC.Titulo = "PROCESS MMBTU";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL MES: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_MTD = Obtener_Process_MMBTU(oFormulaciones, oFactores, dFechaIniMes, dFechaTemp);

                    //SUMARIZADO DEL AÑO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_YTD = Obtener_Process_MMBTU(oFormulaciones, oFactores, dFechaIni, dFechaTemp);


                    ////DIARIO:  LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    ////         LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    //oElementoFAC.Total_MMBTU_Today = "";
                    //if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" && oElementoFAC._41X_CLISI2_Total.Trim() != "" && oElementoFAC._41X_CLISI3_Total.Trim() != "" &&
                    //    oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" && oElementoFAC._41X_CLISI100_Total.Trim() != "" && oElementoFAC._41X_CLISI10_Total.Trim() != "" &&
                    //    oElementoFAC._41X_CLISI55_Total.Trim() != "" && oElementoFAC._41X_CLISI5_Total.Trim() != "")
                    //{
                    //    double nValor_LHV_Pulv_Fuel_Btu = Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                    //    double nValor_41X_CLISI2_Total = Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI3_Total = Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                    //    double nValor_LHV_NaturalGas_Btu = Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                    //    double nValor_41X_CLISI100_Total = Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI10_Total = Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI55_Total = Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI5_Total = Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                    //    //double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 5) +
                    //    //                nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total) / Math.Pow(10, 5);

                    //    double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000  +
                    //                    nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total)) / Math.Pow(10, 6);

                    //    oElementoFAC.Total_MMBTU_Today = nValor.ToString("###,###,###.00");
                    //}


                    //DIARIO:  LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //         LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_Today = "";
                    if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" || oElementoFAC._41X_CLISI2_Total.Trim() != "" || oElementoFAC._41X_CLISI3_Total.Trim() != "" ||
                        oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" || oElementoFAC._41X_CLISI100_Total.Trim() != "" || oElementoFAC._41X_CLISI10_Total.Trim() != "" ||
                        oElementoFAC._41X_CLISI55_Total.Trim() != "" || oElementoFAC._41X_CLISI5_Total.Trim() != "")
                    {
                        double nValor_LHV_Pulv_Fuel_Btu = oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                        double nValor_41X_CLISI2_Total = oElementoFAC._41X_CLISI2_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                        double nValor_41X_CLISI3_Total = oElementoFAC._41X_CLISI3_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                        double nValor_LHV_NaturalGas_Btu = oElementoFAC.LHV_NaturalGas_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                        double nValor_41X_CLISI100_Total = oElementoFAC._41X_CLISI100_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                        double nValor_41X_CLISI10_Total = oElementoFAC._41X_CLISI10_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                        double nValor_41X_CLISI55_Total = oElementoFAC._41X_CLISI55_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                        double nValor_41X_CLISI5_Total = oElementoFAC._41X_CLISI5_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                        double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 +
                                        nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total)) / Math.Pow(10, 6);

                        oElementoFAC.Total_MMBTU_Today = nValor.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 12;
                        oCabeceraFAC.Titulo = "TOTAL MMBTU";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL MES: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //                    LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_MTD = Obtener_Total_MMBTU(oFormulaciones, oFactores, dFechaIniMes, dFechaTemp);

                    //SUMARIZADO DEL AÑO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //                    LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_YTD = Obtener_Total_MMBTU(oFormulaciones, oFactores, dFechaIni, dFechaTemp);





                    //DIARIO: Process_MMBTU_Today/41X.CLIS12
                    oElementoFAC.Process_MMBTU_Ton_Today = "";
                    if (oElementoFAC.Process_MMBTU_Today.Trim() != "" || oElementoFAC._41X_CLIS12_Total.Trim() != "")
                    {
                        double nValor_Process_MMBTU_Today = oElementoFAC.Process_MMBTU_Today.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Process_MMBTU_Today.Replace(",", ""));
                        double nValor_41X_CLIS12_Total = oElementoFAC._41X_CLIS12_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLIS12_Total.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_41X_CLIS12_Total != 0)
                        {
                            nValor = nValor_Process_MMBTU_Today / nValor_41X_CLIS12_Total;
                        }

                        oElementoFAC.Process_MMBTU_Ton_Today = nValor.ToString("###,###,###.00");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 13;
                        oCabeceraFAC.Titulo = "PROCESS MMBTU/TON";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //MENSUAL: Process_MMBTU_MTD/Clinker_Production_MTD
                    oElementoFAC.Process_MMBTU_Ton_MTD = "";
                    if (oElementoFAC.Process_MMBTU_MTD.Trim() != "" || oElementoFAC.Clinker_Production_MTD.Trim() != "")
                    {
                        double nValor_Process_MMBTU_MTD = oElementoFAC.Process_MMBTU_MTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Process_MMBTU_MTD.Replace(",", ""));
                        double nValor_Clinker_Production_MTD = oElementoFAC.Clinker_Production_MTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Clinker_Production_MTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_MTD != 0)
                        {
                            nValor = nValor_Process_MMBTU_MTD / nValor_Clinker_Production_MTD;
                        }

                        oElementoFAC.Process_MMBTU_Ton_MTD = nValor.ToString("###,###,###.00");
                    }
                   

                    //ANUAL: Process_MMBTU_YTD/Clinker_Production_YTD
                    oElementoFAC.Process_MMBTU_Ton_YTD = "";
                    if (oElementoFAC.Process_MMBTU_YTD.Trim() != "" || oElementoFAC.Clinker_Production_YTD.Trim() != "")
                    {
                        double nValor_Process_MMBTU_YTD = oElementoFAC.Process_MMBTU_YTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Process_MMBTU_YTD.Replace(",", ""));
                        double nValor_Clinker_Production_YTD = oElementoFAC.Clinker_Production_YTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Clinker_Production_YTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_YTD != 0)
                        {
                            nValor = nValor_Process_MMBTU_YTD / nValor_Clinker_Production_YTD;
                        }

                        oElementoFAC.Process_MMBTU_Ton_YTD = nValor.ToString("###,###,###.00");
                    }

                    //DIARIO: Total_MMBTU_Today/41X.CLIS12
                    oElementoFAC.Total_MMBTU_Ton_Today = "";
                    if (oElementoFAC.Total_MMBTU_Today.Trim() != "" || oElementoFAC._41X_CLIS12_Total.Trim() != "")
                    {
                        double nValor_Total_MMBTU_Today = oElementoFAC.Total_MMBTU_Today.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Total_MMBTU_Today.Replace(",", ""));
                        double nValor_41X_CLIS12_Total = oElementoFAC._41X_CLIS12_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLIS12_Total.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_41X_CLIS12_Total != 0)
                        {
                            nValor = nValor_Total_MMBTU_Today / nValor_41X_CLIS12_Total;
                        }

                        oElementoFAC.Total_MMBTU_Ton_Today = nValor.ToString("###,###,###.00");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 14;
                        oCabeceraFAC.Titulo = "TOTAL MMBTU/TON";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }

                    //MENSUAL: Total_MMBTU_MTD/Clinker_Production_MTD
                    oElementoFAC.Total_MMBTU_Ton_MTD = "";
                    if (oElementoFAC.Total_MMBTU_MTD.Trim() != "" || oElementoFAC.Clinker_Production_MTD.Trim() != "")
                    {
                        double nValor_Total_MMBTU_MTD = oElementoFAC.Total_MMBTU_MTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Total_MMBTU_MTD.Replace(",", ""));
                        double nValor_Clinker_Production_MTD = oElementoFAC.Clinker_Production_MTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Clinker_Production_MTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_MTD != 0)
                        {
                            nValor = nValor_Total_MMBTU_MTD / nValor_Clinker_Production_MTD;
                        }

                        oElementoFAC.Total_MMBTU_Ton_MTD = nValor.ToString("###,###,###.00");
                    }

                    //ANUAL: Total_MMBTU_YTD/Clinker_Production_YTD
                    oElementoFAC.Total_MMBTU_Ton_YTD = "";
                    if (oElementoFAC.Total_MMBTU_YTD.Trim() != "" || oElementoFAC.Clinker_Production_YTD.Trim() != "")
                    {
                        double nValor_Total_MMBTU_YTD = oElementoFAC.Total_MMBTU_YTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Total_MMBTU_YTD.Replace(",", ""));
                        double nValor_Clinker_Production_YTD = oElementoFAC.Clinker_Production_YTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Clinker_Production_YTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_YTD != 0)
                        {
                            nValor = nValor_Total_MMBTU_YTD / nValor_Clinker_Production_YTD;
                        }

                        oElementoFAC.Total_MMBTU_Ton_YTD = nValor.ToString("###,###,###.00");
                    }
                    



                    oElementosFAC.Add(oElementoFAC);
                    dFechaTemp = dFechaTemp.AddDays(1);
                    i = i + 1;
                }

                oFAC.Cabeceras = oCabecerasFAC.OrderBy(x => x.Orden).ToList();
                oFAC.Elementos = oElementosFAC;
                return oFAC;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFACEnRangoFechaDeMes", "wsUNACEMPI", false);
                oFAC = new FAC();
                oFAC.Cabeceras = new List<CabeceraFAC>();
                oFAC.Elementos = new List<ElementoFAC>();
                return oFAC;
            }

        }


        public FAC ObtenerFACOriginalEnRangoFechaDeMes(string fechainimes, string fechafinmes)
        {
            FAC oFAC = new FAC();
            oFAC.Cabeceras = new List<CabeceraFAC>();
            oFAC.Elementos = new List<ElementoFAC>();

            List<ElementoFAC> oElementosFAC = new List<ElementoFAC>();
            ElementoFAC oElementoFAC = new ElementoFAC();

            List<CabeceraFAC> oCabecerasFAC = new List<CabeceraFAC>();
            CabeceraFAC oCabeceraFAC = new CabeceraFAC();

            //string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

            DateTime ldt_Date_Ini_Mes;
            try
            {
                ldt_Date_Ini_Mes = new DateTime(Convert.ToInt32(fechainimes.Substring(0, 4)), Convert.ToInt32(fechainimes.Substring(5, 2)), Convert.ToInt32(fechainimes.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFACOriginalEnRangoFechaDeMes", "wsUNACEMPI", false);
                return oFAC;
            }

            DateTime ldt_Date_Fin_Mes;
            try
            {
                ldt_Date_Fin_Mes = new DateTime(Convert.ToInt32(fechafinmes.Substring(0, 4)), Convert.ToInt32(fechafinmes.Substring(5, 2)), Convert.ToInt32(fechafinmes.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFACOriginalEnRangoFechaDeMes", "wsUNACEMPI", false);
                return oFAC;
            }

            if (!(ldt_Date_Ini_Mes.Month == ldt_Date_Fin_Mes.Month && ldt_Date_Ini_Mes.Year == ldt_Date_Fin_Mes.Year))
            {
                Funciones.CapturarError("Las fechas de inicio y fin no pertenecen al mismo mes", "", "", "Operaciones.svc - ObtenerFACOriginalEnRangoFechaDeMes", "wsUNACEMPI", false);
                return oFAC;
            }

            try
            {
                DateTime dFechaIni = new DateTime(ldt_Date_Fin_Mes.Year, 1, 1);
                List<Formulacion> oFormulaciones = ListarDeltasDeFormulacionOriginales("*", dFechaIni.ToString("yyyy-MM-dd"), fechafinmes, "");
                List<FactorFormulacion> oFactores = ListarFactoresDeFormulacionEnRangoFecha(dFechaIni.ToString("yyyy-MM-dd"), fechafinmes);

                //solo se muestran las fechas del mes actual
                DateTime dFechaIniMes = ldt_Date_Fin_Mes.AddDays(-(ldt_Date_Fin_Mes.Day - 1));
                DateTime dFechaTemp = ldt_Date_Ini_Mes;
                int i = 1;

                while (dFechaTemp <= ldt_Date_Fin_Mes)
                {
                    oElementoFAC = new ElementoFAC();
                    oElementoFAC.Fecha = dFechaTemp.ToString("yyyy-MM-dd");

                    FactorFormulacion oFactor = null;
                    Formulacion oFormulacion = null;


                    //41X.LHV.Pulv.Fuel.Btu
                    oElementoFAC.LHV_Pulv_Fuel_Btu = "";
                    oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.Pulv.Fuel.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                    //oFactor = oFactores.FirstOrDefault(x => x.Nombre == "322.Factor1" && Convert.ToDateTime(x.Fecha) <= dFechaTemp); 
                    if (i == 1)
                    {
                        //traemos cabecera
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 1;
                        oCabeceraFAC.Titulo = "";

                        if (oFactor != null)
                        {
                            oCabeceraFAC.Titulo = oFactor.Titulo;
                            oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFactor != null)
                        {
                            oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                        }
                    }



                    //41X.LHV.NaturalGas.Btu
                    oElementoFAC.LHV_NaturalGas_Btu = "";
                    oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.NaturalGas.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                    if (i == 1)
                    {
                        //traemos cabecera
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 2;
                        oCabeceraFAC.Titulo = "";

                        if (oFactor != null)
                        {
                            oCabeceraFAC.Titulo = oFactor.Titulo;
                            oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFactor != null)
                        {
                            oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                        }
                    }



                    //41X.CLISI2
                    oElementoFAC._41X_CLISI2_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI2");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 3;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }

                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI3
                    oElementoFAC._41X_CLISI3_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI3");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 4;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI100
                    oElementoFAC._41X_CLISI100_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI100");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 5;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI10
                    oElementoFAC._41X_CLISI10_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI10");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 6;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI10_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI10_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI55
                    oElementoFAC._41X_CLISI55_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI55");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 7;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLISI5
                    oElementoFAC._41X_CLISI5_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI5");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 8;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI5_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLISI5_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //41X.CLIS12
                    oElementoFAC._41X_CLIS12_Total = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 1;
                        oCabeceraFAC.Orden = 9;
                        oCabeceraFAC.Titulo = "";

                        if (oFormulacion != null)
                        {
                            oCabeceraFAC.Titulo = oFormulacion.Titulo;

                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLIS12_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }
                    else
                    {
                        if (oFormulacion != null)
                        {
                            Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                            if (oDelta != null)
                            {
                                if (oDelta.Valor.Trim() != "")
                                {
                                    double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                                    oElementoFAC._41X_CLIS12_Total = nValorDia.ToString("###,###,###.00");
                                }
                            }
                        }
                    }



                    //SUMARIZADO DEL MES: 41X.CLIS12
                    oElementoFAC.Clinker_Production_MTD = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (oFormulacion != null)
                    {
                        List<Delta> oDeltas = oFormulacion.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= dFechaIniMes && Convert.ToDateTime(x.Fecha) <= dFechaTemp && x.Valor.Trim() != "").ToList();
                        decimal nSuma = oDeltas.Sum(x => Convert.ToDecimal(x.Valor.Replace(",", "")));
                        oElementoFAC.Clinker_Production_MTD = nSuma.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 2;
                        oCabeceraFAC.Orden = 10;
                        oCabeceraFAC.Titulo = "CLINKER PRODUCTION";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL AÑO: 41X.CLIS12
                    oElementoFAC.Clinker_Production_YTD = "";
                    oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLIS12");
                    //oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "411BL1WT1UM1");
                    if (oFormulacion != null)
                    {
                        List<Delta> oDeltas = oFormulacion.Deltas.Where(x => Convert.ToDateTime(x.Fecha) >= dFechaIni && Convert.ToDateTime(x.Fecha) <= dFechaTemp && x.Valor.Trim() != "").ToList();
                        decimal nSuma = oDeltas.Sum(x => Convert.ToDecimal(x.Valor.Replace(",", "")));
                        oElementoFAC.Clinker_Production_YTD = nSuma.ToString("###,###,###");
                    }


                    //DIARIO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_Today = "";
                    if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" || oElementoFAC._41X_CLISI2_Total.Trim() != "" || oElementoFAC._41X_CLISI3_Total.Trim() != "" ||
                        oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" || oElementoFAC._41X_CLISI100_Total.Trim() != "" || oElementoFAC._41X_CLISI55_Total.Trim() != "")
                    {
                        double nValor_LHV_Pulv_Fuel_Btu = oElementoFAC.LHV_Pulv_Fuel_Btu.Trim()  == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                        double nValor_41X_CLISI2_Total = oElementoFAC._41X_CLISI2_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                        double nValor_41X_CLISI3_Total = oElementoFAC._41X_CLISI3_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                        double nValor_LHV_NaturalGas_Btu = oElementoFAC.LHV_NaturalGas_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                        double nValor_41X_CLISI100_Total = oElementoFAC._41X_CLISI100_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                        double nValor_41X_CLISI55_Total = oElementoFAC._41X_CLISI55_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));

                        //double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 6) +
                        //                nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI55_Total) / Math.Pow(10, 6);


                        Funciones.CapturarMensaje("Fecha: " + dFechaTemp.ToString("yyyy-MM-dd"));
                        Funciones.CapturarMensaje("LHV_Pulv_Fuel_Btu: " + nValor_LHV_Pulv_Fuel_Btu.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI2_Total: " + nValor_41X_CLISI2_Total.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI3_Total: " + nValor_41X_CLISI3_Total.ToString());
                        Funciones.CapturarMensaje("nValor_LHV_NaturalGas_Btu: " + nValor_LHV_NaturalGas_Btu.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI100_Total: " + nValor_41X_CLISI100_Total.ToString());
                        Funciones.CapturarMensaje("nValor_41X_CLISI55_Total: " + nValor_41X_CLISI55_Total.ToString());

                        double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 +
                                         nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI55_Total)) / Math.Pow(10, 6);

                        Funciones.CapturarMensaje("nValor: " + nValor.ToString());

                        oElementoFAC.Process_MMBTU_Today = nValor.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 11;
                        oCabeceraFAC.Titulo = "PROCESS MMBTU";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL MES: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_MTD = Obtener_Process_MMBTU(oFormulaciones, oFactores, dFechaIniMes, dFechaTemp);

                    //SUMARIZADO DEL AÑO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6
                    oElementoFAC.Process_MMBTU_YTD = Obtener_Process_MMBTU(oFormulaciones, oFactores, dFechaIni, dFechaTemp);


                    ////DIARIO:  LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    ////         LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    //oElementoFAC.Total_MMBTU_Today = "";
                    //if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" && oElementoFAC._41X_CLISI2_Total.Trim() != "" && oElementoFAC._41X_CLISI3_Total.Trim() != "" &&
                    //    oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" && oElementoFAC._41X_CLISI100_Total.Trim() != "" && oElementoFAC._41X_CLISI10_Total.Trim() != "" &&
                    //    oElementoFAC._41X_CLISI55_Total.Trim() != "" && oElementoFAC._41X_CLISI5_Total.Trim() != "")
                    //{
                    //    double nValor_LHV_Pulv_Fuel_Btu = Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                    //    double nValor_41X_CLISI2_Total = Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI3_Total = Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                    //    double nValor_LHV_NaturalGas_Btu = Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                    //    double nValor_41X_CLISI100_Total = Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI10_Total = Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI55_Total = Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                    //    double nValor_41X_CLISI5_Total = Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                    //    //double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 5) +
                    //    //                nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total) / Math.Pow(10, 5);

                    //    double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000  +
                    //                    nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total)) / Math.Pow(10, 6);

                    //    oElementoFAC.Total_MMBTU_Today = nValor.ToString("###,###,###.00");
                    //}


                    //DIARIO:  LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //         LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_Today = "";
                    if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" || oElementoFAC._41X_CLISI2_Total.Trim() != "" || oElementoFAC._41X_CLISI3_Total.Trim() != "" ||
                        oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" || oElementoFAC._41X_CLISI100_Total.Trim() != "" || oElementoFAC._41X_CLISI10_Total.Trim() != "" ||
                        oElementoFAC._41X_CLISI55_Total.Trim() != "" || oElementoFAC._41X_CLISI5_Total.Trim() != "")
                    {
                        double nValor_LHV_Pulv_Fuel_Btu = oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                        double nValor_41X_CLISI2_Total = oElementoFAC._41X_CLISI2_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                        double nValor_41X_CLISI3_Total = oElementoFAC._41X_CLISI3_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                        double nValor_LHV_NaturalGas_Btu = oElementoFAC.LHV_NaturalGas_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                        double nValor_41X_CLISI100_Total = oElementoFAC._41X_CLISI100_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                        double nValor_41X_CLISI10_Total = oElementoFAC._41X_CLISI10_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                        double nValor_41X_CLISI55_Total = oElementoFAC._41X_CLISI55_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                        double nValor_41X_CLISI5_Total = oElementoFAC._41X_CLISI5_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                        double nValor = (nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 +
                                        nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total)) / Math.Pow(10, 6);

                        oElementoFAC.Total_MMBTU_Today = nValor.ToString("###,###,###");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 12;
                        oCabeceraFAC.Titulo = "TOTAL MMBTU";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //SUMARIZADO DEL MES: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //                    LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_MTD = Obtener_Total_MMBTU(oFormulaciones, oFactores, dFechaIniMes, dFechaTemp);

                    //SUMARIZADO DEL AÑO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                    //                    LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6
                    oElementoFAC.Total_MMBTU_YTD = Obtener_Total_MMBTU(oFormulaciones, oFactores, dFechaIni, dFechaTemp);


                    //DIARIO: Process_MMBTU_Today/41X.CLIS12
                    oElementoFAC.Process_MMBTU_Ton_Today = "";
                    if (oElementoFAC.Process_MMBTU_Today.Trim() != "" || oElementoFAC._41X_CLIS12_Total.Trim() != "")
                    {
                        double nValor_Process_MMBTU_Today = oElementoFAC.Process_MMBTU_Today.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Process_MMBTU_Today.Replace(",", ""));
                        double nValor_41X_CLIS12_Total = oElementoFAC._41X_CLIS12_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLIS12_Total.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_41X_CLIS12_Total != 0)
                        {
                            nValor = nValor_Process_MMBTU_Today / nValor_41X_CLIS12_Total;
                        }

                        oElementoFAC.Process_MMBTU_Ton_Today = nValor.ToString("###,###,###.00");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 13;
                        oCabeceraFAC.Titulo = "PROCESS MMBTU/TON";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }


                    //MENSUAL: Process_MMBTU_MTD/Clinker_Production_MTD
                    oElementoFAC.Process_MMBTU_Ton_MTD = "";
                    if (oElementoFAC.Process_MMBTU_MTD.Trim() != "" || oElementoFAC.Clinker_Production_MTD.Trim() != "")
                    {
                        double nValor_Process_MMBTU_MTD = oElementoFAC.Process_MMBTU_MTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Process_MMBTU_MTD.Replace(",", ""));
                        double nValor_Clinker_Production_MTD = oElementoFAC.Clinker_Production_MTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Clinker_Production_MTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_MTD != 0)
                        {
                            nValor = nValor_Process_MMBTU_MTD / nValor_Clinker_Production_MTD;
                        }

                        oElementoFAC.Process_MMBTU_Ton_MTD = nValor.ToString("###,###,###.00");
                    }


                    //ANUAL: Process_MMBTU_YTD/Clinker_Production_YTD
                    oElementoFAC.Process_MMBTU_Ton_YTD = "";
                    if (oElementoFAC.Process_MMBTU_YTD.Trim() != "" || oElementoFAC.Clinker_Production_YTD.Trim() != "")
                    {
                        double nValor_Process_MMBTU_YTD = oElementoFAC.Process_MMBTU_YTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Process_MMBTU_YTD.Replace(",", ""));
                        double nValor_Clinker_Production_YTD = oElementoFAC.Clinker_Production_YTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Clinker_Production_YTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_YTD != 0)
                        {
                            nValor = nValor_Process_MMBTU_YTD / nValor_Clinker_Production_YTD;
                        }

                        oElementoFAC.Process_MMBTU_Ton_YTD = nValor.ToString("###,###,###.00");
                    }

                    //DIARIO: Total_MMBTU_Today/41X.CLIS12
                    oElementoFAC.Total_MMBTU_Ton_Today = "";
                    if (oElementoFAC.Total_MMBTU_Today.Trim() != "" || oElementoFAC._41X_CLIS12_Total.Trim() != "")
                    {
                        double nValor_Total_MMBTU_Today = oElementoFAC.Total_MMBTU_Today.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Total_MMBTU_Today.Replace(",", ""));
                        double nValor_41X_CLIS12_Total = oElementoFAC._41X_CLIS12_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLIS12_Total.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_41X_CLIS12_Total != 0)
                        {
                            nValor = nValor_Total_MMBTU_Today / nValor_41X_CLIS12_Total;
                        }

                        oElementoFAC.Total_MMBTU_Ton_Today = nValor.ToString("###,###,###.00");
                    }
                    if (i == 1)
                    {
                        //traemos cabecera                  
                        oCabeceraFAC = new CabeceraFAC();
                        oCabeceraFAC.Colspan = 3;
                        oCabeceraFAC.Orden = 14;
                        oCabeceraFAC.Titulo = "TOTAL MMBTU/TON";
                        oCabecerasFAC.Add(oCabeceraFAC);
                    }

                    //MENSUAL: Total_MMBTU_MTD/Clinker_Production_MTD
                    oElementoFAC.Total_MMBTU_Ton_MTD = "";
                    if (oElementoFAC.Total_MMBTU_MTD.Trim() != "" || oElementoFAC.Clinker_Production_MTD.Trim() != "")
                    {
                        double nValor_Total_MMBTU_MTD = oElementoFAC.Total_MMBTU_MTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Total_MMBTU_MTD.Replace(",", ""));
                        double nValor_Clinker_Production_MTD = oElementoFAC.Clinker_Production_MTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Clinker_Production_MTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_MTD != 0)
                        {
                            nValor = nValor_Total_MMBTU_MTD / nValor_Clinker_Production_MTD;
                        }

                        oElementoFAC.Total_MMBTU_Ton_MTD = nValor.ToString("###,###,###.00");
                    }

                    //ANUAL: Total_MMBTU_YTD/Clinker_Production_YTD
                    oElementoFAC.Total_MMBTU_Ton_YTD = "";
                    if (oElementoFAC.Total_MMBTU_YTD.Trim() != "" || oElementoFAC.Clinker_Production_YTD.Trim() != "")
                    {
                        double nValor_Total_MMBTU_YTD = oElementoFAC.Total_MMBTU_YTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Total_MMBTU_YTD.Replace(",", ""));
                        double nValor_Clinker_Production_YTD = oElementoFAC.Clinker_Production_YTD.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.Clinker_Production_YTD.Replace(",", ""));

                        double nValor = 0;
                        if (nValor_Clinker_Production_YTD != 0)
                        {
                            nValor = nValor_Total_MMBTU_YTD / nValor_Clinker_Production_YTD;
                        }

                        oElementoFAC.Total_MMBTU_Ton_YTD = nValor.ToString("###,###,###.00");
                    }



                    oElementosFAC.Add(oElementoFAC);
                    dFechaTemp = dFechaTemp.AddDays(1);
                    i = i + 1;
                }

                oFAC.Cabeceras = oCabecerasFAC.OrderBy(x => x.Orden).ToList();
                oFAC.Elementos = oElementosFAC;
                return oFAC;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerFACOriginalEnRangoFechaDeMes", "wsUNACEMPI", false);
                oFAC = new FAC();
                oFAC.Cabeceras = new List<CabeceraFAC>();
                oFAC.Elementos = new List<ElementoFAC>();
                return oFAC;
            }

        }





        public Resultado RegistrarSumaDeTagEnRangoFecha(string tag, string tagsuma, string fechaini, string fechafin, string fechasuma)
        {
            Resultado oResultado = new Resultado();

            DateTime ldt_Date_ini;
            try
            {
                ldt_Date_ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarSumaDeTagEnRangoFecha", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            DateTime ldt_Date_fin;
            try
            {
                ldt_Date_fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarSumaDeTagEnRangoFecha", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            DateTime ldt_Date_suma;
            try
            {
                ldt_Date_suma = new DateTime(Convert.ToInt32(fechasuma.Substring(0, 4)), Convert.ToInt32(fechasuma.Substring(5, 2)), Convert.ToInt32(fechasuma.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarSumaDeTagEnRangoFecha", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

                PIServers lo_PIServers = new PIServers();
                PIServer lo_PIserver = lo_PIServers[cServidorPIData];
                lo_PIserver.Connect();

                //obtenemos la suma
                PIPoint lo_PIPoint = OSIsoft.AF.PI.PIPoint.FindPIPoint(lo_PIserver, tag);

                IDictionary<AFSummaryTypes, AFValues> lo_returnvalue;

                double nSuma = 0;
                //if (ldt_Date_ini == ldt_Date_fin)
                //{
                //    nSuma = 0;
                //}
                //else
                //{
                    ldt_Date_fin = ldt_Date_fin.AddDays(1).AddMilliseconds(-1);
                    AFTime oTiempoIni = new AFTime(ldt_Date_ini.ToUniversalTime());
                    AFTime oTiempoFin = new AFTime(ldt_Date_fin.ToUniversalTime());
                    AFTimeRange lo_Range = new AFTimeRange(oTiempoIni, oTiempoFin);

                    AFTimeSpan lo_SummaryDuration = new AFTimeSpan(lo_Range.Span);

                    lo_returnvalue = lo_PIPoint.Summaries(lo_Range, lo_SummaryDuration, AFSummaryTypes.Total, AFCalculationBasis.EventWeighted, AFTimestampCalculation.Auto);
                    AFValues oValores = lo_returnvalue.Values.ElementAt(0);

                    foreach (AFValue oValor in oValores)
                    {
                        if (oValor.Value.GetType().Name == "AFEnumerationValue" ||
                            oValor.Value.GetType().BaseType.Name == "PIException" ||
                            oValor.Value.GetType().BaseType.Name == "SystemException" ||
                            oValor.Value.GetType().BaseType.Name == "Exception")
                        {
                             nSuma = 0;
                        }
                        else
                        {
                            nSuma = oValor.ValueAsDouble();
                        }
                    }
                //}
            
                //registramos la suma
                ModPIExtFunctions.Write_Value_PI(cServidorPIData, tagsuma, ldt_Date_suma, nSuma, true);

                return new Resultado(0,"Operación Exitosa. Suma: " + nSuma.ToString());
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarSumaDeTagEnRangoFecha", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

        }


        public Resultado EjecutarCalculosSumarizadosDeAF(string fecha)
        {
            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - EjecutarCalculosSumarizadosDeAF", "wsUNACEMPI", false);
                return new Resultado(-1, "Error en EjecutarCalculosSumarizadosDeAF para la fecha " + fecha + ". " + ex.Message + "\n");
            }

            try
            {
                string cDatabase = WebConfigurationManager.AppSettings["databaseCalculatedTags"];
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];

                var oSearch = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Method Calculation'");

                string cPeriodo = "";
                string cFechaIni = "";

                int codigoResultado = 0;
                string descripcionResultado = "";
                foreach (AFElement oElemento in oSearch.FindElements(fullLoad: true))
                {
                    try
                    {
                        string cTag = oElemento.Attributes["Tag"].DataReference.PIPoint.Name;

                        string cTagSuma = "";
                        if (oElemento.Attributes["Result"].DataReference != null)
                        {
                            cTagSuma = oElemento.Attributes["Result"].DataReference.ToString();
                            cTagSuma = cTagSuma.Substring(cTagSuma.LastIndexOf(@"\") + 1);
                        }

                        cPeriodo = oElemento.Attributes["Method"].GetValue().Value.ToString();
                        string cCalculation = oElemento.Attributes["Calculation"].GetValue().Value.ToString();

                        cFechaIni = "";
                        if (cPeriodo == "MTD")
                        {
                            cFechaIni = (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).ToString("yyyy-MM-dd");
                        }
                        else if (cPeriodo == "YTD")
                        {
                            cFechaIni = (new DateTime(ldt_Date.Year, 1, 1)).ToString("yyyy-MM-dd");
                        }
                        else
                        {
                            codigoResultado = -1;
                            descripcionResultado = descripcionResultado + "* Cálculo de periodo: " + cPeriodo + ", fechaini: " + cFechaIni + ", fechafin: " + fecha + " para " + oElemento.Name + " => " + "-1" + ": " + "El periodo (Method) no se definió correctamente" + "\n";
                            continue;
                        }

                        Resultado oResultadoCalculo = new Resultado();
                        if (cCalculation.Trim().ToUpper()=="SUM"){
                            oResultadoCalculo = RegistrarSumaDeTagEnRangoFecha(cTag, cTagSuma, cFechaIni, fecha, fecha);
                        }
                        else {
                            codigoResultado = -1;
                            descripcionResultado = descripcionResultado + "* Cálculo de periodo: " + cPeriodo + ", fechaini: " + cFechaIni + ", fechafin: " + fecha + " para " + oElemento.Name + " => " + "-1" + ": " + "El atributo Calculation no se definió correctamente" + "\n";
                            continue;
                        }
                        
                        if (oResultadoCalculo.codigo != 0)
                            codigoResultado = -1;

                        descripcionResultado = descripcionResultado + "* Cálculo de periodo: " + cPeriodo + ", fechaini: " + cFechaIni + ", fechafin: " + fecha + " para " + oElemento.Name + " => " + oResultadoCalculo.codigo.ToString() + ": " + oResultadoCalculo.descripcion + "\n";
                    }
                    catch (Exception ex)
                    {
                        Funciones.CapturarError(ex, "Operaciones.svc - EjecutarCalculosSumarizadosDeAF", "wsUNACEMPI", false);
                        codigoResultado = -1;
                        descripcionResultado = descripcionResultado + "* Cálculo de periodo: " + cPeriodo + ", fechaini: " + cFechaIni + ", fechafin: " + fecha + " para " + oElemento.Name + " => " + "-1" + ": " + ex.Message + "\n";
                    }                        
                }

                return new Resultado(codigoResultado, descripcionResultado);
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - EjecutarCalculosSumarizadosDeAF", "wsUNACEMPI", false);
                return new Resultado(-1, "Error en EjecutarCalculosSumarizadosDeAF para la fecha " + fecha + ". " + ex.Message + "\n");
            }
        }


        public Resultado CaLcularStockOpenning(string fecha)
        {
            try
            {
                DateTime ldt_Date;
                try
                {
                    ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
                }
                catch (Exception ex)
                {
                    Funciones.CapturarError(ex, "Operaciones.svc - CacularStockOpenning", "wsUNACEMPI", false);
                    return new Resultado(-1, ex.Message);
                }

                //obtenemos tags de stock inicial de AF
                string cDatabase = WebConfigurationManager.AppSettings["databaseCalculatedTags"];
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];

                var oSearch = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Stocks Template'");

                //procesamos por cada fecha del mes
                DateTime dFechaIniMes = new DateTime(ldt_Date.Year, ldt_Date.Month, 1);
                DateTime dFechaTemp = dFechaIniMes;

                while (dFechaTemp <= ldt_Date)
                {
                    foreach (AFElement oElemento in oSearch.FindElements(fullLoad: true))
                    {
                        try
                        {
                            string cNombre = oElemento.Attributes["Name"].GetValue().Value.ToString();
                            string cTag = oElemento.Attributes["Tag"].DataReference.PIPoint.Name;


                            //obtenemos el valor opening (del tag del dia anterior)
                            double nValorOpening = 0;
                            AFValue oAFValor = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag, dFechaTemp.AddDays(-1));
                            if (oAFValor == null)
                            {
                                continue;
                            }

                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException" ||
                                oAFValor.Value.GetType().BaseType.Name == "Exception")
                            {
                                continue;
                            }

                            nValorOpening = oAFValor.ValueAsDouble();

                            //obtenemos DOR Final
                            List<BloqueDOR> oBloques = ObtenerDOR(dFechaTemp.ToString("yyyy-MM-dd"));
                          
                            
                            if (cNombre == "High Limestone stock pile")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                BloqueDOR oBloqueCRUSHERHighLimestone = oBloques.FirstOrDefault(x => x.Nombre == "CRUSHER HighLimestone");
                                if (oBloqueCRUSHERHighLimestone != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCRUSHERHighLimestone.Elementos.FirstOrDefault(x => x.Nombre == "TOTAL HIGH LIMESTONE CRUSHED");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                double nValorConsumption1 = 0;
                                double nValorConsumption2 = 0;
                                BloqueDOR oBloqueRAWMILL = oBloques.FirstOrDefault(x => x.Nombre == "RAW MILL");
                                if (oBloqueRAWMILL != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "HIGH LIMESTONE");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption1);
                                    }
                                }
                                BloqueDOR oBloqueCEMENTGRINDING	 = oBloques.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                                if (oBloqueCEMENTGRINDING != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "HIGH LIMESTONE");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption2);
                                    }
                                }
                                nValorConsumption = nValorConsumption1 + nValorConsumption2;


                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);

                            }
                            else if (cNombre == "Low Limestone Stock pile")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                BloqueDOR oBloqueCRUSHERLowLimestone = oBloques.FirstOrDefault(x => x.Nombre == "CRUSHER LowLimestone");
                                if (oBloqueCRUSHERLowLimestone != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCRUSHERLowLimestone.Elementos.FirstOrDefault(x => x.Nombre == "TOTAL LOW LIMESTONE CRUSHED");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueRAWMILL = oBloques.FirstOrDefault(x => x.Nombre == "RAW MILL");
                                if (oBloqueRAWMILL != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "LOW LIMESTONE");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                                
                            }
                            else if (cNombre == "Mix Limestone Stock Pile")
                            {   
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                BloqueDOR oBloqueCRUSHERLowLimestone = oBloques.FirstOrDefault(x => x.Nombre == "CRUSHER MixLime");
                                if (oBloqueCRUSHERLowLimestone != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCRUSHERLowLimestone.Elementos.FirstOrDefault(x => x.Nombre == "TOTAL MIX LIMESTONE CRUSHED");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueRAWMILL = oBloques.FirstOrDefault(x => x.Nombre == "RAW MILL");
                                if (oBloqueRAWMILL != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "MIX LIMESTONE");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Iron Ore Stock Piles")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001151.In.Value", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);                                       
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueRAWMILL = oBloques.FirstOrDefault(x => x.Nombre == "RAW MILL");
                                if (oBloqueRAWMILL != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "IRON ORE");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                                
                            }
                            else if (cNombre == "Mill Scale Stock Pile")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001502.In.Value", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueRAWMILL = oBloques.FirstOrDefault(x => x.Nombre == "RAW MILL");
                                if (oBloqueRAWMILL != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "MILL SCALE");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);

                            }
                            else if (cNombre == "Alumina Stock Pile")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueRAWMILL = oBloques.FirstOrDefault(x => x.Nombre == "RAW MILL");
                                if (oBloqueRAWMILL != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "ALUMINA");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);                                      
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Bauxite Stock Pile")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001066.In.Value", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueRAWMILL = oBloques.FirstOrDefault(x => x.Nombre == "RAW MILL");
                                if (oBloqueRAWMILL != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "BAUXITE");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Coal Stock pile")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.06-00000029.In.Value", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueCOALGRINDING = oBloques.FirstOrDefault(x => x.Nombre == "COAL GRINDING");
                                if (oBloqueCOALGRINDING != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCOALGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "COAL BULK");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Pet coke Stock Pile")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.06-00001144.In.Value", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueCOALGRINDING = oBloques.FirstOrDefault(x => x.Nombre == "COAL GRINDING");
                                if (oBloqueCOALGRINDING != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCOALGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "PETCOKE BULK");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Gypsum Stock pile")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00000038.In.Value", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueCEMENTGRINDING	 = oBloques.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                                if (oBloqueCEMENTGRINDING != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "GYPSUM");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Raw meal Blending silo")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                BloqueDOR oBloqueCRUSHERLowLimestone = oBloques.FirstOrDefault(x => x.Nombre == "RAW MILL");
                                if (oBloqueCRUSHERLowLimestone != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCRUSHERLowLimestone.Elementos.FirstOrDefault(x => x.Nombre == "RAW MEAL");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                double nValorConsumption1 = 0;
                                double nValorConsumption2 = 0;
                                BloqueDOR oBloqueRAWMILL = oBloques.FirstOrDefault(x => x.Nombre == "KILN");
                                if (oBloqueRAWMILL != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "RAW FEED");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption1);
                                    }
                                }

                                AFValue oAFConsumption2 = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "CKD-Production.AA", dFechaTemp);
                                if (oAFConsumption2 != null)
                                {
                                    if (!(oAFConsumption2.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFConsumption2.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFConsumption2.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFConsumption2.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFConsumption2.Value.ToString(), out nValorConsumption2);
                                    }
                                }
                                //BloqueDOR oBloqueCEMENTGRINDING = oBloques.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                                //if (oBloqueCEMENTGRINDING != null)
                                //{
                                //    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "CKD");
                                //    if (oElementoDOR != null)
                                //    {
                                //        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption2);
                                //    }
                                //}
                                nValorConsumption = nValorConsumption1 + nValorConsumption2;


                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Pulverized Silo")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                BloqueDOR oBloqueCOALGRINDING = oBloques.FirstOrDefault(x => x.Nombre == "COAL GRINDING");
                                if (oBloqueCOALGRINDING != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCOALGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "PULVERIZED FUEL");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                double nValorConsumption1 = 0;
                                double nValorConsumption2 = 0;
                                BloqueDOR oBloqueFUELCONSUMPTIONS = oBloques.FirstOrDefault(x => x.Nombre == "FUEL CONSUMPTIONS");
                                if (oBloqueFUELCONSUMPTIONS != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueFUELCONSUMPTIONS.Elementos.FirstOrDefault(x => x.Nombre == "COAL/FUEL KILN");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption1);
                                    }
                                }
                                BloqueDOR oBloqueFUELCONSUMPTIONS2 = oBloques.FirstOrDefault(x => x.Nombre == "FUEL CONSUMPTIONS");
                                if (oBloqueFUELCONSUMPTIONS2 != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueFUELCONSUMPTIONS2.Elementos.FirstOrDefault(x => x.Nombre == "COAL/FUEL CALCINER");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption2);
                                    }
                                }
                                nValorConsumption = nValorConsumption1 + nValorConsumption2;

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "CKD System")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "CKD-Production.AA", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueCEMENTGRINDING = oBloques.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                                if (oBloqueCEMENTGRINDING != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "CKD");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Paulden Clinker")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001121.In", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueCEMENTGRINDING = oBloques.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                                if (oBloqueCEMENTGRINDING != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "PAULDEN CLINKER");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Clinker in Paulden AZ")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;

                                //obtenemos el valor consumption (igual al valor production de Paulden Clinker)
                                double nValorConsumption = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.07-00001121.In", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Clinker storage")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                BloqueDOR oBloqueCRUSHERLowLimestone = oBloques.FirstOrDefault(x => x.Nombre == "KILN");
                                if (oBloqueCRUSHERLowLimestone != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCRUSHERLowLimestone.Elementos.FirstOrDefault(x => x.Nombre == "CLINKER");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueRAWMILL = oBloques.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                                if (oBloqueRAWMILL != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueRAWMILL.Elementos.FirstOrDefault(x => x.Nombre == "CLINKER");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Cement silos")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                BloqueDOR oBloqueCRUSHERLowLimestone = oBloques.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                                if (oBloqueCRUSHERLowLimestone != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCRUSHERLowLimestone.Elementos.FirstOrDefault(x => x.Nombre == "CEMENT");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                AFValue oAFValorDrakeDispatch = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "Drake.Dispatch", dFechaTemp);

                                if (oAFValorDrakeDispatch != null)
                                {
                                    if (!(oAFValorDrakeDispatch.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorDrakeDispatch.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorDrakeDispatch.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorDrakeDispatch.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorDrakeDispatch.Value.ToString(), out nValorConsumption);
                                    }
                                }

                               

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Carbon Dioxide CO2")
                            {
                                ////obtenemos el valor production
                                //double nValorProduction = 0;
                                //AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.05-00000687.In", ldt_Date);
                                //if (oAFValorProduction != null)
                                //{
                                //    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                //          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                //          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                //          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                //    {
                                //        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                //    }
                                //}


                                //obtenemos el valor production
                                double nValorProduction = 0;
                                double nValorProduction_18_22_Dia = 0;
                                AFValue oAFValorProduction_18_22_Dia = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.05-00000687.In", dFechaTemp);
                                Funciones.CapturarMensaje("ObtenerAFValueExacto = cServidorPIData: " + cServidorPIData + ", Tag: RM.05-00000687.In,  " + "ldt_Date: " + dFechaTemp.ToString());
                                if (oAFValorProduction_18_22_Dia != null)
                                {
                                    Funciones.CapturarMensaje("oAFValorProduction_18_22_Dia: " + oAFValorProduction_18_22_Dia.Value.ToString());
                                    if (!(oAFValorProduction_18_22_Dia.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction_18_22_Dia.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction_18_22_Dia.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction_18_22_Dia.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        if (Double.TryParse(oAFValorProduction_18_22_Dia.Value.ToString(), out nValorProduction_18_22_Dia))
                                        {
                                            string cValorProd = nValorProduction_18_22_Dia.ToString("###,###,##0.00");
                                            nValorProduction = Convert.ToDouble(cValorProd);
                                        }
                                    }
                                }
                                else {
                                    Funciones.CapturarMensaje("oAFValorProduction_18_22_Dia: null");
                                }

                                Funciones.CapturarMensaje("OJO. nValorProduction_18_22_Dia:" + nValorProduction_18_22_Dia.ToString() + " para el tag: RM.05-00000687.In, para la fecha: " + dFechaTemp.ToString());



                                                                

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueCOALGRINDING = oBloques.FirstOrDefault(x => x.Nombre == "COAL GRINDING");
                                if (oBloqueCOALGRINDING != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCOALGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "CO2");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                string cCadenaLog = "nValorOpening: " + nValorOpening.ToString() + ", " +
                                                    "nValorProduction: " + nValorProduction.ToString() + ", " +
                                                    "nValorConsumption: " + nValorConsumption.ToString() + ", " +
                                                    "nValorClosing:" + nValorClosing.ToString();

                                Funciones.CapturarMensaje(cCadenaLog);

                                //registramos el valor closing en el tag
                                bool rpta = ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);

                                string cCadenaLog2 = "Grabo en PI: " + rpta.ToString() + ", " + 
                                                     "Tag: " + cTag + ", " +
                                                     "Fecha: " + dFechaTemp.ToString() + ", " + 
                                                     "Valor: " + nValorClosing.ToString();

                                Funciones.CapturarMensaje(cCadenaLog2);
                                    
                            }
                            else if (cNombre == "Ammonium hydroxide")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.04-00007229.In", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueKILN = oBloques.FirstOrDefault(x => x.Nombre == "KILN");
                                if (oBloqueKILN != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueKILN.Elementos.FirstOrDefault(x => x.Nombre == "AMMONIA");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Grinding Aid")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.05-00013303.In", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueCEMENTGRINDING	 = oBloques.FirstOrDefault(x => x.Nombre == "CEMENT GRINDING");
                                if (oBloqueCEMENTGRINDING != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCEMENTGRINDING.Elementos.FirstOrDefault(x => x.Nombre == "GRINDING AID");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }
                            else if (cNombre == "Filter cake")
                            {
                                //obtenemos el valor production
                                double nValorProduction = 0;
                                AFValue oAFValorProduction = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, "RM.11-00003496.In", dFechaTemp);
                                if (oAFValorProduction != null)
                                {
                                    if (!(oAFValorProduction.Value.GetType().Name == "AFEnumerationValue" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "PIException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "SystemException" ||
                                          oAFValorProduction.Value.GetType().BaseType.Name == "Exception"))
                                    {
                                        Double.TryParse(oAFValorProduction.Value.ToString(), out nValorProduction);
                                    }
                                }

                                //obtenemos el valor consumption
                                double nValorConsumption = 0;
                                BloqueDOR oBloqueCRUSHERMIXLIME = oBloques.FirstOrDefault(x => x.Nombre == "CRUSHER MixLime");
                                if (oBloqueCRUSHERMIXLIME != null)
                                {
                                    ElementoDOR oElementoDOR = oBloqueCRUSHERMIXLIME.Elementos.FirstOrDefault(x => x.Nombre == "FILTER CAKE USED IN MIX LIMESTONE");
                                    if (oElementoDOR != null)
                                    {
                                        Double.TryParse(oElementoDOR.ValorDia, out nValorConsumption);
                                    }
                                }

                                //obtenemos el valor closing
                                double nValorClosing = 0;
                                nValorClosing = nValorOpening + nValorProduction - nValorConsumption;

                                //registramos el valor closing en el tag
                                ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, dFechaTemp, nValorClosing, true);
                            }


                        }
                        catch (Exception ex1)
                        {
                            Funciones.CapturarError(ex1, "Operaciones.svc - CacularStockOpenning", "wsUNACEMPI", false);
                            continue;
                        }
                    }

                    dFechaTemp = dFechaTemp.AddDays(1);
                }

                return new Resultado(0, "Operación Exitosa");
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - CacularStockOpenning", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public Resultado RegistrarTotalMMBTUTON(string fecha)
        {
            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarTotalMMBTUTON", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
                string cTagTotalMMBTUTON = WebConfigurationManager.AppSettings["Tag_TOTAL_MMBTU_TON"];
                string cTagTotalMMBTUTONMTD = WebConfigurationManager.AppSettings["Tag_TOTAL_MMBTU_TON_MTD"];

                FAC oFAC = ObtenerFAC(fecha);
                if (oFAC != null)
                {
                    DateTime dFechaTemp = new DateTime(ldt_Date.Year, ldt_Date.Month, 1);
                    while(dFechaTemp <= ldt_Date){

                        double nValorDiario = 0;
                        double nValorMensual = 0;

                        ElementoFAC oElementoFAC = oFAC.Elementos.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                        if (oElementoFAC != null)
                        {
                            Double.TryParse(oElementoFAC.Total_MMBTU_Ton_Today.Trim(), out nValorDiario);                        
                            Double.TryParse(oElementoFAC.Total_MMBTU_Ton_MTD.Trim(), out nValorMensual);
                        }

                        nValorDiario = Math.Round(nValorDiario, 2, MidpointRounding.AwayFromZero);
                        nValorMensual = Math.Round(nValorMensual, 2, MidpointRounding.AwayFromZero);

                        ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagTotalMMBTUTON, dFechaTemp, nValorDiario, true);
                        ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagTotalMMBTUTONMTD, dFechaTemp, nValorMensual, true);

                        dFechaTemp = dFechaTemp.AddDays(1);
                    }    
                }

                return new Resultado(0, "Operación Exitosa");         
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarTotalMMBTUTON", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public List<ZtonsbudgetRow> ListarZtonsbudget()
        {
            List<ZtonsbudgetRow> oZtonsbudgetList = new List<ZtonsbudgetRow>();
            ZtonsbudgetRow oZtonsbudgetRow = new ZtonsbudgetRow();

            try
            {
                //obtenemos la data 
                DataTable dt = new DataTable();
                dt = new DALztonsbudget().Listar();

                //llenamos la coleccion
                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        oZtonsbudgetRow = new ZtonsbudgetRow();
                        oZtonsbudgetRow.Dato1 = dt.Rows[i][0].ToString();
                        oZtonsbudgetRow.Dato2 = dt.Rows[i][1].ToString();

                        oZtonsbudgetList.Add(oZtonsbudgetRow);
                    }
                }

                return oZtonsbudgetList;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarZtonsbudget", "wsUNACEMPI", false);
                return new List<ZtonsbudgetRow>();
            }
        }


        public List<Budget> ListarBudget()
        {
            List<Budget> oListaBudget = new List<Budget>();
            Budget oBudget = new Budget();

            try
            {
                //obtenemos la data 
                DataTable dt = new DataTable();
                dt = new DALztonsbudget().ListarBudget();

                //llenamos la coleccion
                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        oBudget = new Budget();
                        oBudget.PERIO = Convert.ToDateTime(dt.Rows[i]["PERIO"]).ToString("yyyy-MM-dd");
                        oBudget.TONS = Convert.ToDouble( dt.Rows[i]["tons"]);
                        oBudget.NAME1 = dt.Rows[i]["NAME1"].ToString();
                        oBudget.KUNAG = dt.Rows[i]["KUNAG"].ToString();

                        oListaBudget.Add(oBudget);
                    }
                }

                return oListaBudget;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarBudget", "wsUNACEMPI", false);
                return new List<Budget>();
            }
        }


        public List<MonthlyBudget> ListarMonthlyBudget(string fechaini, string fechafin)
        {
            List<MonthlyBudget> oListaMonthlyBudget = new List<MonthlyBudget>();
            MonthlyBudget oMonthlyBudget = new MonthlyBudget();

            DateTime ldt_Date_Ini;
            try
            {
                ldt_Date_Ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarMonthlyBudget", "wsUNACEMPI", false);
                return oListaMonthlyBudget;
            }

            DateTime ldt_Date_Fin;
            try
            {
                ldt_Date_Fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarMonthlyBudget", "wsUNACEMPI", false);
                return oListaMonthlyBudget;
            }

            try
            {
                //obtenemos la data 
                DataTable dt = new DataTable();
                dt = new DALztonsbudget().ListarMonthlyBudget(ldt_Date_Ini, ldt_Date_Fin);

                //llenamos la coleccion
                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        oMonthlyBudget = new MonthlyBudget();
                        oMonthlyBudget.PERIO = Convert.ToDateTime(dt.Rows[i]["fecha"]).ToString("yyyy-MM-dd");
                        oMonthlyBudget.TONS = Convert.ToDouble(dt.Rows[i]["tons"]);

                        oListaMonthlyBudget.Add(oMonthlyBudget);
                    }
                }

                return oListaMonthlyBudget;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarMonthlyBudget", "wsUNACEMPI", false);
                return new List<MonthlyBudget>();
            }
        }


        public Resultado RegistrarMonthlyBudget(string fecha)
        {
            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarMonthlyBudget", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
                string cTagMonthlyBudget = WebConfigurationManager.AppSettings["Tag_Monthly_Budget"];

                List<MonthlyBudget> oListaMonthlyBudget = ListarMonthlyBudget(ldt_Date.AddMonths(-2).ToString("yyyy-MM-dd"), ldt_Date.ToString("yyyy-MM-dd"));
                if (oListaMonthlyBudget != null)
                {
                    foreach (MonthlyBudget oMonthlyBudget in oListaMonthlyBudget)
                    {
                        ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagMonthlyBudget, Convert.ToDateTime(oMonthlyBudget.PERIO), oMonthlyBudget.TONS, true);
                    }
                }

                return new Resultado(0, "Operación Exitosa");
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarMonthlyBudget", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public List<CRinventoryItem> ListarCRinventory(string fechaini, string fechafin)
        {
            List<CRinventoryItem> oItems = new List<CRinventoryItem>();
            CRinventoryItem oItem = new CRinventoryItem();

            DateTime ldt_Date_Ini;
            try
            {
                ldt_Date_Ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarCRinventory", "wsUNACEMPI", false);
                return oItems;
            }

            DateTime ldt_Date_Fin;
            try
            {
                ldt_Date_Fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarCRinventory", "wsUNACEMPI", false);
                return oItems;
            }

            try
            {
                //obtenemos la data 
                DataTable dt = new DataTable();
                dt = new DALCRinventory().Listar(ldt_Date_Ini, ldt_Date_Fin);

                //llenamos la coleccion
                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        oItem = new CRinventoryItem();
                        oItem.fecha = Convert.ToDateTime(dt.Rows[i]["fecha"]).ToString("yyyy-MM-dd HH:mm:ss");
                        oItem.nombre = dt.Rows[i]["nombre"].ToString();
                        oItem.valor = Convert.ToDouble(dt.Rows[i]["valor"]);

                        oItems.Add(oItem);
                    }
                }

                return oItems;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarCRinventory", "wsUNACEMPI", false);
                return new List<CRinventoryItem>();
            }
        }


        public Resultado RegistrarCRinventory(string fecha)
        {
            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarCRinventory", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

                string cTagBlendingSiloMeasure = WebConfigurationManager.AppSettings["Tag_BlendingSiloMeasure"];
                string cTagPulverizedCoalsiloMeasure = WebConfigurationManager.AppSettings["Tag_PulverizedCoalsiloMeasure"];
                string cTagClinkerEmergencySiloMeasure = WebConfigurationManager.AppSettings["Tag_ClinkerEmergencySiloMeasure"];
                string cTagCO2Measure = WebConfigurationManager.AppSettings["Tag_CO2Measure"];
                string cTagFoamMeasure = WebConfigurationManager.AppSettings["Tag_FoamMeasure"];
                string cTagGrindingAidMeasure = WebConfigurationManager.AppSettings["Tag_GrindingAidMeasure"];

                List<CRinventoryItem> oItems = ListarCRinventory(ldt_Date.AddDays(-30).ToString("yyyy-MM-dd"), ldt_Date.ToString("yyyy-MM-dd"));

                //DateTime dFechaIni = new DateTime(2022, 1, 1);
                //List<CRinventoryItem> oItems = ListarCRinventory(dFechaIni.ToString("yyyy-MM-dd"), ldt_Date.ToString("yyyy-MM-dd"));

                if (oItems != null)
                {
                    foreach (CRinventoryItem oItem in oItems)
                    {
                        if (oItem.nombre.ToUpper() == "Blend Silo".ToUpper())
                        {
                            ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagBlendingSiloMeasure, Convert.ToDateTime(oItem.fecha), oItem.valor, true);
                        }
                        else if (oItem.nombre.ToUpper() == "Pulverized Coal silo".ToUpper())
                        {
                            ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagPulverizedCoalsiloMeasure, Convert.ToDateTime(oItem.fecha), oItem.valor, true);
                        }
                        else if (oItem.nombre.ToUpper() == "Clinker Emergency Silo".ToUpper())
                        {
                            ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagClinkerEmergencySiloMeasure, Convert.ToDateTime(oItem.fecha), oItem.valor, true);
                        }
                        else if (oItem.nombre.ToUpper() == "CO2".ToUpper())
                        {
                            ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagCO2Measure, Convert.ToDateTime(oItem.fecha), oItem.valor, true);
                        }
                        else if (oItem.nombre.ToUpper() == "Foam".ToUpper())
                        {
                            ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagFoamMeasure, Convert.ToDateTime(oItem.fecha), oItem.valor, true);
                        }
                        else if (oItem.nombre.ToUpper() == "Grinding Aid".ToUpper())
                        {
                            ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagGrindingAidMeasure, Convert.ToDateTime(oItem.fecha), oItem.valor, true);
                        }
                    }
                }

                return new Resultado(0, "Operación Exitosa");
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarCRinventory", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public List<int> ListarAnosMasterData()
        {
            List<int> oAnos = new List<int>();

            for (int i=2022; i<=DateTime.Now.Year; i++){
                oAnos.Add(i);
            }

            return oAnos;
        }


        public List<PeriodoMasterData> ListarPeriodosMasterData(int ano)
        {
            List<PeriodoMasterData> oDatos = new List<PeriodoMasterData>();
            PeriodoMasterData oDato = new PeriodoMasterData();

            try
            {
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
                string cTag = WebConfigurationManager.AppSettings["Tag_MasterDataPeriodState"];

                PIServers oPIServers = new PIServers();
                PIServer myPIServer = oPIServers[cServidorPIData];
                myPIServer.Connect();

                PIPoint lo_PiPoint;
                lo_PiPoint = PIPoint.FindPIPoint(myPIServer, cTag);

                DateTime dFechaIni = new DateTime(ano, 1, 1);
                DateTime dFechaFin = new DateTime(ano, 12, 31);
                AFTime oAFTimeIni = new AFTime(dFechaIni.ToUniversalTime());
                AFTime oAFTimeFin = new AFTime(dFechaFin.ToUniversalTime());
                AFTimeRange myRange = new AFTimeRange(oAFTimeIni, oAFTimeFin);

                AFValues lo_AFValues = lo_PiPoint.RecordedValues(myRange, AFBoundaryType.Inside, "", false);

                foreach (AFValue oAFValue in lo_AFValues)
                {
                    if (oAFValue.Value.GetType().Name == "AFEnumerationValue" ||
                        oAFValue.Value.GetType().BaseType.Name == "PIException" ||
                        oAFValue.Value.GetType().BaseType.Name == "SystemException" ||
                        oAFValue.Value.GetType().BaseType.Name == "Exception")
                    {
                        continue;
                    }

                    oDato = new PeriodoMasterData();
                    oDato.Estado = oAFValue.ValueAsInt32();
                    oDato.NombreEstado = oDato.Estado == 1 ? "OPEN" : "CLOSED";
                    oDato.Periodo = oAFValue.Timestamp.LocalTime.ToString("yyyy-MM-dd");
                    oDato.Ano = ano.ToString();
                    oDato.Mes = ObtenerNombreMesCompleto(Convert.ToDateTime(oDato.Periodo).Month);

                    oDatos.Add(oDato);
                }

                return oDatos;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarPeriodosMasterData", "wsUNACEMPI", false);
                return oDatos;
            }
        }


        public Resultado RegistrarPeriodoMasterData(EntradaRegistrarPeriodoMasterData oEntradaRegistrarPeriodoMasterData)
        {
            DateTime ldt_Date;
            Resultado oResultado = new Resultado();

            string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
            string cTag = WebConfigurationManager.AppSettings["Tag_MasterDataPeriodState"];

            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(oEntradaRegistrarPeriodoMasterData.Periodo.Substring(0, 4)),
                                        Convert.ToInt32(oEntradaRegistrarPeriodoMasterData.Periodo.Substring(5, 2)),
                                        Convert.ToInt32(oEntradaRegistrarPeriodoMasterData.Periodo.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarPeriodoMasterData", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                AFAnnotations oAnotaciones = new AFAnnotations();
                AFAnnotation oAnotacion = oAnotaciones.Add("UsuarioModificacion", oEntradaRegistrarPeriodoMasterData.UsuarioModificacion);

                bool rpta = ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTag, ldt_Date, oEntradaRegistrarPeriodoMasterData.Estado, true, oAnotaciones);

                if (rpta)
                {
                    return new Resultado(0, "Operación Exitosa");
                }
                else
                {
                    return new Resultado(-1, "No se pudo registrar el valor " + oEntradaRegistrarPeriodoMasterData.Estado + " para el tag " + cTag);
                }
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarPeriodoMasterData", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public List<PeriodoMasterData> ListarPeriodosMasterDataEnRangoFecha(string fechaini, string fechafin)
        {
            List<PeriodoMasterData> oDatos = new List<PeriodoMasterData>();
            PeriodoMasterData oDato = new PeriodoMasterData();

            DateTime ldt_Date_Ini;
            try
            {
                ldt_Date_Ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarPeriodosMasterDataEnRangoFecha", "wsUNACEMPI", false);
                return oDatos;
            }

            DateTime ldt_Date_Fin;
            try
            {
                ldt_Date_Fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarPeriodosMasterDataEnRangoFecha", "wsUNACEMPI", false);
                return oDatos;
            }

            try
            {
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
                string cTag = WebConfigurationManager.AppSettings["Tag_MasterDataPeriodState"];

                PIServers oPIServers = new PIServers();
                PIServer myPIServer = oPIServers[cServidorPIData];
                myPIServer.Connect();

                PIPoint lo_PiPoint;
                lo_PiPoint = PIPoint.FindPIPoint(myPIServer, cTag);

                AFTime oAFTimeIni = new AFTime(ldt_Date_Ini.ToUniversalTime());
                AFTime oAFTimeFin = new AFTime(ldt_Date_Fin.ToUniversalTime());
                AFTimeRange myRange = new AFTimeRange(oAFTimeIni, oAFTimeFin);

                AFValues lo_AFValues = lo_PiPoint.RecordedValues(myRange, AFBoundaryType.Inside, "", false);

                foreach (AFValue oAFValue in lo_AFValues)
                {
                    if (oAFValue.Value.GetType().Name == "AFEnumerationValue" ||
                        oAFValue.Value.GetType().BaseType.Name == "PIException" ||
                        oAFValue.Value.GetType().BaseType.Name == "SystemException" ||
                        oAFValue.Value.GetType().BaseType.Name == "Exception")
                    {
                        continue;
                    }

                    oDato = new PeriodoMasterData();
                    oDato.Estado = oAFValue.ValueAsInt32();
                    oDato.NombreEstado = oDato.Estado == 1 ? "OPEN" : "CLOSED";
                    oDato.Periodo = oAFValue.Timestamp.LocalTime.ToString("yyyy-MM-dd");
                    oDato.Ano = oAFValue.Timestamp.LocalTime.Year.ToString();
                    oDato.Mes = ObtenerNombreMesCompleto(Convert.ToDateTime(oDato.Periodo).Month);

                    oDatos.Add(oDato);
                }

                return oDatos;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarPeriodosMasterDataEnRangoFecha", "wsUNACEMPI", false);
                return oDatos;
            }
        }


        public Resultado RegistrarRawMaterial(string fecha)
        {
            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarRawMaterial", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                string cDatabase = WebConfigurationManager.AppSettings["databaseCalculatedTags"];
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];

                oPI.Connect();
                AFDatabase oDB = oPI.Databases[cDatabase];

                var oSearch = new AFElementSearch(oDB, "Buscar", @"Root:'' TemplateName:='Raw material'");
                IEnumerable<AFElement> oElementos = oSearch.FindElements(fullLoad: true);

                IEnumerable<AFAttribute> attributes = oElementos.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList = new AFAttributeList(attributes);

                IEnumerable<AFAttribute> attributesFiltered = attributeList.Where(a => a.Name.ToUpper() == "Tag".ToUpper());
                AFAttributeList attributeListFiltered = new AFAttributeList(attributesFiltered);

                AFListData oData = attributeListFiltered.Data;

                // Results should be sent back for 100 tags in each page.
                PIPagingConfiguration config = new PIPagingConfiguration(PIPageType.TagCount, 100);
                config.OperationTimeoutOverride = new TimeSpan(2, 0, 0);

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempoIni = new AFTime(ldt_Date.AddDays(-ldt_Date.Day).AddDays(1).ToUniversalTime());
                AFTime oTiempoFin = new AFTime(ldt_Date.AddDays(1).ToUniversalTime());
                AFTimeRange oTiempoRango = new AFTimeRange(oTiempoIni, oTiempoFin);
       
                //traemos los datos
                IEnumerable<AFValues> listResults = oData.RecordedValues(oTiempoRango, AFBoundaryType.Inside, null, false, config);

                foreach (AFValues oAFValores in listResults)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {
                            //obtenemos valor del tag
                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException" ||
                                oAFValor.Value.GetType().BaseType.Name == "Exception")
                            {
                                continue;
                            }

                            double nValor = oAFValor.ValueAsDouble();
                            DateTime dFechaValor = oAFValor.Timestamp.LocalTime;


                            //obtenemos valor del factor
                            string cTagFactor = oAFValor.Attribute.Element.Attributes["Factor"].DataReference.PIPoint.Name;
                            AFValue oAFValorFactor = ModPIExtFunctions.ObtenerAFValue(cServidorPIData, cTagFactor, dFechaValor);

                            if (oAFValorFactor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValorFactor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValorFactor.Value.GetType().BaseType.Name == "SystemException" ||
                                oAFValorFactor.Value.GetType().BaseType.Name == "Exception")
                            {
                                continue;
                            }

                            double nFactor = oAFValorFactor.ValueAsDouble();


                            //grabamos en output
                            double nValorFinal = nValor*nFactor;

                            string cTagOutput = "";
                            if (oAFValor.Attribute.Element.Attributes["Output"].DataReference != null)
                            {
                                cTagOutput = oAFValor.Attribute.Element.Attributes["Output"].DataReference.ToString();
                                cTagOutput = cTagOutput.Substring(cTagOutput.LastIndexOf(@"\") + 1);
                            }

                            //bool rpta = ModPIExtFunctions.Write_Value_PI(cTagOutput, dFechaValor, nValorFinal, true);
                            bool rpta = ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagOutput, dFechaValor, nValorFinal, true);
                            if (rpta == false)
                            {
                                int a = 3;
                            }
                                                    
                        }
                        catch (Exception ex2)
                        {
                            Funciones.CapturarError(ex2, "Operaciones.svc - RegistrarRawMaterial", "wsUNACEMPI", false);
                            continue;
                        }

                    }
                }

                return new Resultado(0, "Operación Exitosa");
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarRawMaterial", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public Resultado EjecutarCalculosSumarizadosDeAFMensual(string fecha)
        {
            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - EjecutarCalculosSumarizadosDeAF", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                DateTime dFechaIni = new DateTime(ldt_Date.Year, ldt_Date.Month, 1);
                DateTime dFechaTemp = dFechaIni;
                string cDescripcion = "";

                while (dFechaTemp <= ldt_Date)
                {
                    string cFecha = dFechaTemp.ToString("yyyy-MM-dd");
                    Resultado oResultado = EjecutarCalculosSumarizadosDeAF(cFecha);
                    cDescripcion = cDescripcion + oResultado.descripcion;
                    dFechaTemp = dFechaTemp.AddDays(1);
                }

                return new Resultado(0, cDescripcion);
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - EjecutarCalculosSumarizadosDeAFMensual", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public RDPReporte ObtenerRDP(string fecha)
        {
            RDPReporte oReporte = new RDPReporte();
            oReporte.Fecha = fecha;
            oReporte.oProcesos = new List<RDPProceso>();
           
            List<RDPProceso> oProcesos = new List<RDPProceso>();
            RDPProceso oProceso = new RDPProceso();

            List<RDPMaquina> oMaquinas = new List<RDPMaquina>();
            RDPMaquina oMaquina = new RDPMaquina();
            RDPProducto oProducto = new RDPProducto();
            RDPMaterial oMaterial = new RDPMaterial();
            RDPMaterialSAP oMaterialSAP = new RDPMaterialSAP();

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "RDP.svc - ObtenerRDP", "wsUNACEMPI", false);
                return oReporte;
            }

            try
            {
                string cDatabase = WebConfigurationManager.AppSettings["database"];
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];



                //obtenemos los valores de todos los elementos de tipo "Counter Formulation"
                List<ElementoValor> oElementosValor = new List<ElementoValor>();
                ElementoValor oElementoValor = new ElementoValor();

                var oSearch = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Counter Formulation'");
                IEnumerable<AFElement> oElementosProductos = oSearch.FindElements(fullLoad: true);

                IEnumerable<AFAttribute> attributes = oElementosProductos.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList = new AFAttributeList(attributes);

                IEnumerable<AFAttribute> attributesFiltered = attributeList.Where(a => a.Name.ToUpper() == "DeltaManualDataEntry".ToUpper());
                AFAttributeList attributeListFiltered = new AFAttributeList(attributesFiltered);

                AFListData oData = attributeListFiltered.Data;

                // Results should be sent back for 100 tags in each page.
                PIPagingConfiguration config = new PIPagingConfiguration(PIPageType.TagCount, 100);
                config.OperationTimeoutOverride = new TimeSpan(2, 0, 0);

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempoIni = new AFTime(ldt_Date.ToUniversalTime());
                AFTime oTiempoFin = new AFTime(ldt_Date.ToUniversalTime());
                AFTimeRange oTiempoRango = new AFTimeRange(oTiempoIni, oTiempoFin);


                //traemos los datos
                IEnumerable<AFValues> listResults = oData.RecordedValues(oTiempoRango, AFBoundaryType.Inside , null, false, config);
                foreach (AFValues oAFValores in listResults)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {
                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException" ||
                                oAFValor.Value.GetType().BaseType.Name == "Exception")
                            {
                                continue;
                            }

                            oElementoValor = new ElementoValor();
                            oElementoValor.Valor = oAFValor.ValueAsDouble();
                            oElementoValor.Elemento = oAFValor.Attribute.Element.Name;
                            oElementosValor.Add(oElementoValor);

                            //Funciones.CapturarMensaje(oAFValor.Attribute.Element.Name + ": " + oElementoValor.Valor.ToString());
                        }
                        catch (Exception ex2)
                        {
                            continue;
                        }

                    }
                }




                //obtenemos los valores de Process order de todos los elementos de tipo "Equipment"
                List<ElementoValor> oElementosValorOP = new List<ElementoValor>();
                ElementoValor oElementoValorOP = new ElementoValor();

                var oSearch2 = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Equipment'");
                IEnumerable<AFElement> oElementosMaquinas = oSearch2.FindElements(fullLoad: true);

                IEnumerable<AFAttribute> attributes2 = oElementosMaquinas.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList2 = new AFAttributeList(attributes2);

                IEnumerable<AFAttribute> attributesFiltered2 = attributeList2.Where(a => a.Name.ToUpper() == "Process order".ToUpper());
                AFAttributeList attributeListFiltered2 = new AFAttributeList(attributesFiltered2);

                AFListData oData2 = attributeListFiltered2.Data;

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempo = new AFTime(ldt_Date.ToUniversalTime());
               
                //traemos los datos
                IEnumerable<AFValue> listResults2 = oData2.RecordedValue(oTiempo, AFRetrievalMode.AtOrBefore);
                foreach (AFValue oAFValor in listResults2)
                {
                    try
                    {
                        if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                            oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                            oAFValor.Value.GetType().BaseType.Name == "SystemException" ||
                            oAFValor.Value.GetType().BaseType.Name == "Exception")
                        {
                            continue;
                        }

                        oElementoValorOP = new ElementoValor();
                        oElementoValorOP.Valor = oAFValor.ValueAsDouble();
                        oElementoValorOP.Elemento = oAFValor.Attribute.Element.Name;
                        oElementosValorOP.Add(oElementoValorOP);
                    }
                    catch (Exception ex2)
                    {
                        continue;
                    }

                }



                //obtenemos los valores de todos los elementos de tipo "Notification - Raw material"
                List<ElementoValor> oElementosRMValor = new List<ElementoValor>();
                ElementoValor oElementoRMValor = new ElementoValor();

                var oSearch4 = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Notification - Raw material'");
                IEnumerable<AFElement> oElementosRM4 = oSearch4.FindElements(fullLoad: true);

                IEnumerable<AFAttribute> attributes4 = oElementosRM4.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList4 = new AFAttributeList(attributes4);

                IEnumerable<AFAttribute> attributesFiltered4 = attributeList4.Where(a => a.Name.ToUpper() == "DeltaManualDataEntry".ToUpper());
                AFAttributeList attributeListFiltered4 = new AFAttributeList(attributesFiltered4);

                AFListData oData4 = attributeListFiltered4.Data;

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempoIni4 = new AFTime(ldt_Date.ToUniversalTime());
                AFTime oTiempoFin4 = new AFTime(ldt_Date.ToUniversalTime());
                AFTimeRange oTiempoRango4 = new AFTimeRange(oTiempoIni4, oTiempoFin4);


                //traemos los datos
                IEnumerable<AFValues> listResults4 = oData4.RecordedValues(oTiempoRango4, AFBoundaryType.Inside, null, false, config);
                foreach (AFValues oAFValores in listResults4)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {
                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException" ||
                                oAFValor.Value.GetType().BaseType.Name == "Exception")
                            {
                                continue;
                            }

                            oElementoRMValor = new ElementoValor();
                            oElementoRMValor.Valor = oAFValor.ValueAsDouble();
                            oElementoRMValor.Elemento = oAFValor.Attribute.Element.Name;
                            oElementosRMValor.Add(oElementoRMValor);
                        }
                        catch (Exception ex2)
                        {
                            continue;
                        }

                    }
                }


                //obtenemos los valores de Process order de todos los elementos de tipo "Notification - Raw material"
                List<ElementoValor> oElementosRMValorOP = new List<ElementoValor>();
                ElementoValor oElementoRMValorOP = new ElementoValor();

                var oSearch3 = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Notification - Raw material'");
                IEnumerable<AFElement> oElementosRM = oSearch3.FindElements(fullLoad: true);

                IEnumerable<AFAttribute> attributes3 = oElementosRM.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList3 = new AFAttributeList(attributes3);

                IEnumerable<AFAttribute> attributesFiltered3 = attributeList3.Where(a => a.Name.ToUpper() == "Process order".ToUpper());
                AFAttributeList attributeListFiltered3 = new AFAttributeList(attributesFiltered3);

                AFListData oData3 = attributeListFiltered3.Data;

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempo3 = new AFTime(ldt_Date.ToUniversalTime());

                //traemos los datos
                IEnumerable<AFValue> listResults3 = oData3.RecordedValue(oTiempo3, AFRetrievalMode.AtOrBefore);
                foreach (AFValue oAFValor in listResults3)
                {
                    try
                    {
                        if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                            oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                            oAFValor.Value.GetType().BaseType.Name == "SystemException" ||
                            oAFValor.Value.GetType().BaseType.Name == "Exception")
                        {
                            continue;
                        }

                        oElementoRMValorOP = new ElementoValor();
                        oElementoRMValorOP.Valor = oAFValor.ValueAsDouble();
                        oElementoRMValorOP.Elemento = oAFValor.Attribute.Element.Name;
                        oElementosRMValorOP.Add(oElementoRMValorOP);
                    }
                    catch (Exception ex2)
                    {
                        continue;
                    }

                }





                //CIRCUITOS
                var oSearchCircuitos = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Circuito'");
                foreach (AFElement oElementoCircuito in oSearchCircuitos.FindElements(fullLoad: true))
                {
                    oProceso = new RDPProceso();
                    oProceso.FCH_PRODUCCION = fecha;
                    oProceso.COD_GRUPO = oElementoCircuito.Name;

                    oProceso.NUM_ORDEN = 99999;
                    if (oElementoCircuito.Attributes["Notification order"] != null)
                        oProceso.NUM_ORDEN = oElementoCircuito.Attributes["Notification order"].GetValue().ValueAsInt32();
                    
                    oProceso.MAQUINAS = new List<RDPMaquina>();

                    //MAQUINAS
                    string cRutaAFCircuito = oElementoCircuito.GetPath();
                    cRutaAFCircuito = cRutaAFCircuito.Replace(@"\\" + oPI.Name + @"\" + cDatabase + @"\", "");

                    var oSearchMaquinas = new AFElementSearch(lo_Database, "Buscar", @"Root:'" + cRutaAFCircuito  + "' TemplateName:='Equipment'");
                    foreach (AFElement oElementoMaquina in oSearchMaquinas.FindElements(fullLoad: true))
                    {
                        if (oElementoMaquina.Attributes["Notificacion"].GetValue().ValueAsInt32() == 0)
                        {
                            //no se notifica maquina
                            continue;
                        }

                        oMaquina = new RDPMaquina();
                        oMaquina.FCH_PRODUCCION = fecha;
                        oMaquina.COD_MAQUINA = oElementoMaquina.Name;
                        oMaquina.COD_GRUPO = oElementoCircuito.Name;

                        oMaquina.NUM_ORDEN = 99999;
                        if (oElementoMaquina.Attributes["Notification order"] != null)
                            oMaquina.NUM_ORDEN = oElementoMaquina.Attributes["Notification order"].GetValue().ValueAsInt32();

                        oMaquina.PRODUCTOS = new List<RDPProducto>();



                        //PRODUCTOS
                        string cRutaAFMaquina = oElementoMaquina.GetPath();
                        cRutaAFMaquina = cRutaAFMaquina.Replace(@"\\" + oPI.Name + @"\" + cDatabase + @"\", "");

                        var oSearchFormulacionProductos = new AFElementSearch(lo_Database, "Buscar", @"Root:'" + cRutaAFMaquina + "' TemplateName:='Product Formulation'");
                        foreach (AFElement oElementoFormulacionProducto in oSearchFormulacionProductos.FindElements(fullLoad: true))
                        {
                            foreach (AFElement oElementoProducto in oElementoFormulacionProducto.Elements)
                            {
                                bool bSeAgregaronHoras = false;

                                if (oElementoProducto.Template.Name == "Counter Formulation")
                                {
                                    int nNotificacion = 0;
                                    if (Int32.TryParse(oElementoProducto.Attributes["Notificacion"].GetValue().ToString(), out nNotificacion)==false)
                                    {
                                        //no se notifica producto
                                        continue;
                                    }

                                    if (oElementoProducto.Attributes["Notificacion"].GetValue().ValueAsInt32() == 0)
                                    {
                                        //no se notifica producto
                                        continue;
                                    }

                                    oProducto = new RDPProducto();
                                    oProducto.FCH_PRODUCCION = fecha;
                                    oProducto.COD_MAQUINA = oElementoMaquina.Name;
                                    oProducto.COD_GRUPO = oElementoCircuito.Name;
                                    oProducto.COD_PRODUCTO = oElementoProducto.Name;
                                    oProducto.COD_PUESTO_TRABAJO = oElementoMaquina.Attributes["Puesto trabajo"].GetValue().Value.ToString();
                                    oProducto.COD_MATERIAL_OP = oElementoProducto.Attributes["SAP Code"].GetValue().Value.ToString();
                                    oProducto.COD_ALMACEN = oElementoProducto.Attributes["Storage"].GetValue().Value.ToString();
                                    oProducto.COD_UNIDAD = oElementoProducto.Attributes["Units"].GetValue().Value.ToString();                                  
                                    oProducto.CNT_HORAS = "0.00";
                                    oProducto.COD_UNIDAD_HORAS = "";
                                    oProducto.FLG_GAS = "N";
                                    oProducto.FLG_COAL = "N";
                                    oProducto.FLG_HORA = "N";
                                    oProducto.FLG_SIN_MATERIALES = "N";
                                    oProducto.COD_ESTADO = "";

                                    oProducto.DSC_RESPUESTA = "";
                                    oProducto.COD_RESPUESTA = "";
                                    oProducto.NUM_NOTIFICACION = "";
                                    oProducto.NUM_CONTADOR = "";
                                    oProducto.DSC_RESPUESTA_DETALLE = "";
                                    oProducto.NUM_INTENTOS = 0;
                                    oProducto.VORNR = "";
                                    oProducto.DSC_PRODUCTO = oElementoProducto.Attributes["Header title notification"].GetValue().Value.ToString();
                                    oProducto.NRO_DUPLICADO = "0";

                                    oProducto.NUM_ORDEN = 99999;
                                    if (oElementoProducto.Attributes["Notification order"] != null)
                                        oProducto.NUM_ORDEN = oElementoProducto.Attributes["Notification order"].GetValue().ValueAsInt32();

                                    oProducto.MATERIALES = new List<RDPMaterial>();

                                    oProducto.NUM_OP = "";
                                    oProducto.DSC_OP = "<span>OP No Configurada</span>";
                                    ElementoValor oElementoValorOPTemp = oElementosValorOP.FirstOrDefault(x => x.Elemento == oElementoMaquina.Name);
                                    if (oElementoValorOPTemp != null)
                                    {
                                        oProducto.NUM_OP = oElementoValorOPTemp.Valor.ToString();
                                        oProducto.DSC_OP = "<span class='tooltip-orden-proceso' data-toggle='tooltip' data-placement='top' title='" + oProducto.COD_MATERIAL_OP + "'>O.P|</span>" + oProducto.NUM_OP;                                       
                                    }

                                    oProducto.CNT_TONELADAS = "0.00";
                                    ElementoValor oElementoValorTemp = oElementosValor.FirstOrDefault(x => x.Elemento == oElementoProducto.Name);
                                    if (oElementoValorTemp != null)
                                    {
                                        oProducto.CNT_TONELADAS = oElementoValorTemp.Valor.ToString("###,###,##0.00");
                                    }


                                    //MATERIALES
                                    var oSearchFormulacionMateriales = new AFElementSearch(lo_Database, "Buscar", @"Root:'" + cRutaAFMaquina + "' TemplateName:='Feed Formulation'");
                                    foreach (AFElement oElementoFormulacionMaterial in oSearchFormulacionMateriales.FindElements(fullLoad: true))
                                    {
                                        foreach (AFElement oElementoMaterial in oElementoFormulacionMaterial.Elements)
                                        {
                                            if (oElementoMaterial.Template.Name == "Counter Formulation")
                                            {
                                                int nNotificacionMat = 0;
                                                if (Int32.TryParse(oElementoMaterial.Attributes["Notificacion"].GetValue().ToString(), out nNotificacionMat) == false)
                                                {
                                                    //no se notifica material
                                                    continue;
                                                }

                                                if (oElementoMaterial.Attributes["Notificacion"].GetValue().ValueAsInt32() == 0)
                                                {
                                                    //no se notifica material
                                                    continue;
                                                }

                                                oMaterial = new RDPMaterial();
                                                oMaterial.FCH_PRODUCCION = fecha;
                                                oMaterial.COD_MAQUINA = oElementoMaquina.Name;
                                                oMaterial.COD_GRUPO = oElementoCircuito.Name;
                                                oMaterial.COD_PRODUCTO = oElementoProducto.Name;
                                                oMaterial.COD_MATERIAL = oElementoMaterial.Name;
                                                oMaterial.MATERIALES_SAP = new List<RDPMaterialSAP>();

                                                oMaterial.CNT_TONELADASNOTIF = "0.00";
                                                ElementoValor oElementoValorTemp2 = oElementosValor.FirstOrDefault(x => x.Elemento == oElementoMaterial.Name);
                                                if (oElementoValorTemp2 != null)
                                                {
                                                    oMaterial.CNT_TONELADASNOTIF = oElementoValorTemp2.Valor.ToString("###,###,##0.00");
                                                }


                                                //MATERIALES SAP
                                                oMaterialSAP = new RDPMaterialSAP();
                                                oMaterialSAP.FCH_PRODUCCION = fecha;
                                                oMaterialSAP.COD_MAQUINA = oElementoMaquina.Name;
                                                oMaterialSAP.COD_GRUPO = oElementoCircuito.Name;
                                                oMaterialSAP.COD_PRODUCTO = oElementoProducto.Name;
                                                oMaterialSAP.COD_MATERIAL = oElementoMaterial.Name;
                                                oMaterialSAP.CNT_TONELADASNOTIF = oMaterial.CNT_TONELADASNOTIF;

                                                oMaterialSAP.COD_MATERIAL_SAP = oElementoMaterial.Attributes["SAP Code"].GetValue().Value.ToString();
                                                oMaterialSAP.COD_ALMACEN = oElementoMaterial.Attributes["Storage"].GetValue().Value.ToString();
                                                oMaterialSAP.COD_UNIDAD = oElementoMaterial.Attributes["Units"].GetValue().Value.ToString();
                                                oMaterialSAP.DSC_MATERIAL_SAP = oElementoMaterial.Attributes["Title AA"].GetValue().Value.ToString();
                                              
                                                oMaterial.MATERIALES_SAP.Add(oMaterialSAP);

                                                oProducto.MATERIALES.Add(oMaterial);
                                            }
                                            
                                        }
                                    }

                                    oMaquina.PRODUCTOS.Add(oProducto);





                                    //HORAS (COMO PRODUCTO INDEPENDIENTE)     
                                    if (bSeAgregaronHoras==false)
                                    {
                                        var oSearchFormulacionHoras = new AFElementSearch(lo_Database, "Buscar", @"Root:'" + cRutaAFMaquina + "' TemplateName:='Hours Formulation'");
                                        foreach (AFElement oElementoFormulacionHoras in oSearchFormulacionHoras.FindElements(fullLoad: true))
                                        {
                                            foreach (AFElement oElementoHora in oElementoFormulacionHoras.Elements)
                                            {
                                                if (oElementoHora.Template.Name == "Counter Formulation")
                                                {
                                                    int nNotificacionHor = 0;
                                                    if (Int32.TryParse(oElementoHora.Attributes["Notificacion"].GetValue().ToString(), out nNotificacionHor) == false)
                                                    {
                                                        //no se notifica hora
                                                        continue;
                                                    }

                                                    if (oElementoHora.Attributes["Notificacion"].GetValue().ValueAsInt32() == 0)
                                                    {
                                                        //no se notifica hora
                                                        continue;
                                                    }

                                                    oProducto = new RDPProducto();
                                                    oProducto.FCH_PRODUCCION = fecha;
                                                    oProducto.COD_MAQUINA = oElementoMaquina.Name;
                                                    oProducto.COD_GRUPO = oElementoCircuito.Name;
                                                    //oProducto.COD_PRODUCTO = oElementoProducto.Name;
                                                    oProducto.COD_PRODUCTO = oElementoHora.Name;
                                                    oProducto.COD_MATERIAL_OP = "";
                                                    oProducto.COD_ALMACEN = "";
                                                    oProducto.COD_UNIDAD = "";
                                                    oProducto.CNT_TONELADAS = "0.00";
                                                    oProducto.FLG_GAS = "N";
                                                    oProducto.FLG_COAL = "N";
                                                    oProducto.FLG_HORA = "S";
                                                    oProducto.FLG_SIN_MATERIALES = "N";
                                                    oProducto.COD_ESTADO = "";

                                                    oProducto.DSC_RESPUESTA = "";
                                                    oProducto.COD_RESPUESTA = "";
                                                    oProducto.NUM_NOTIFICACION = "";
                                                    oProducto.NUM_CONTADOR = "";
                                                    oProducto.DSC_RESPUESTA_DETALLE = "";
                                                    oProducto.NUM_INTENTOS = 0;
                                                    oProducto.VORNR = "";
                                                    oProducto.DSC_PRODUCTO = oElementoHora.Attributes["Header title notification"].GetValue().Value.ToString();
                                                    oProducto.NRO_DUPLICADO = "0";

                                                    oProducto.NUM_ORDEN = 99999;
                                                    if (oElementoHora.Attributes["Notification order"] != null)
                                                        oProducto.NUM_ORDEN = oElementoHora.Attributes["Notification order"].GetValue().ValueAsInt32();

                                                    oProducto.MATERIALES = new List<RDPMaterial>();

                                                    oProducto.COD_UNIDAD_HORAS = oElementoHora.Attributes["Units"].GetValue().Value.ToString();
                                                    oProducto.COD_PUESTO_TRABAJO = oElementoHora.Attributes["Puesto trabajo"].GetValue().Value.ToString();

                                                    oProducto.NUM_OP = "";
                                                    oProducto.DSC_OP = "<span>OP No Configurada</span>";
                                                    ElementoValor oElementoValorOPTemp2 = oElementosValorOP.FirstOrDefault(x => x.Elemento == oElementoMaquina.Name);
                                                    if (oElementoValorOPTemp2 != null)
                                                    {
                                                        oProducto.NUM_OP = oElementoValorOPTemp2.Valor.ToString();
                                                        oProducto.DSC_OP = "<span class='tooltip-orden-proceso' data-toggle='tooltip' data-placement='top' title='" + oProducto.COD_MATERIAL_OP + "'>O.P|</span>" + oProducto.NUM_OP;
                                                    }

                                                    oProducto.CNT_HORAS = "0.00";
                                                    ElementoValor oElementoValorTemp2 = oElementosValor.FirstOrDefault(x => x.Elemento == oElementoHora.Name);
                                                    if (oElementoValorTemp2 != null)
                                                    {
                                                        oProducto.CNT_HORAS = oElementoValorTemp2.Valor.ToString("###,###,##0.00");
                                                    }

                                                    oMaquina.PRODUCTOS.Add(oProducto);
                                                }
                                            }
                                        }

                                        bSeAgregaronHoras = true;
                                    }
                                    

                                   


                                    //PRODUCTO DUPLICADO?
                                    if (oElementoMaquina.Attributes["Notificacion"].GetValue().ValueAsInt32() == 2)
                                    {
                                        int n = 1;
                                        var oSearchFormulacionHoras = new AFElementSearch(lo_Database, "Buscar", @"Root:'" + cRutaAFMaquina + "' TemplateName:='Hours Formulation'");
                                        foreach (AFElement oElementoFormulacionHoras in oSearchFormulacionHoras.FindElements(fullLoad: true))
                                        {
                                            foreach (AFElement oElementoHora in oElementoFormulacionHoras.Elements) {
                                                if (oElementoHora.Template.Name == "Counter Formulation") {

                                                    int nNotificacionHor = 0;
                                                    if (Int32.TryParse(oElementoHora.Attributes["Notificacion"].GetValue().ToString(), out nNotificacionHor) == false)
                                                    {
                                                        //no se notifica
                                                        continue;
                                                    }

                                                    if (oElementoHora.Attributes["Notificacion"].GetValue().ValueAsInt32() != 0) {

                                                        //obtenemos el producto original
                                                        RDPProducto oProductoTemp = oMaquina.PRODUCTOS.FirstOrDefault(x => x.FCH_PRODUCCION == fecha &&
                                                                                                                               x.COD_GRUPO == oElementoCircuito.Name &&
                                                                                                                               x.COD_MAQUINA == oElementoMaquina.Name &&
                                                                                                                               x.COD_PRODUCTO == oElementoProducto.Name);

                                                        //por cada hora debe existir un producto
                                                        if (oProductoTemp != null) {
                                                            if (oProductoTemp.COD_PUESTO_TRABAJO != oElementoHora.Attributes["Puesto trabajo"].GetValue().Value.ToString())
                                                            {
                                                                //clonar el producto original
                                                                RDPProducto oProductoClon = oProductoTemp.DeepCopy();
                                                                oProductoClon.COD_PUESTO_TRABAJO = oElementoHora.Attributes["Puesto trabajo"].GetValue().Value.ToString();
                                                                oProductoClon.FLG_SIN_MATERIALES = "S";
                                                                oProductoClon.NRO_DUPLICADO = "1";
                                                                oProductoClon.MATERIALES = new List<RDPMaterial>();
                                                                oMaquina.PRODUCTOS.Add(oProductoClon);
                                                            }

                                                            //if (n == 1)
                                                            //{
                                                            //    oProductoTemp.COD_PUESTO_TRABAJO = oElementoHora.Attributes["Puesto trabajo"].GetValue().Value.ToString();
                                                            //}
                                                            //else
                                                            //{
                                                            //    //clonar el producto original
                                                            //    RDPProducto oProductoClon = oProductoTemp.DeepCopy();
                                                            //    oProductoClon.COD_PUESTO_TRABAJO = oElementoHora.Attributes["Puesto trabajo"].GetValue().Value.ToString();
                                                            //    oMaquina.PRODUCTOS.Add(oProductoClon);
                                                            //}
                                                        }
                                                        

                                                        n++;
                                                    }
                                                    
                                                }
                                            }                                     
                                            
                                        }
                                    }










                                }
                            }                       
                        }





                        //PRODUCTOS (COMBUSTIBLES)
                        var oSearchFormulacionCombustibles = new AFElementSearch(lo_Database, "Buscar", @"Root:'" + cRutaAFMaquina + "' TemplateName:='Fuel Formulation'");
                        foreach (AFElement oElementoFormulacionCombustible in oSearchFormulacionCombustibles.FindElements(fullLoad: true))
                        {
                            foreach (AFElement oElementoCombustible in oElementoFormulacionCombustible.Elements)
                            {
                                if (oElementoCombustible.Template.Name == "Fuel Gas")
                                {
                                    foreach (AFElement oElementoGas in oElementoCombustible.Elements)
                                    {
                                        if (oElementoGas.Template.Name == "Counter Formulation")
                                        {
                                            oProducto = new RDPProducto();
                                            oProducto.FCH_PRODUCCION = fecha;
                                            oProducto.COD_MAQUINA = oElementoMaquina.Name;
                                            oProducto.COD_GRUPO = oElementoCircuito.Name;
                                            oProducto.COD_PRODUCTO = oElementoGas.Name;
                                            oProducto.COD_PUESTO_TRABAJO = oElementoGas.Attributes["Puesto trabajo"].GetValue().Value.ToString();
                                            oProducto.COD_MATERIAL_OP = "";
                                            oProducto.COD_ALMACEN = "";
                                            oProducto.COD_UNIDAD = oElementoGas.Attributes["Units"].GetValue().Value.ToString();
                                            oProducto.CNT_HORAS = "0.00";
                                            oProducto.COD_UNIDAD_HORAS = "";
                                            oProducto.FLG_GAS = "S";
                                            oProducto.FLG_COAL = "N";
                                            oProducto.FLG_HORA = "N";
                                            oProducto.FLG_SIN_MATERIALES = "N";
                                            oProducto.COD_ESTADO = "";

                                            oProducto.DSC_RESPUESTA = "";
                                            oProducto.COD_RESPUESTA = "";
                                            oProducto.NUM_NOTIFICACION = "";
                                            oProducto.NUM_CONTADOR = "";
                                            oProducto.DSC_RESPUESTA_DETALLE = "";
                                            oProducto.NUM_INTENTOS = 0;
                                            oProducto.VORNR = "";
                                            oProducto.DSC_PRODUCTO = oElementoGas.Attributes["Header title notification"].GetValue().Value.ToString();
                                            oProducto.NRO_DUPLICADO = "0";

                                            oProducto.NUM_ORDEN = 99999;
                                            if (oElementoGas.Attributes["Notification order"] != null)
                                                oProducto.NUM_ORDEN = oElementoGas.Attributes["Notification order"].GetValue().ValueAsInt32();

                                            oProducto.MATERIALES = new List<RDPMaterial>();

                                            oProducto.NUM_OP = "";
                                            oProducto.DSC_OP = "<span>OP No Configurada</span>";
                                            ElementoValor oElementoValorOPTemp = oElementosValorOP.FirstOrDefault(x => x.Elemento == oElementoMaquina.Name);
                                            if (oElementoValorOPTemp != null)
                                            {
                                                oProducto.NUM_OP = oElementoValorOPTemp.Valor.ToString();
                                                oProducto.DSC_OP = "<span class='tooltip-orden-proceso' data-toggle='tooltip' data-placement='top' title='" + oProducto.COD_MATERIAL_OP + "'>O.P|</span>" + oProducto.NUM_OP;
                                            }

                                            oProducto.CNT_TONELADAS = "0.00";
                                            ElementoValor oElementoValorTemp = oElementosValor.FirstOrDefault(x => x.Elemento == oElementoGas.Name);
                                            if (oElementoValorTemp != null)
                                            {
                                                oProducto.CNT_TONELADAS = oElementoValorTemp.Valor.ToString("###,###,##0.00");
                                            }

                                            oMaquina.PRODUCTOS.Add(oProducto);
                                        }
                                    }
                                    
                                }
                                else if (oElementoCombustible.Template.Name == "Fuel Coal")
                                {
                                    foreach (AFElement oElementoCoal in oElementoCombustible.Elements)
                                    {
                                        if (oElementoCoal.Template.Name == "Counter Formulation")
                                        {
                                            oProducto = new RDPProducto();
                                            oProducto.FCH_PRODUCCION = fecha;
                                            oProducto.COD_MAQUINA = oElementoMaquina.Name;
                                            oProducto.COD_GRUPO = oElementoCircuito.Name;
                                            oProducto.COD_PRODUCTO = oElementoCoal.Name;
                                            oProducto.COD_PUESTO_TRABAJO = oElementoCoal.Attributes["Puesto trabajo"].GetValue().Value.ToString();
                                            oProducto.COD_MATERIAL_OP = "";
                                            oProducto.COD_ALMACEN = "";
                                            oProducto.COD_UNIDAD = oElementoCoal.Attributes["Units"].GetValue().Value.ToString();
                                            oProducto.CNT_HORAS = "0.00";
                                            oProducto.COD_UNIDAD_HORAS = "";
                                            oProducto.FLG_GAS = "N";
                                            oProducto.FLG_COAL = "S";
                                            oProducto.FLG_HORA = "N";
                                            oProducto.FLG_SIN_MATERIALES = "N";
                                            oProducto.COD_ESTADO = "";

                                            oProducto.DSC_RESPUESTA = "";
                                            oProducto.COD_RESPUESTA = "";
                                            oProducto.NUM_NOTIFICACION = "";
                                            oProducto.NUM_CONTADOR = "";
                                            oProducto.DSC_RESPUESTA_DETALLE = "";
                                            oProducto.NUM_INTENTOS = 0;
                                            oProducto.VORNR = "";
                                            oProducto.DSC_PRODUCTO = oElementoCoal.Attributes["Header title notification"].GetValue().Value.ToString();
                                            oProducto.NRO_DUPLICADO = "0";

                                            oProducto.NUM_ORDEN = 99999;
                                            if (oElementoCoal.Attributes["Notification order"] != null)
                                                oProducto.NUM_ORDEN = oElementoCoal.Attributes["Notification order"].GetValue().ValueAsInt32();

                                            oProducto.MATERIALES = new List<RDPMaterial>();

                                            oProducto.NUM_OP = "";
                                            oProducto.DSC_OP = "<span>OP No Configurada</span>";
                                            ElementoValor oElementoValorOPTemp = oElementosValorOP.FirstOrDefault(x => x.Elemento == oElementoMaquina.Name);
                                            if (oElementoValorOPTemp != null)
                                            {
                                                oProducto.NUM_OP = oElementoValorOPTemp.Valor.ToString();
                                                oProducto.DSC_OP = "<span class='tooltip-orden-proceso' data-toggle='tooltip' data-placement='top' title='" + oProducto.COD_MATERIAL_OP + "'>O.P|</span>" + oProducto.NUM_OP;
                                            }

                                            oProducto.CNT_TONELADAS = "0.00";
                                            ElementoValor oElementoValorTemp = oElementosValor.FirstOrDefault(x => x.Elemento == oElementoCoal.Name);
                                            if (oElementoValorTemp != null)
                                            {
                                                oProducto.CNT_TONELADAS = oElementoValorTemp.Valor.ToString("###,###,##0.00");
                                            }


                                            //MATERIALES
                                            oMaterial = new RDPMaterial();
                                            oMaterial.FCH_PRODUCCION = fecha;
                                            oMaterial.COD_MAQUINA = oElementoMaquina.Name;
                                            oMaterial.COD_GRUPO = oElementoCircuito.Name;
                                            oMaterial.COD_PRODUCTO = oElementoCoal.Name;
                                            oMaterial.COD_MATERIAL = oElementoCoal.Name;
                                            oMaterial.MATERIALES_SAP = new List<RDPMaterialSAP>();
                                            oMaterial.CNT_TONELADASNOTIF = oProducto.CNT_TONELADAS;
                                          

                                            //MATERIALES SAP
                                            oMaterialSAP = new RDPMaterialSAP();
                                            oMaterialSAP.FCH_PRODUCCION = fecha;
                                            oMaterialSAP.COD_MAQUINA = oElementoMaquina.Name;
                                            oMaterialSAP.COD_GRUPO = oElementoCircuito.Name;
                                            oMaterialSAP.COD_PRODUCTO = oElementoCoal.Name;
                                            oMaterialSAP.COD_MATERIAL = oElementoCoal.Name;
                                            oMaterialSAP.CNT_TONELADASNOTIF = oMaterial.CNT_TONELADASNOTIF;

                                            oMaterialSAP.COD_MATERIAL_SAP = oElementoCoal.Attributes["SAP Code"].GetValue().Value.ToString();
                                            oMaterialSAP.COD_ALMACEN = oElementoCoal.Attributes["Storage"].GetValue().Value.ToString();
                                            oMaterialSAP.COD_UNIDAD = oElementoCoal.Attributes["Units"].GetValue().Value.ToString();
                                            oMaterialSAP.DSC_MATERIAL_SAP = oElementoCoal.Attributes["Title AA"].GetValue().Value.ToString();

                                            oMaterial.MATERIALES_SAP.Add(oMaterialSAP);

                                            oProducto.MATERIALES.Add(oMaterial);

                                            oMaquina.PRODUCTOS.Add(oProducto);
                                        }
                                    }
                                }

                            }
                        }




                        


                        oProceso.MAQUINAS.Add(oMaquina);
                    }

                    oReporte.oProcesos.Add(oProceso);
                }


                

                //CIRCUITO - RAW MATERIALS
                var oSearchCircuitoNotificacion = new AFElementSearch(lo_Database, "Buscar", @"Root:'' Name:='Notification' TemplateName:='Circuito'");
                List<AFElement> oElementosCircuitos = oSearchCircuitoNotificacion.FindElements(fullLoad: true).ToList();
                if (oElementosCircuitos.Count > 0)
                {
                    oProceso = new RDPProceso();
                    oProceso.FCH_PRODUCCION = fecha;
                    oProceso.COD_GRUPO = oElementosCircuitos[0].Name;

                    oProceso.NUM_ORDEN = 99999;
                    if (oElementosCircuitos[0].Attributes["Notification order"] != null)
                        oProceso.NUM_ORDEN = oElementosCircuitos[0].Attributes["Notification order"].GetValue().ValueAsInt32();

                    oProceso.MAQUINAS = new List<RDPMaquina>();

                    if (oElementosCircuitos[0].Elements["Raw Materials"] != null)
                    {
                        oMaquina = new RDPMaquina();
                        oMaquina.FCH_PRODUCCION = fecha;
                        oMaquina.COD_GRUPO = oProceso.COD_GRUPO;
                        oMaquina.COD_MAQUINA = oElementosCircuitos[0].Elements["Raw Materials"].Name;

                        oMaquina.NUM_ORDEN = 99999;
                        if (oElementosCircuitos[0].Elements["Raw Materials"].Attributes["Notification order"] != null)
                            oMaquina.NUM_ORDEN = oElementosCircuitos[0].Elements["Raw Materials"].Attributes["Notification order"].GetValue().ValueAsInt32();

                        oMaquina.PRODUCTOS = new List<RDPProducto>();

                        //PRODUCTOS
                        var oSearchRM = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Notification - Raw material'");
                        foreach (AFElement oElementoRM in oSearchRM.FindElements(fullLoad: true))
                        {
                            oProducto = new RDPProducto();
                            oProducto.FCH_PRODUCCION = fecha;
                            oProducto.COD_MAQUINA = oMaquina.COD_MAQUINA;
                            oProducto.COD_GRUPO = oProceso.COD_GRUPO;
                            oProducto.COD_PRODUCTO = oElementoRM.Name;
                            oProducto.COD_PUESTO_TRABAJO = oElementoRM.Attributes["Puesto trabajo"].GetValue().Value.ToString();
                            oProducto.COD_MATERIAL_OP = oElementoRM.Attributes["SAP code production"].GetValue().Value.ToString();

                            oProducto.COD_ALMACEN = "";
                            if (oElementoRM.Attributes["Storage production"] != null)
                                oProducto.COD_ALMACEN = oElementoRM.Attributes["Storage production"].GetValue().Value.ToString();

                            oProducto.COD_UNIDAD = oElementoRM.Attributes["Unit production"].GetValue().Value.ToString();
                            oProducto.CNT_HORAS = "0.00";
                            oProducto.COD_UNIDAD_HORAS = "";
                            oProducto.FLG_GAS = "N";
                            oProducto.FLG_COAL = "N";
                            oProducto.FLG_HORA = "N";
                            oProducto.FLG_SIN_MATERIALES = "N";
                            oProducto.COD_ESTADO = "";

                            oProducto.DSC_RESPUESTA = "";
                            oProducto.COD_RESPUESTA = "";
                            oProducto.NUM_NOTIFICACION = "";
                            oProducto.NUM_CONTADOR = "";
                            oProducto.DSC_RESPUESTA_DETALLE = "";
                            oProducto.NUM_INTENTOS = 0;
                            oProducto.VORNR = oElementoRM.Attributes["VORNR"].GetValue().Value.ToString();

                            oProducto.DSC_PRODUCTO = "";
                            if (oElementoRM.Attributes["Header title notification"] != null)
                                oProducto.DSC_PRODUCTO = oElementoRM.Attributes["Header title notification"].GetValue().Value.ToString();

                            oProducto.NRO_DUPLICADO = "0";

                            oProducto.NUM_ORDEN = 99999;
                            if (oElementoRM.Attributes["Notification order"] != null)
                                oProducto.NUM_ORDEN = oElementoRM.Attributes["Notification order"].GetValue().ValueAsInt32();

                            oProducto.MATERIALES = new List<RDPMaterial>();

                            oProducto.NUM_OP = "";
                            oProducto.DSC_OP = "<span>OP No Configurada</span>";
                            ElementoValor oElementoValorRMTemp = oElementosRMValorOP.FirstOrDefault(x => x.Elemento == oElementoRM.Name);
                            if (oElementoValorRMTemp != null)
                            {
                                oProducto.NUM_OP = oElementoValorRMTemp.Valor.ToString();
                                oProducto.DSC_OP = "<span class='tooltip-orden-proceso' data-toggle='tooltip' data-placement='top' title='" + oProducto.COD_MATERIAL_OP + "'>O.P|</span>" + oProducto.NUM_OP;
                            }

                            oProducto.CNT_TONELADAS = "0.00";
                            ElementoValor oElementoValorTemp = oElementosRMValor.FirstOrDefault(x => x.Elemento == oElementoRM.Name);
                            if (oElementoValorTemp != null)
                            {
                                oProducto.CNT_TONELADAS = oElementoValorTemp.Valor.ToString("###,###,##0.00");
                            }



                            //MATERIALES
                            oMaterial = new RDPMaterial();
                            oMaterial.FCH_PRODUCCION = fecha;
                            oMaterial.COD_MAQUINA = oMaquina.COD_MAQUINA;
                            oMaterial.COD_GRUPO = oProceso.COD_GRUPO;
                            oMaterial.COD_PRODUCTO = oElementoRM.Name;
                            oMaterial.COD_MATERIAL = oElementoRM.Name;
                            oMaterial.MATERIALES_SAP = new List<RDPMaterialSAP>();
                            oMaterial.CNT_TONELADASNOTIF = oProducto.CNT_TONELADAS;


                            //MATERIALES SAP
                            oMaterialSAP = new RDPMaterialSAP();
                            oMaterialSAP.FCH_PRODUCCION = fecha;
                            oMaterialSAP.COD_MAQUINA = oMaquina.COD_MAQUINA;
                            oMaterialSAP.COD_GRUPO = oProceso.COD_GRUPO;
                            oMaterialSAP.COD_PRODUCTO = oElementoRM.Name;
                            oMaterialSAP.COD_MATERIAL = oElementoRM.Name;
                            oMaterialSAP.CNT_TONELADASNOTIF = oMaterial.CNT_TONELADASNOTIF;

                            oMaterialSAP.COD_MATERIAL_SAP = oElementoRM.Attributes["SAP code consumption"].GetValue().Value.ToString();
                            oMaterialSAP.COD_ALMACEN = oElementoRM.Attributes["Storage consumption"].GetValue().Value.ToString();
                            oMaterialSAP.COD_UNIDAD = oElementoRM.Attributes["Unit consumption"].GetValue().Value.ToString();

                            oMaterialSAP.DSC_MATERIAL_SAP = "";
                            if (oElementoRM.Attributes["Title AA"] != null)
                                oMaterialSAP.DSC_MATERIAL_SAP = oElementoRM.Attributes["Title AA"].GetValue().Value.ToString();

                            oMaterial.MATERIALES_SAP.Add(oMaterialSAP);

                            oProducto.MATERIALES.Add(oMaterial);

                            oMaquina.PRODUCTOS.Add(oProducto);
                        }

                        oProceso.MAQUINAS.Add(oMaquina);

                        oReporte.oProcesos.Add(oProceso);
                    }
                }


                oReporte.oProcesos = AgregarDatosNotificacion(ldt_Date, oReporte.oProcesos);


                //ordenamos
                if (oReporte.oProcesos != null)
                {
                    oReporte.oProcesos = oReporte.oProcesos.OrderBy(x => x.NUM_ORDEN).ToList();
                    foreach (RDPProceso oProcesoTemp in oReporte.oProcesos)
                    {
                        if (oProcesoTemp.MAQUINAS != null)
                        {
                            oProcesoTemp.MAQUINAS = oProcesoTemp.MAQUINAS.OrderBy(x => x.NUM_ORDEN).ToList();
                            foreach (RDPMaquina oMaquinaTemp in oProcesoTemp.MAQUINAS)
                            {
                                if (oMaquinaTemp.PRODUCTOS != null)
                                {
                                    oMaquinaTemp.PRODUCTOS = oMaquinaTemp.PRODUCTOS.OrderBy(x => x.NUM_ORDEN).ToList();
                                }
                            }
                        }
                    }
                }


                return oReporte;

            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerRDP", "wsUNACEMPI", false);
                oReporte = new RDPReporte();
                oReporte.Fecha = fecha;
                oReporte.oProcesos = new List<RDPProceso>();
                return oReporte;
            }
        }


        public Resultado InsertarNotificacion(RDPNotificacion oRDPNotificacion)
        {
            Resultado oResultado = new Resultado();

            try
            {
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

                AFAnnotations oAnotaciones = new AFAnnotations();
                AFAnnotation oAnotacion = oAnotaciones.Add("NUM_NOTIFICACION", oRDPNotificacion.NUM_NOTIFICACION);
                oAnotacion = oAnotaciones.Add("NUM_CONTADOR", oRDPNotificacion.NUM_CONTADOR);
                oAnotacion = oAnotaciones.Add("COD_ESTADO", oRDPNotificacion.COD_ESTADO);
                oAnotacion = oAnotaciones.Add("DSC_RESPUESTA", oRDPNotificacion.DSC_RESPUESTA);
                oAnotacion = oAnotaciones.Add("COD_RESPUESTA", oRDPNotificacion.COD_RESPUESTA);
                oAnotacion = oAnotaciones.Add("USR_NOTIFICACION", oRDPNotificacion.USR_NOTIFICACION);
                oAnotacion = oAnotaciones.Add("DSC_RESPUESTA_DETALLE", oRDPNotificacion.DSC_RESPUESTA_DETALLE);
                oAnotacion = oAnotaciones.Add("NUM_INTENTOS", oRDPNotificacion.NUM_INTENTOS);

                bool rpta = ModPIExtFunctions.Write_Value_PI(cServidorPIData, oRDPNotificacion.DSC_TAG_NOTIFICACION, DateTime.Now, oRDPNotificacion.FCH_PRODUCCION, true, "string", oAnotaciones);

                if (rpta)
                {
                    return new Resultado(0, "Operación Exitosa");
                }
                else
                {
                    return new Resultado(-1, "No se pudo registrar el valor " + oRDPNotificacion.FCH_PRODUCCION + " para el tag " + oRDPNotificacion.DSC_TAG_NOTIFICACION);
                }
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - InsertarNotificacion", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public Resultado EjecutarCalculosBasicosDeAF(string fecha)
        {
            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - EjecutarCalculosBasicosDeAF", "wsUNACEMPI", false);
                return new Resultado(-1, "Error en EjecutarCalculosBasicosDeAF para la fecha " + fecha + ". " + ex.Message + "\n");
            }

            try
            {
                string cDatabase = WebConfigurationManager.AppSettings["databaseCalculatedTags"];
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];

                var oSearch = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Method Calculation Basic'");

                string cPeriodo = "";
                string cCalculation = "";
                string cFecha = "";

                int codigoResultado = 0;
                string descripcionResultado = "";
                foreach (AFElement oElemento in oSearch.FindElements(fullLoad: true))
                {
                    try
                    {
                        string cTag1 = oElemento.Attributes["Tag 1"].DataReference.PIPoint.Name;
                        string cTag2 = oElemento.Attributes["Tag 2"].DataReference.PIPoint.Name;

                        string cTagResult = "";
                        if (oElemento.Attributes["Result"].DataReference != null)
                        {
                            cTagResult = oElemento.Attributes["Result"].DataReference.ToString();
                            cTagResult = cTagResult.Substring(cTagResult.LastIndexOf(@"\") + 1);
                        }

                        cPeriodo = oElemento.Attributes["Method"].GetValue().Value.ToString();
                        cCalculation = oElemento.Attributes["Calculation"].GetValue().Value.ToString();

                        cFecha = "";
                        if (cPeriodo.Trim().ToUpper() == "DAY")
                        {
                            cFecha = (new DateTime(ldt_Date.Year, ldt_Date.Month, 1)).ToString("yyyy-MM-dd");
                        }                      
                        else
                        {
                            codigoResultado = -1;
                            descripcionResultado = descripcionResultado + "* Cálculo de periodo: " + cPeriodo + ", fecha: " + fecha + " para " + oElemento.Name + " => " + "-1" + ": " + "El periodo (Method) no se definió correctamente" + "\n";
                            continue;
                        }

                        Resultado oResultadoCalculo = new Resultado();
                        if (cCalculation.Trim().ToUpper() == "SUM")
                        {                            
                            DateTime dFechaIni = ldt_Date.AddDays(-ldt_Date.Day).AddDays(1);
                            DateTime dFechaFin = ldt_Date;
                            DateTime dFechaTemp = dFechaIni;

                            while (dFechaTemp <= dFechaFin){

                                //valor 1
                                double nValor1 = 0;
                                AFValue oValor1 = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag1, dFechaTemp);
                                if (oValor1 != null)
                                {
                                    if (oValor1.Value.GetType().Name == "AFEnumerationValue" ||
                                        oValor1.Value.GetType().BaseType.Name == "PIException" ||
                                        oValor1.Value.GetType().BaseType.Name == "SystemException" ||
                                        oValor1.Value.GetType().BaseType.Name == "Exception")
                                    {
                                        nValor1 = 0;
                                    }
                                    else
                                    {
                                        nValor1 = oValor1.ValueAsDouble();
                                    }
                                }

                                //valor 2
                                double nValor2 = 0;
                                AFValue oValor2 = ModPIExtFunctions.ObtenerAFValueExacto(cServidorPIData, cTag2, dFechaTemp);
                                if (oValor2 != null)
                                {
                                    if (oValor2.Value.GetType().Name == "AFEnumerationValue" ||
                                        oValor2.Value.GetType().BaseType.Name == "PIException" ||
                                        oValor2.Value.GetType().BaseType.Name == "SystemException" ||
                                        oValor2.Value.GetType().BaseType.Name == "Exception")
                                    {
                                        nValor2 = 0;
                                    }
                                    else
                                    {
                                        nValor2 = oValor2.ValueAsDouble();
                                    }
                                }

                                //sumamos
                                double nValorSuma = nValor1 + nValor2;

                                //registramos la suma
                                bool rpta = ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagResult, dFechaTemp, nValorSuma, true);

                                string cResultado = "";
                                if (rpta)
                                {
                                    cResultado = "Se registro la suma de " + nValorSuma.ToString() + " para la fecha del " + dFechaTemp.ToString("yyyy-MM-dd");
                                }
                                else
                                {
                                    cResultado = "No se pudo registrar la suma de " + nValorSuma.ToString() + " para la fecha del " + dFechaTemp.ToString("yyyy-MM-dd");
                                }

                                descripcionResultado = descripcionResultado + "* Cálculo de periodo: " + cPeriodo + ", fecha: " + fecha + " para " + oElemento.Name + " => " + cResultado + "\n";

                                dFechaTemp = dFechaTemp.AddDays(1);
                            }
    
                        }
                        else
                        {
                            codigoResultado = -1;
                            descripcionResultado = descripcionResultado + "* Cálculo de periodo: " + cPeriodo + ", fecha: " + fecha + " para " + oElemento.Name + " => " + "-1" + ": " + "El atributo Calculation no se definió correctamente" + "\n";
                            continue;
                        }
                                                
                    }
                    catch (Exception ex)
                    {
                        Funciones.CapturarError(ex, "Operaciones.svc - EjecutarCalculosBasicosDeAF", "wsUNACEMPI", false);
                        codigoResultado = -1;
                        descripcionResultado = descripcionResultado + "* Cálculo de periodo: " + cPeriodo + ", fecha: " + fecha + " para " + oElemento.Name + " => " + "-1" + ": " + ex.Message + "\n";
                    }
                }

                return new Resultado(codigoResultado, descripcionResultado);
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - EjecutarCalculosBasicosDeAF", "wsUNACEMPI", false);
                return new Resultado(-1, "Error en EjecutarCalculosBasicosDeAF para la fecha " + fecha + ". " + ex.Message + "\n");
            }
        }


        public List<CRShift> ListarCRShift(string fechaini, string fechafin)
        {
            List<CRShift> oItems = new List<CRShift>();
            CRShift oItem = new CRShift();

            DateTime ldt_Date_Ini;
            try
            {
                ldt_Date_Ini = new DateTime(Convert.ToInt32(fechaini.Substring(0, 4)), Convert.ToInt32(fechaini.Substring(5, 2)), Convert.ToInt32(fechaini.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarCRShift", "wsUNACEMPI", false);
                return oItems;
            }

            DateTime ldt_Date_Fin;
            try
            {
                ldt_Date_Fin = new DateTime(Convert.ToInt32(fechafin.Substring(0, 4)), Convert.ToInt32(fechafin.Substring(5, 2)), Convert.ToInt32(fechafin.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarCRShift", "wsUNACEMPI", false);
                return oItems;
            }

            try
            {
                //obtenemos la data 
                DataTable dt = new DataTable();
                dt = new DALCRShift().Listar(ldt_Date_Ini, ldt_Date_Fin);

                //llenamos la coleccion
                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        oItem = new CRShift();
                        oItem.Operator = dt.Rows[i]["Operator"].ToString();
                        oItem.Supervisor = dt.Rows[i]["Supervisor"].ToString();
                        oItem.ShiftStart = Convert.ToDateTime(dt.Rows[i]["ShiftStart"]).ToString("yyyy-MM-dd HH:mm:ss");
                        oItem.ShiftEnd = Convert.ToDateTime(dt.Rows[i]["ShiftEnd"]).ToString("yyyy-MM-dd HH:mm:ss");

                        oItems.Add(oItem);
                    }
                }

                return oItems;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarCRShift", "wsUNACEMPI", false);
                return new List<CRShift>();
            }
        }


        public Resultado RegistrarCRShift(string fecha)
        {
            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarCRShift", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }

            try
            {
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

                string cTagOperator = WebConfigurationManager.AppSettings["Tag_Operator"];
                string cTagSupervisor = WebConfigurationManager.AppSettings["Tag_Supervisor"];

                List<CRShift> oItems = ListarCRShift(ldt_Date.AddDays(-30).ToString("yyyy-MM-dd"), ldt_Date.ToString("yyyy-MM-dd"));

                //DateTime dFechaIni = new DateTime(2022, 1, 1);
                //List<CRShift> oItems = ListarCRShift(dFechaIni.ToString("yyyy-MM-dd"), ldt_Date.ToString("yyyy-MM-dd"));

                if (oItems != null)
                {
                    foreach (CRShift oItem in oItems)
                    {
                        AFAnnotations oAnotaciones = null;
                        ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagOperator, Convert.ToDateTime(oItem.ShiftStart), oItem.Operator, true, "string", oAnotaciones);
                        ModPIExtFunctions.Write_Value_PI(cServidorPIData, cTagSupervisor, Convert.ToDateTime(oItem.ShiftStart), oItem.Supervisor, true, "string", oAnotaciones);                           
                    }
                }

                return new Resultado(0, "Operación Exitosa");
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarCRShift", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public RDPReporte ObtenerRDPEnergia(string fecha)
        {
            RDPReporte oReporte = new RDPReporte();
            oReporte.Fecha = fecha;
            oReporte.oProcesos = new List<RDPProceso>();

            List<RDPProceso> oProcesos = new List<RDPProceso>();
            RDPProceso oProceso = new RDPProceso();

            List<RDPMaquina> oMaquinas = new List<RDPMaquina>();
            RDPMaquina oMaquina = new RDPMaquina();
            RDPProducto oProducto = new RDPProducto();
            RDPMaterial oMaterial = new RDPMaterial();
            RDPMaterialSAP oMaterialSAP = new RDPMaterialSAP();

            DateTime ldt_Date;
            try
            {
                ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "RDP.svc - ObtenerRDPEnergia", "wsUNACEMPI", false);
                return oReporte;
            }

            try
            {
                string cDatabase = WebConfigurationManager.AppSettings["database"];
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];



                //obtenemos los valores de todos los elementos de tipo "Counter Formulation"
                List<ElementoValor> oElementosValor = new List<ElementoValor>();
                ElementoValor oElementoValor = new ElementoValor();

                var oSearch = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Counter Formulation'");
                IEnumerable<AFElement> oElementosProductos = oSearch.FindElements(fullLoad: true);

                IEnumerable<AFAttribute> attributes = oElementosProductos.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList = new AFAttributeList(attributes);

                IEnumerable<AFAttribute> attributesFiltered = attributeList.Where(a => a.Name.ToUpper() == "DeltaManualDataEntry".ToUpper());
                AFAttributeList attributeListFiltered = new AFAttributeList(attributesFiltered);

                AFListData oData = attributeListFiltered.Data;

                // Results should be sent back for 100 tags in each page.
                PIPagingConfiguration config = new PIPagingConfiguration(PIPageType.TagCount, 100);
                config.OperationTimeoutOverride = new TimeSpan(2, 0, 0);

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempoIni = new AFTime(ldt_Date.ToUniversalTime());
                AFTime oTiempoFin = new AFTime(ldt_Date.ToUniversalTime());
                AFTimeRange oTiempoRango = new AFTimeRange(oTiempoIni, oTiempoFin);


                //traemos los datos
                IEnumerable<AFValues> listResults = oData.RecordedValues(oTiempoRango, AFBoundaryType.Inside, null, false, config);
                foreach (AFValues oAFValores in listResults)
                {
                    foreach (AFValue oAFValor in oAFValores)
                    {
                        try
                        {
                            if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                                oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                                oAFValor.Value.GetType().BaseType.Name == "SystemException" ||
                                oAFValor.Value.GetType().BaseType.Name == "Exception")
                            {
                                continue;
                            }

                            oElementoValor = new ElementoValor();
                            oElementoValor.Valor = oAFValor.ValueAsDouble();
                            oElementoValor.Elemento = oAFValor.Attribute.Element.Name;
                            oElementosValor.Add(oElementoValor);
                        }
                        catch (Exception ex2)
                        {
                            continue;
                        }

                    }
                }




                //obtenemos los valores de Process order de todos los elementos de tipo "Equipment"
                List<ElementoValor> oElementosValorOP = new List<ElementoValor>();
                ElementoValor oElementoValorOP = new ElementoValor();

                var oSearch2 = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Equipment'");
                IEnumerable<AFElement> oElementosMaquinas = oSearch2.FindElements(fullLoad: true);

                IEnumerable<AFAttribute> attributes2 = oElementosMaquinas.SelectMany(elem => elem.Attributes.OfType<AFAttribute>());
                AFAttributeList attributeList2 = new AFAttributeList(attributes2);

                IEnumerable<AFAttribute> attributesFiltered2 = attributeList2.Where(a => a.Name.ToUpper() == "Process order".ToUpper());
                AFAttributeList attributeListFiltered2 = new AFAttributeList(attributesFiltered2);

                AFListData oData2 = attributeListFiltered2.Data;

                if (oPI.ConnectionInfo.IsConnected == false)
                    oPI.Connect();

                AFTime oTiempo = new AFTime(ldt_Date.ToUniversalTime());

                //traemos los datos
                IEnumerable<AFValue> listResults2 = oData2.RecordedValue(oTiempo, AFRetrievalMode.AtOrBefore);
                foreach (AFValue oAFValor in listResults2)
                {
                    try
                    {
                        if (oAFValor.Value.GetType().Name == "AFEnumerationValue" ||
                            oAFValor.Value.GetType().BaseType.Name == "PIException" ||
                            oAFValor.Value.GetType().BaseType.Name == "SystemException" ||
                            oAFValor.Value.GetType().BaseType.Name == "Exception")
                        {
                            continue;
                        }

                        oElementoValorOP = new ElementoValor();
                        oElementoValorOP.Valor = oAFValor.ValueAsDouble();
                        oElementoValorOP.Elemento = oAFValor.Attribute.Element.Name;
                        oElementosValorOP.Add(oElementoValorOP);
                    }
                    catch (Exception ex2)
                    {
                        continue;
                    }

                }



              

                //CIRCUITOS
                var oSearchCircuitos = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='Circuito'");
                foreach (AFElement oElementoCircuito in oSearchCircuitos.FindElements(fullLoad: true))
                {
                    oProceso = new RDPProceso();
                    oProceso.FCH_PRODUCCION = fecha;
                    oProceso.COD_GRUPO = oElementoCircuito.Name;

                    oProceso.NUM_ORDEN = 99999;
                    if (oElementoCircuito.Attributes["Notification order"] != null)
                        oProceso.NUM_ORDEN = oElementoCircuito.Attributes["Notification order"].GetValue().ValueAsInt32();

                    oProceso.MAQUINAS = new List<RDPMaquina>();

                    //MAQUINAS
                    string cRutaAFCircuito = oElementoCircuito.GetPath();
                    cRutaAFCircuito = cRutaAFCircuito.Replace(@"\\" + oPI.Name + @"\" + cDatabase + @"\", "");

                    var oSearchMaquinas = new AFElementSearch(lo_Database, "Buscar", @"Root:'" + cRutaAFCircuito + "' TemplateName:='Equipment'");
                    foreach (AFElement oElementoMaquina in oSearchMaquinas.FindElements(fullLoad: true))
                    {
                        if (oElementoMaquina.Attributes["Notificacion"].GetValue().ValueAsInt32() == 0)
                        {
                            //no se notifica maquina
                            continue;
                        }

                        oMaquina = new RDPMaquina();
                        oMaquina.FCH_PRODUCCION = fecha;
                        oMaquina.COD_MAQUINA = oElementoMaquina.Name;
                        oMaquina.COD_GRUPO = oElementoCircuito.Name;

                        oMaquina.NUM_ORDEN = 99999;
                        if (oElementoMaquina.Attributes["Notification order"] != null)
                            oMaquina.NUM_ORDEN = oElementoMaquina.Attributes["Notification order"].GetValue().ValueAsInt32();

                        oMaquina.PRODUCTOS = new List<RDPProducto>();



                        //PRODUCTOS -ENERGIA
                        string cRutaAFMaquina = oElementoMaquina.GetPath();
                        cRutaAFMaquina = cRutaAFMaquina.Replace(@"\\" + oPI.Name + @"\" + cDatabase + @"\", "");

                        var oSearchFormulacionProductos = new AFElementSearch(lo_Database, "Buscar", @"Root:'" + cRutaAFMaquina + "' TemplateName:='Energy Formulation'");
                        foreach (AFElement oElementoFormulacionProducto in oSearchFormulacionProductos.FindElements(fullLoad: true))
                        {
                            foreach (AFElement oElementoProducto in oElementoFormulacionProducto.Elements)
                            {                        
                                if (oElementoProducto.Template.Name == "Counter Formulation")
                                {
                                    int nNotificacion = 0;
                                    if (Int32.TryParse(oElementoProducto.Attributes["Notificacion"].GetValue().ToString(), out nNotificacion) == false)
                                    {
                                        //no se notifica producto
                                        continue;
                                    }

                                    if (oElementoProducto.Attributes["Notificacion"].GetValue().ValueAsInt32() == 0)
                                    {
                                        //no se notifica producto
                                        continue;
                                    }

                                    oProducto = new RDPProducto();
                                    oProducto.FCH_PRODUCCION = fecha;
                                    oProducto.COD_MAQUINA = oElementoMaquina.Name;
                                    oProducto.COD_GRUPO = oElementoCircuito.Name;
                                    oProducto.COD_PRODUCTO = oElementoProducto.Name;
                                    oProducto.COD_PUESTO_TRABAJO = oElementoProducto.Attributes["Puesto trabajo"].GetValue().Value.ToString();
                                    oProducto.COD_MATERIAL_OP = oElementoProducto.Attributes["SAP Code"].GetValue().Value.ToString();
                                    oProducto.COD_ALMACEN = oElementoProducto.Attributes["Storage"].GetValue().Value.ToString();
                                    oProducto.COD_UNIDAD = oElementoProducto.Attributes["Units"].GetValue().Value.ToString();
                                    oProducto.CNT_HORAS = "0.00";
                                    oProducto.COD_UNIDAD_HORAS = "";
                                    oProducto.FLG_GAS = "N";
                                    oProducto.FLG_COAL = "N";
                                    oProducto.FLG_HORA = "N";
                                    oProducto.FLG_ENERGIA = "S";
                                    oProducto.COD_ESTADO = "";

                                    oProducto.DSC_RESPUESTA = "";
                                    oProducto.COD_RESPUESTA = "";
                                    oProducto.NUM_NOTIFICACION = "";
                                    oProducto.NUM_CONTADOR = "";
                                    oProducto.DSC_RESPUESTA_DETALLE = "";
                                    oProducto.NUM_INTENTOS = 0;
                                    oProducto.VORNR = "";
                                    oProducto.DSC_PRODUCTO = oElementoProducto.Attributes["Header title notification"].GetValue().Value.ToString();
                                    oProducto.NRO_DUPLICADO = "0";

                                    oProducto.NUM_ORDEN = 99999;
                                    if (oElementoProducto.Attributes["Notification order"] != null)
                                        oProducto.NUM_ORDEN = oElementoProducto.Attributes["Notification order"].GetValue().ValueAsInt32();

                                    oProducto.MATERIALES = new List<RDPMaterial>();

                                    oProducto.NUM_OP = "";
                                    oProducto.DSC_OP = "<span>OP No Configurada</span>";
                                    ElementoValor oElementoValorOPTemp = oElementosValorOP.FirstOrDefault(x => x.Elemento == oElementoMaquina.Name);
                                    if (oElementoValorOPTemp != null)
                                    {
                                        oProducto.NUM_OP = oElementoValorOPTemp.Valor.ToString();
                                        oProducto.DSC_OP = "<span class='tooltip-orden-proceso' data-toggle='tooltip' data-placement='top' title='" + oProducto.COD_MATERIAL_OP + "'>O.P|</span>" + oProducto.NUM_OP;
                                    }

                                    oProducto.CNT_TONELADAS = "0.00";
                                    ElementoValor oElementoValorTemp = oElementosValor.FirstOrDefault(x => x.Elemento == oElementoProducto.Name);
                                    if (oElementoValorTemp != null)
                                    {
                                        oProducto.CNT_TONELADAS = oElementoValorTemp.Valor.ToString("###,###,##0.00");
                                    }


                                    oMaquina.PRODUCTOS.Add(oProducto);



                                }
                            }
                        }


                        oProceso.MAQUINAS.Add(oMaquina);
                    }

                    oReporte.oProcesos.Add(oProceso);
                }


                oReporte.oProcesos = AgregarDatosNotificacion(ldt_Date, oReporte.oProcesos);


                //ordenamos
                if (oReporte.oProcesos != null)
                {
                    oReporte.oProcesos = oReporte.oProcesos.OrderBy(x => x.NUM_ORDEN).ToList();
                    foreach (RDPProceso oProcesoTemp in oReporte.oProcesos)
                    {
                        if (oProcesoTemp.MAQUINAS != null)
                        {
                            oProcesoTemp.MAQUINAS = oProcesoTemp.MAQUINAS.OrderBy(x => x.NUM_ORDEN).ToList();
                            foreach (RDPMaquina oMaquinaTemp in oProcesoTemp.MAQUINAS)
                            {
                                if (oMaquinaTemp.PRODUCTOS != null)
                                {
                                    oMaquinaTemp.PRODUCTOS = oMaquinaTemp.PRODUCTOS.OrderBy(x => x.NUM_ORDEN).ToList();
                                }
                            }
                        }
                    }
                }
                



                return oReporte;

            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerRDPEnergia", "wsUNACEMPI", false);
                oReporte = new RDPReporte();
                oReporte.Fecha = fecha;
                oReporte.oProcesos = new List<RDPProceso>();
                return oReporte;
            }
        }


        public Resultado RegistrarOP(string fecha)
        {
            Resultado oResultado = new Resultado();

            try
            {
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
                List<OrdenProcesoMaterial> oOrdenesProceso = ListarOP(fecha);

                if (oOrdenesProceso != null)
                {
                    foreach (OrdenProcesoMaterial oOP in oOrdenesProceso)
                    {
                        int nNumOP = 0;
                        bool bEsNumero = Int32.TryParse(oOP.NumOP, out nNumOP);
                        if (bEsNumero)
                        {
                            bool bRes = ModPIExtFunctions.Write_Value_PI(cServidorPIData, oOP.Tag, Convert.ToDateTime(fecha), nNumOP, true);
                        }
                    }
                }

                return new Resultado(0, "Operacion exitosa");
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - RegistrarOP", "wsUNACEMPI", false);
                return new Resultado(-1, ex.Message);
            }
        }


        public List<OrdenProcesoMaterial> ListarOP(string fecha)
        {
            List<OrdenProcesoMaterial> oOrdenesProceso = new List<OrdenProcesoMaterial>();
            OrdenProcesoMaterial oOrdenProceso = new OrdenProcesoMaterial();

            DateTime ldt_Date;
            try
            {
                if (fecha.Length == 10)
                {
                    ldt_Date = new DateTime(Convert.ToInt32(fecha.Substring(0, 4)), Convert.ToInt32(fecha.Substring(5, 2)), Convert.ToInt32(fecha.Substring(8, 2)));
                }
                else
                {
                    return oOrdenesProceso;
                }
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarOP", "wsUNACEMPI", false);
                return oOrdenesProceso;
            }

            try
            {
                int nTotalRegistros = 0;
                int nTotalRegistrosConExito = 0;
                int nTotalRegistrosConError = 0;

                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                string cDatabase = WebConfigurationManager.AppSettings["database"];
                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();
                AFDatabase oDB = oPI.Databases[cDatabase];

                DataTable dt = new DataTable();
                AFTable lo_Table;
                lo_Table = oDB.Tables["Process orders"];
                dt = lo_Table.Table;

                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        oOrdenProceso = new OrdenProcesoMaterial();
                        oOrdenProceso.Fecha = fecha;
                        oOrdenProceso.Tag = dt.Rows[i]["Tag"].ToString();
                        oOrdenProceso.MaterialSAP = dt.Rows[i]["SAP Code"].ToString();
                        oOrdenProceso.PuestoTrabajo = dt.Rows[i]["Workstation"].ToString();
                        oOrdenProceso.Centro = dt.Rows[i]["Logistic center"].ToString();
                        oOrdenProceso.Comentario = dt.Rows[i]["Comment"].ToString();                   
                    
                        //traemos la orden de proceso del webservice
                        ConsultaObtenerOrdenProceso oConsultaObtenerOrdenProceso = new ConsultaObtenerOrdenProceso();
                        oConsultaObtenerOrdenProceso.codCentroLogistico = oOrdenProceso.Centro;
                        oConsultaObtenerOrdenProceso.codPuestoTrabajo = oOrdenProceso.PuestoTrabajo;
                        oConsultaObtenerOrdenProceso.numMaterial = "";

                        if (oOrdenProceso.MaterialSAP.Length >= 11)
                            oConsultaObtenerOrdenProceso.numMaterial = "00000000" + oOrdenProceso.MaterialSAP.Substring(0, 11).Replace("-", "");
                        
                        oConsultaObtenerOrdenProceso.fecInicio = oOrdenProceso.Fecha;

                        //consumimos el webservice para traer las ordenes de proceso
                        try
                        {
                            //serializamos los parametros
                            var json = Newtonsoft.Json.JsonConvert.SerializeObject(oConsultaObtenerOrdenProceso);

                            string cRutaServicioOrdenProceso = WebConfigurationManager.AppSettings["RutaServicioOrdenProceso"];
                            var request = WebRequest.CreateHttp(cRutaServicioOrdenProceso);
                            request.Method = "POST";
                            request.ContentType = "application/json";
                            var buffer = Encoding.UTF8.GetBytes(json);
                            request.ContentLength = buffer.Length;
                            request.GetRequestStream().Write(buffer, 0, buffer.Length);
                            var response = request.GetResponse();
                            json = (new StreamReader(response.GetResponseStream())).ReadToEnd();

                            //deserializamos el resultado                    
                            RespuestaObtenerOrdenProceso oRespuestaObtenerOrdenProceso = new JavaScriptSerializer().Deserialize<RespuestaObtenerOrdenProceso>(json);

                            oOrdenProceso.NumOP = "";
                            oOrdenProceso.Resultado = "";
                            if (oRespuestaObtenerOrdenProceso != null)
                            {
                                if (oRespuestaObtenerOrdenProceso.CodResultado == "0")
                                {
                                    oOrdenProceso.NumOP = oRespuestaObtenerOrdenProceso.NumOP;
                                    oOrdenProceso.Resultado = "Se obtuvo la orden de proceso con éxito";
                                    nTotalRegistrosConExito = nTotalRegistrosConExito + 1;
                                }
                                else
                                {
                                    oOrdenProceso.Resultado = "No se obtuvo la orden de proceso. CodResultado: " + oRespuestaObtenerOrdenProceso.CodResultado + ", DscResultado: " + oRespuestaObtenerOrdenProceso.DscResultado;
                                    nTotalRegistrosConError = nTotalRegistrosConError + 1;
                                }
                            }
                        }
                        catch (Exception exWS)
                        {
                            oOrdenProceso.NumOP = "";
                            oOrdenProceso.Resultado = "No se obtuvo la orden de proceso. Excepción: " + exWS.Message;
                            nTotalRegistrosConError = nTotalRegistrosConError + 1;

                            Funciones.CapturarMensaje(oOrdenProceso.ToString());
                        }

                        Funciones.CapturarError(JsonConvert.SerializeObject(oOrdenProceso), "ListarOP", "", "", "Operaciones.svc", true, false);


                        nTotalRegistros = nTotalRegistros + 1;
                        oOrdenesProceso.Add(oOrdenProceso);
                    }
                }

                return oOrdenesProceso;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ListarOP", "wsUNACEMPI", false);
                return new List<OrdenProcesoMaterial>();
            }
        }


        //metodos de apoyo

       public DataTable ObtenerTablaIndicadores() {
           try
            {
                //obtenemos elementos de AF
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];
                String cDatabase = WebConfigurationManager.AppSettings["database"];
                //String cDatabase = "Test";

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];       

                DataTable dt = new DataTable();
                AFTable lo_Table;
                lo_Table = lo_Database.Tables["Downtimes KPI"];
                return lo_Table.Table;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerTablaIndicadores", "wsUNACEMPI", false);
                return null;
            }
       }

        private List<RDPProceso> AgregarDatosNotificacion(DateTime dFecha, List<RDPProceso> oProcesos)
        {
            List<RDPNotificacion> oNotificaciones = new List<RDPNotificacion>();
            RDPNotificacion oNotificacion = new RDPNotificacion();

            try
            {           
                //OBTENEMOS LAS NOTIFICACIONES DEL DIA
                string cDatabase = WebConfigurationManager.AppSettings["database"];
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[cDatabase];


                //obtenemos los tags de notificaciones
                List<string> oTags = new List<string>();             
                DataTable dt = new DataTable();
                AFTable lo_Table;
                lo_Table = lo_Database.Tables["Notification"];
                dt = lo_Table.Table;

                foreach (DataRow dr in dt.Rows)
                {
                    string cTag = dr["Tag"].ToString();
                    if (cTag.Trim() != "")
                        oTags.Add(cTag);
                }

                string[] cTags = oTags.ToArray();
                IEnumerable<AFValues> listResults = ModPIExtFunctions.ObtenerValoresTags(cServidorPIData, cTags, dFecha, dFecha.AddYears(3));
                foreach (AFValues oAFValores in listResults)
                {
                    AFValue oAFValor = oAFValores.OrderByDescending(x => x.Timestamp.LocalTime).FirstOrDefault(y => y.Value.ToString() == dFecha.ToString("yyyy-MM-dd"));
                    if (oAFValor != null)
                    {
                        oNotificacion = new RDPNotificacion();

                        DataRow[] drs = dt.Select("Tag='" + oAFValor.PIPoint.Name + "'");
                        if (drs.Length > 0){
                            oNotificacion.NOM_ELEMENTO = drs[0]["Notification"].ToString();
                            oNotificacion.NRO_DUPLICADO = drs[0]["Duplicate"].ToString();
                        }
                        else {
                            oNotificacion.NOM_ELEMENTO = "";
                            oNotificacion.NRO_DUPLICADO = "";
                        }
                            
                     
                        oNotificacion.FCH_NOTIFICACION = oAFValor.Timestamp.LocalTime.ToString("yyyy-MM-dd HH:mm:ss");
                        oNotificacion.FCH_PRODUCCION = oAFValor.Value.ToString();

                        oNotificacion.NUM_NOTIFICACION = "";
                        oNotificacion.NUM_CONTADOR = "";
                        oNotificacion.COD_ESTADO = "";
                        oNotificacion.DSC_RESPUESTA = "";
                        oNotificacion.COD_RESPUESTA = "";
                        oNotificacion.USR_NOTIFICACION = "";
                        oNotificacion.DSC_RESPUESTA_DETALLE="";
                        oNotificacion.NUM_INTENTOS = 0;

                        AFAnnotations oAnotaciones = (AFAnnotations)oAFValor.GetAnnotation();
                        if (oAnotaciones != null)
                        {
                            //ordenamos las anotaciones desde la mas reciente a la mas antigua
                            List<AFAnnotation> oAnotacionesOrdenadas = oAnotaciones.OrderByDescending(x => x.CreationDate.LocalTime).ToList();

                            //NUM_NOTIFICACION                                 
                            AFAnnotation oAnotacionNumNotificacion = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "NUM_NOTIFICACION");
                            if (oAnotacionNumNotificacion != null)
                            {
                                oNotificacion.NUM_NOTIFICACION = oAnotacionNumNotificacion.Value.ToString();                           
                            }

                            //NUM_CONTADOR                                  
                            AFAnnotation oAnotacionNumContador = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "NUM_CONTADOR");
                            if (oAnotacionNumContador != null)
                            {
                                oNotificacion.NUM_CONTADOR = oAnotacionNumContador.Value.ToString();
                            }

                            //COD_ESTADO                                  
                            AFAnnotation oAnotacionCodEstado = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "COD_ESTADO");
                            if (oAnotacionCodEstado != null)
                            {
                                oNotificacion.COD_ESTADO = oAnotacionCodEstado.Value.ToString();
                            }

                            //DSC_RESPUESTA                                  
                            AFAnnotation oAnotacionDscRespuesta = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "DSC_RESPUESTA");
                            if (oAnotacionDscRespuesta != null)
                            {
                                oNotificacion.DSC_RESPUESTA = oAnotacionDscRespuesta.Value.ToString();
                            }

                            //COD_RESPUESTA                                  
                            AFAnnotation oAnotacionCodRespuesta = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "COD_RESPUESTA");
                            if (oAnotacionCodRespuesta != null)
                            {
                                oNotificacion.COD_RESPUESTA = oAnotacionCodRespuesta.Value.ToString();
                            }

                            //USR_NOTIFICACION                                  
                            AFAnnotation oAnotacionUsrNotificacion = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "USR_NOTIFICACION");
                            if (oAnotacionUsrNotificacion != null)
                            {
                                oNotificacion.USR_NOTIFICACION = oAnotacionUsrNotificacion.Value.ToString();
                            }

                            //DSC_RESPUESTA_DETALLE                                  
                            AFAnnotation oAnotacionDscRespuestaDetalle = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "DSC_RESPUESTA_DETALLE");
                            if (oAnotacionDscRespuestaDetalle != null)
                            {
                                oNotificacion.DSC_RESPUESTA_DETALLE = oAnotacionDscRespuestaDetalle.Value.ToString();
                            }

                            //NUM_INTENTOS                                  
                            AFAnnotation oAnotacionNumIntentos = oAnotacionesOrdenadas.FirstOrDefault(x => x.Name == "NUM_INTENTOS");
                            if (oAnotacionNumIntentos != null)
                            {
                                oNotificacion.NUM_INTENTOS = Convert.ToInt32(oAnotacionNumIntentos.Value);
                            }
                        }

                        oNotificaciones.Add(oNotificacion);
                        
                    }
                }

                
                //completamos en los productos los datos de notificacion en caso tengan para el dia
                foreach (RDPProceso oProceso in oProcesos)
                {
                    foreach (RDPMaquina oMaquina in oProceso.MAQUINAS)
                    {
                        foreach (RDPProducto oProducto in oMaquina.PRODUCTOS)
                        {
                            RDPNotificacion oNotificacionTemp = new RDPNotificacion();                           
                            oNotificacionTemp = oNotificaciones.FirstOrDefault(x => x.NOM_ELEMENTO == oProducto.COD_PRODUCTO && x.NRO_DUPLICADO == oProducto.NRO_DUPLICADO);

                            if (oNotificacionTemp != null)
                            {
                                oProducto.NUM_NOTIFICACION = oNotificacionTemp.NUM_NOTIFICACION;
                                oProducto.NUM_CONTADOR = oNotificacionTemp.NUM_CONTADOR;
                                oProducto.COD_ESTADO = oNotificacionTemp.COD_ESTADO;
                                oProducto.DSC_RESPUESTA = oNotificacionTemp.DSC_RESPUESTA;
                                oProducto.COD_RESPUESTA = oNotificacionTemp.COD_RESPUESTA;
                                oProducto.USR_NOTIFICACION = oNotificacionTemp.USR_NOTIFICACION;
                                oProducto.FCH_NOTIFICACION = oNotificacionTemp.FCH_NOTIFICACION;                               
                                oProducto.DSC_RESPUESTA_DETALLE = oNotificacionTemp.DSC_RESPUESTA_DETALLE;
                                oProducto.NUM_INTENTOS = oNotificacionTemp.NUM_INTENTOS;                              
                            }
                            else
                            {
                                oProducto.COD_RESPUESTA = "-";
                                oProducto.DSC_RESPUESTA = "Pendiente de notificar";
                            }

                            DataRow[] drs = dt.Select("Notification='" + oProducto.COD_PRODUCTO + "' AND Duplicate='" + oProducto.NRO_DUPLICADO + "'");
                            if (drs.Length > 0)
                                oProducto.DSC_TAG_NOTIFICACION = drs[0]["Tag"].ToString();
                            else
                                oProducto.DSC_TAG_NOTIFICACION = "";
                        }
                    }
                }

                return oProcesos;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - AgregarDatosNotificacion", "wsUNACEMPI", false);
                return oProcesos;
            }
        }


        private string Obtener_Total_MMBTU(List<Formulacion> oFormulaciones, List<FactorFormulacion> oFactores, DateTime dFechaIni, DateTime dFechaFin)
        {
            ElementoFAC oElementoFAC = new ElementoFAC();
            FactorFormulacion oFactor = new FactorFormulacion();
            Formulacion oFormulacion = new Formulacion();
            double nValorSuma = 0;

            DateTime dFechaTemp = dFechaIni;
            while (dFechaTemp <= dFechaFin)
            {

                //41X.LHV.Pulv.Fuel.Btu
                oElementoFAC.LHV_Pulv_Fuel_Btu = "";
                oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.Pulv.Fuel.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                if (oFactor != null)
                {
                    oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                }

                //41X.CLISI2
                oElementoFAC._41X_CLISI2_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI2");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                //41X.CLISI3
                oElementoFAC._41X_CLISI3_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI3");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                //41X.LHV.NaturalGas.Btu
                oElementoFAC.LHV_NaturalGas_Btu = "";
                oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.NaturalGas.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                if (oFactor != null)
                {
                    oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                }

                //41X.CLISI100
                oElementoFAC._41X_CLISI100_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI100");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                //41X.CLISI10
                oElementoFAC._41X_CLISI10_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI10");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI10_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                //41X.CLISI55
                oElementoFAC._41X_CLISI55_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI55");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                //41X.CLISI5
                oElementoFAC._41X_CLISI5_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI5");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI5_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                ////DIARIO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                ////        LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6     
                //if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" && oElementoFAC._41X_CLISI2_Total.Trim() != "" && oElementoFAC._41X_CLISI3_Total.Trim() != "" &&
                //    oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" && oElementoFAC._41X_CLISI100_Total.Trim() != "" && oElementoFAC._41X_CLISI10_Total.Trim() != "" &&
                //    oElementoFAC._41X_CLISI55_Total.Trim() != "" && oElementoFAC._41X_CLISI5_Total.Trim() != "")
                //{
                //    double nValor_LHV_Pulv_Fuel_Btu = Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                //    double nValor_41X_CLISI2_Total = Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                //    double nValor_41X_CLISI3_Total = Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                //    double nValor_LHV_NaturalGas_Btu = Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                //    double nValor_41X_CLISI100_Total = Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                //    double nValor_41X_CLISI10_Total = Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                //    double nValor_41X_CLISI55_Total = Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                //    double nValor_41X_CLISI5_Total = Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                //    double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 6) +
                //                    nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total) / Math.Pow(10, 6);

                //    nValorSuma = nValorSuma + nValor;

                //}

                //DIARIO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+
                //        LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI10.Total+41X.CLISI55.Total+41X.CLISI5.Total)/10^6     
                if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" || oElementoFAC._41X_CLISI2_Total.Trim() != "" || oElementoFAC._41X_CLISI3_Total.Trim() != "" ||
                    oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" || oElementoFAC._41X_CLISI100_Total.Trim() != "" || oElementoFAC._41X_CLISI10_Total.Trim() != "" ||
                    oElementoFAC._41X_CLISI55_Total.Trim() != "" || oElementoFAC._41X_CLISI5_Total.Trim() != "")
                {
                    double nValor_LHV_Pulv_Fuel_Btu = oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                    double nValor_41X_CLISI2_Total = oElementoFAC._41X_CLISI2_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                    double nValor_41X_CLISI3_Total = oElementoFAC._41X_CLISI3_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                    double nValor_LHV_NaturalGas_Btu = oElementoFAC.LHV_NaturalGas_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                    double nValor_41X_CLISI100_Total = oElementoFAC._41X_CLISI100_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                    double nValor_41X_CLISI10_Total = oElementoFAC._41X_CLISI10_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI10_Total.Replace(",", ""));
                    double nValor_41X_CLISI55_Total = oElementoFAC._41X_CLISI55_Total.Trim() == "" ? 0 :Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));
                    double nValor_41X_CLISI5_Total = oElementoFAC._41X_CLISI5_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI5_Total.Replace(",", ""));

                    double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 6) +
                                    nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI10_Total + nValor_41X_CLISI55_Total + nValor_41X_CLISI5_Total) / Math.Pow(10, 6);

                    nValorSuma = nValorSuma + nValor;
                }

                dFechaTemp = dFechaTemp.AddDays(1);
            }

            return nValorSuma.ToString("###,###,###");
        }

        private string Obtener_Process_MMBTU(List<Formulacion> oFormulaciones, List<FactorFormulacion> oFactores, DateTime dFechaIni, DateTime dFechaFin)
        {
            ElementoFAC oElementoFAC = new ElementoFAC();
            FactorFormulacion oFactor = new FactorFormulacion();
            Formulacion oFormulacion = new Formulacion();
            double nValorSuma = 0;

            DateTime dFechaTemp = dFechaIni;
            while (dFechaTemp <= dFechaFin)
            {

                //41X.LHV.Pulv.Fuel.Btu
                oElementoFAC.LHV_Pulv_Fuel_Btu = "";
                oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.Pulv.Fuel.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                if (oFactor != null)
                {
                    oElementoFAC.LHV_Pulv_Fuel_Btu = oFactor.Valor;
                }

                //41X.CLISI2
                oElementoFAC._41X_CLISI2_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI2");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI2_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                //41X.CLISI3
                oElementoFAC._41X_CLISI3_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI3");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI3_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                //41X.LHV.NaturalGas.Btu
                oElementoFAC.LHV_NaturalGas_Btu = "";
                oFactor = oFactores.FirstOrDefault(x => x.Nombre == "41X.LHV.NaturalGas.Btu" && Convert.ToDateTime(x.Fecha) <= dFechaTemp);
                if (oFactor != null)
                {
                    oElementoFAC.LHV_NaturalGas_Btu = oFactor.Valor;
                }

                //41X.CLISI100
                oElementoFAC._41X_CLISI100_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI100");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI100_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                //41X.CLISI100
                oElementoFAC._41X_CLISI55_Total = "";
                oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == "41X.CLISI55");
                if (oFormulacion != null)
                {
                    Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == dFechaTemp.ToString("yyyy-MM-dd"));
                    if (oDelta != null)
                    {
                        if (oDelta.Valor.Trim() != "")
                        {
                            double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                            oElementoFAC._41X_CLISI55_Total = nValorDia.ToString("###,###,###.00");
                        }
                    }
                }

                //DIARIO: LHV.Pulv.Fuel.Btu*(41X.CLISI2.Total+41X.CLISI3.Total)*2000/10^6+LHV.NaturalGas.Btu*(41X.CLISI100.Total+41X.CLISI55.Total)/10^6 
                if (oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() != "" || oElementoFAC._41X_CLISI2_Total.Trim() != "" || oElementoFAC._41X_CLISI3_Total.Trim() != "" ||
                    oElementoFAC.LHV_NaturalGas_Btu.Trim() != "" || oElementoFAC._41X_CLISI100_Total.Trim() != "" || oElementoFAC._41X_CLISI55_Total.Trim() != "")
                {
                    double nValor_LHV_Pulv_Fuel_Btu = oElementoFAC.LHV_Pulv_Fuel_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_Pulv_Fuel_Btu.Replace(",", ""));
                    double nValor_41X_CLISI2_Total = oElementoFAC._41X_CLISI2_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI2_Total.Replace(",", ""));
                    double nValor_41X_CLISI3_Total = oElementoFAC._41X_CLISI3_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI3_Total.Replace(",", ""));
                    double nValor_LHV_NaturalGas_Btu = oElementoFAC.LHV_NaturalGas_Btu.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC.LHV_NaturalGas_Btu.Replace(",", ""));
                    double nValor_41X_CLISI100_Total = oElementoFAC._41X_CLISI100_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI100_Total.Replace(",", ""));
                    double nValor_41X_CLISI55_Total = oElementoFAC._41X_CLISI55_Total.Trim() == "" ? 0 : Convert.ToDouble(oElementoFAC._41X_CLISI55_Total.Replace(",", ""));

                    double nValor = nValor_LHV_Pulv_Fuel_Btu * (nValor_41X_CLISI2_Total + nValor_41X_CLISI3_Total) * 2000 / Math.Pow(10, 6) +
                                    nValor_LHV_NaturalGas_Btu * (nValor_41X_CLISI100_Total + nValor_41X_CLISI55_Total) / Math.Pow(10, 6);

                    nValorSuma = nValorSuma + nValor;
                }

                dFechaTemp = dFechaTemp.AddDays(1);
            }

            return nValorSuma.ToString("###,###,###");
        }

        private ElementoDOR CalcularElementoDOR(ElementoDOR oElementoDOR, List<Formulacion> oFormulaciones, DateTime ldt_Date)
        {
            oElementoDOR.ValorDia = "";
            oElementoDOR.ValorMes = "";
            oElementoDOR.ValorAno = "";

            Formulacion oFormulacion = oFormulaciones.FirstOrDefault(x => x.Nombre == oElementoDOR.Origen);
            if (oFormulacion != null)
            {

                //dia
                Delta oDelta = oFormulacion.Deltas.FirstOrDefault(x => x.Fecha == ldt_Date.ToString("yyyy-MM-dd"));
                if (oDelta != null)
                {
                    if (oDelta.Valor.Trim() != "")
                    {
                        //double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", "")) * oDelta.Factor;
                        double nValorDia = Convert.ToDouble(oDelta.Valor.Replace(",", ""));
                        oElementoDOR.ValorDia = nValorDia.ToString("###,###,###.00");
                    }
                }

                //mes
                DateTime dFechaIniMes = ldt_Date.AddDays(-(ldt_Date.Day - 1));
                DateTime dFechaFinMes = ldt_Date;
                List<Delta> oDeltasFiltradosMes = oFormulacion.Deltas.Where(x => x.Valor.Trim() != "" &&
                                                                                 Convert.ToDateTime(x.Fecha) >= dFechaIniMes &&
                                                                                 Convert.ToDateTime(x.Fecha) <= dFechaFinMes).ToList();
                if (oDeltasFiltradosMes.Count > 0)
                {
                    //double nValorMes = oDeltasFiltradosMes.Sum(x => Convert.ToDouble(x.Valor.Replace(",", "")) * x.Factor);
                    double nValorMes = oDeltasFiltradosMes.Sum(x => Convert.ToDouble(x.Valor.Replace(",", "")));
                    oElementoDOR.ValorMes = nValorMes.ToString("###,###,###.00");
                }

                //año
                DateTime dFechaIniAno = new DateTime(ldt_Date.Year, 1, 1);
                DateTime dFechaFinAno = ldt_Date;
                List<Delta> oDeltasFiltradosAno = oFormulacion.Deltas.Where(x => x.Valor.Trim() != "" &&
                                                                                 Convert.ToDateTime(x.Fecha) >= dFechaIniAno &&
                                                                                 Convert.ToDateTime(x.Fecha) <= dFechaFinAno).ToList();
                if (oDeltasFiltradosAno.Count > 0)
                {
                    //double nValorAno = oDeltasFiltradosAno.Sum(x => Convert.ToDouble(x.Valor.Replace(",", "")) * x.Factor);
                    double nValorAno = oDeltasFiltradosAno.Sum(x => Convert.ToDouble(x.Valor.Replace(",", "")));
                    oElementoDOR.ValorAno = nValorAno.ToString("###,###,###.00");
                }       

            }

            return oElementoDOR;
        }

        public List<AFElement> ObtenerAFElementosDeTemplate(string database, string template)
        {
            try
            {
                //obtenemos elementos de AF
                string cServidorPIAF = WebConfigurationManager.AppSettings["ServidorPIAF"];
                string cServidorPIData = WebConfigurationManager.AppSettings["ServidorPIData"];

                PISystems oPIAF = new PISystems();
                PISystem oPI = oPIAF[cServidorPIAF];
                oPI.Connect();
                AFDatabase lo_Database = oPI.Databases[database];

                var oSearch = new AFElementSearch(lo_Database, "Buscar", @"Root:'' TemplateName:='" + template  + "'");

                return oSearch.FindElements(fullLoad: true).ToList();                      
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - ObtenerAFElementosDeTemplate", "wsUNACEMPI", false);
                return new List<AFElement>();
            }
        }

        private List<BloqueDOR> QuitarDecimalesCeroEnDOR(List<BloqueDOR> oBloques)
        {      
            if (oBloques != null)
            {
                foreach (BloqueDOR oBloque in oBloques)
                {
                    if (oBloque.Elementos != null)
                    {
                        foreach (ElementoDOR oElemento in oBloque.Elementos)
                        {
                            if (oElemento.ValorDia != null)
                            {
                                oElemento.ValorDia = QuitarDecimalesCeroEnCadena(oElemento.ValorDia);                            
                            }

                            if (oElemento.ValorMes != null)
                            {
                                oElemento.ValorMes = QuitarDecimalesCeroEnCadena(oElemento.ValorMes);                              
                            }

                            if (oElemento.ValorAno != null)
                            {
                                oElemento.ValorAno = QuitarDecimalesCeroEnCadena(oElemento.ValorAno);
                            }

                            if (oElemento.ValorDia2 != null)
                            {
                                oElemento.ValorDia2 = QuitarDecimalesCeroEnCadena(oElemento.ValorDia2);
                            }

                            if (oElemento.ValorMes2 != null)
                            {
                                oElemento.ValorMes2 = QuitarDecimalesCeroEnCadena(oElemento.ValorMes2);
                            }

                            if (oElemento.ValorAno2 != null)
                            {
                                oElemento.ValorAno2 = QuitarDecimalesCeroEnCadena(oElemento.ValorAno2);
                            }

                            if (oElemento.ValorDia3 != null)
                            {
                                oElemento.ValorDia3 = QuitarDecimalesCeroEnCadena(oElemento.ValorDia3);
                            }

                            if (oElemento.ValorMes3 != null)
                            {
                                oElemento.ValorMes3 = QuitarDecimalesCeroEnCadena(oElemento.ValorMes3);
                            }

                            if (oElemento.ValorDia4 != null)
                            {
                                oElemento.ValorDia4 = QuitarDecimalesCeroEnCadena(oElemento.ValorDia4);
                            }                         
                        }
                    }
                }
            }

            return oBloques;       
        }

        private string QuitarDecimalesCeroEnCadena(string numero)
        {
            try
            {
                double valor;
                if (Double.TryParse(numero, out valor))
                {
                    int indexPunto = numero.IndexOf(".");
                    if (indexPunto != -1)
                    {
                        string dec = numero.Substring(indexPunto + 1);
                        double valor2;
                        if (Double.TryParse(dec, out valor2))
                        {
                            if (valor2 == 0)
                            {
                                numero = numero.Replace("." + dec, "");
                            }
                        }
                    }
                }

                return numero;
            }
            catch (Exception ex)
            {
                Funciones.CapturarError(ex, "Operaciones.svc - QuitarDecimalesCeroEnCadena", "wsUNACEMPI", false);
                return numero;
            }
        }


        private string ObtenerNombreMesCompleto(int nMes)
        {
            string cMes = "";
            string cLenguaje = WebConfigurationManager.AppSettings["lenguaje"];

            if (cLenguaje == "en")
            {
                switch (nMes)
                {
                    case 1:
                        cMes = "JANUARY ";
                        break;
                    case 2:
                        cMes = "FEBRUARY";
                        break;
                    case 3:
                        cMes = "MARCH";
                        break;
                    case 4:
                        cMes = "APRIL";
                        break;
                    case 5:
                        cMes = "MAY";
                        break;
                    case 6:
                        cMes = "JUNE";
                        break;
                    case 7:
                        cMes = "JULY";
                        break;
                    case 8:
                        cMes = "AUGUST";
                        break;
                    case 9:
                        cMes = "SEPTEMBER";
                        break;
                    case 10:
                        cMes = "OCTUBER";
                        break;
                    case 11:
                        cMes = "NOVEMBER";
                        break;
                    case 12:
                        cMes = "DECEMBER";
                        break;
                }
            }
            else
            {
                switch (nMes)
                {
                    case 1:
                        cMes = "ENERO";
                        break;
                    case 2:
                        cMes = "FEBRERO";
                        break;
                    case 3:
                        cMes = "MARZO";
                        break;
                    case 4:
                        cMes = "ABRIL";
                        break;
                    case 5:
                        cMes = "MAYO";
                        break;
                    case 6:
                        cMes = "JUNIO";
                        break;
                    case 7:
                        cMes = "JULIO";
                        break;
                    case 8:
                        cMes = "AGOSTO";
                        break;
                    case 9:
                        cMes = "SETIEMBRE";
                        break;
                    case 10:
                        cMes = "OCTUBRE";
                        break;
                    case 11:
                        cMes = "NOVIEMBRE";
                        break;
                    case 12:
                        cMes = "DICIEMBRE";
                        break;
                }
            }



            return cMes;
        }

        /* FIN - METODOS PARA DRAKE */
    }
}
